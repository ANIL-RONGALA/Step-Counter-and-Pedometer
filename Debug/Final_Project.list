
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be6c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  0800c030  0800c030  0001c030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1f0  0800c1f0  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1f0  0800c1f0  0001c1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1f8  0800c1f8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1f8  0800c1f8  0001c1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1fc  0800c1fc  0001c1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800c200  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f4  200000a8  0800c2a8  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000149c  0800c2a8  0002149c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025528  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004632  00000000  00000000  00045643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020a0  00000000  00000000  00049c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000197b  00000000  00000000  0004bd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002effe  00000000  00000000  0004d693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000273b9  00000000  00000000  0007c691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00132d54  00000000  00000000  000a3a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000095fc  00000000  00000000  001d67a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  001dfd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c014 	.word	0x0800c014

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000ac 	.word	0x200000ac
 80001fc:	0800c014 	.word	0x0800c014

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f103 0208 	add.w	r2, r3, #8
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f103 0208 	add.w	r2, r3, #8
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f103 0208 	add.w	r2, r3, #8
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b085      	sub	sp, #20
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	6892      	ldr	r2, [r2, #8]
 8000fe4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6852      	ldr	r2, [r2, #4]
 8000fee:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d103      	bne.n	8001002 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	1e5a      	subs	r2, r3, #1
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001022:	b580      	push	{r7, lr}
 8001024:	b08c      	sub	sp, #48	; 0x30
 8001026:	af04      	add	r7, sp, #16
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4613      	mov	r3, r2
 8001030:	80fb      	strh	r3, [r7, #6]
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */


            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fee0 	bl	8001dfc <pvPortMalloc>
 800103c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d013      	beq.n	800106c <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001044:	2054      	movs	r0, #84	; 0x54
 8001046:	f000 fed9 	bl	8001dfc <pvPortMalloc>
 800104a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d008      	beq.n	8001064 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001052:	2254      	movs	r2, #84	; 0x54
 8001054:	2100      	movs	r1, #0
 8001056:	69f8      	ldr	r0, [r7, #28]
 8001058:	f009 fbb8 	bl	800a7cc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	631a      	str	r2, [r3, #48]	; 0x30
 8001062:	e005      	b.n	8001070 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001064:	6978      	ldr	r0, [r7, #20]
 8001066:	f000 ff83 	bl	8001f70 <vPortFree>
 800106a:	e001      	b.n	8001070 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d013      	beq.n	800109e <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001076:	88fa      	ldrh	r2, [r7, #6]
 8001078:	2300      	movs	r3, #0
 800107a:	9303      	str	r3, [sp, #12]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 f80e 	bl	80010ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001092:	69f8      	ldr	r0, [r7, #28]
 8001094:	f000 f892 	bl	80011bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	e002      	b.n	80010a4 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80010a4:	69bb      	ldr	r3, [r7, #24]
    }
 80010a6:	4618      	mov	r0, r3
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b088      	sub	sp, #32
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80010bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010c6:	3b01      	subs	r3, #1
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	f023 0307 	bic.w	r3, r3, #7
 80010d4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00a      	beq.n	80010f6 <prvInitialiseNewTask+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80010e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010e4:	f383 8811 	msr	BASEPRI, r3
 80010e8:	f3bf 8f6f 	isb	sy
 80010ec:	f3bf 8f4f 	dsb	sy
 80010f0:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80010f2:	bf00      	nop
 80010f4:	e7fe      	b.n	80010f4 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d01e      	beq.n	800113a <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	e012      	b.n	8001128 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	4413      	add	r3, r2
 8001108:	7819      	ldrb	r1, [r3, #0]
 800110a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	4413      	add	r3, r2
 8001110:	3334      	adds	r3, #52	; 0x34
 8001112:	460a      	mov	r2, r1
 8001114:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3301      	adds	r3, #1
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	2b0f      	cmp	r3, #15
 800112c:	d9e9      	bls.n	8001102 <prvInitialiseNewTask+0x54>
 800112e:	e000      	b.n	8001132 <prvInitialiseNewTask+0x84>
            {
                break;
 8001130:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800113a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113c:	2b06      	cmp	r3, #6
 800113e:	d90a      	bls.n	8001156 <prvInitialiseNewTask+0xa8>
        __asm volatile
 8001140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001144:	f383 8811 	msr	BASEPRI, r3
 8001148:	f3bf 8f6f 	isb	sy
 800114c:	f3bf 8f4f 	dsb	sy
 8001150:	613b      	str	r3, [r7, #16]
    }
 8001152:	bf00      	nop
 8001154:	e7fe      	b.n	8001154 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001158:	2b06      	cmp	r3, #6
 800115a:	d901      	bls.n	8001160 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800115c:	2306      	movs	r3, #6
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800116a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800116c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116e:	3304      	adds	r3, #4
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff1f 	bl	8000fb4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001178:	3318      	adds	r3, #24
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff1a 	bl	8000fb4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001184:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001188:	f1c3 0207 	rsb	r2, r3, #7
 800118c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	68f9      	ldr	r1, [r7, #12]
 800119a:	69b8      	ldr	r0, [r7, #24]
 800119c:	f000 fc1a 	bl	80019d4 <pxPortInitialiseStack>
 80011a0:	4602      	mov	r2, r0
 80011a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a4:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80011a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80011ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80011c4:	f000 fd38 	bl	8001c38 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80011c8:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <prvAddNewTaskToReadyList+0x108>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	4a3d      	ldr	r2, [pc, #244]	; (80012c4 <prvAddNewTaskToReadyList+0x108>)
 80011d0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80011d2:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <prvAddNewTaskToReadyList+0x10c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d109      	bne.n	80011ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80011da:	4a3b      	ldr	r2, [pc, #236]	; (80012c8 <prvAddNewTaskToReadyList+0x10c>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80011e0:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <prvAddNewTaskToReadyList+0x108>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d110      	bne.n	800120a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80011e8:	f000 fb5a 	bl	80018a0 <prvInitialiseTaskLists>
 80011ec:	e00d      	b.n	800120a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <prvAddNewTaskToReadyList+0x110>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d109      	bne.n	800120a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80011f6:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <prvAddNewTaskToReadyList+0x10c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001200:	429a      	cmp	r2, r3
 8001202:	d802      	bhi.n	800120a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001204:	4a30      	ldr	r2, [pc, #192]	; (80012c8 <prvAddNewTaskToReadyList+0x10c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800120a:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <prvAddNewTaskToReadyList+0x114>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a2f      	ldr	r2, [pc, #188]	; (80012d0 <prvAddNewTaskToReadyList+0x114>)
 8001212:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	2201      	movs	r2, #1
 800121a:	409a      	lsls	r2, r3
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <prvAddNewTaskToReadyList+0x118>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4313      	orrs	r3, r2
 8001222:	4a2c      	ldr	r2, [pc, #176]	; (80012d4 <prvAddNewTaskToReadyList+0x118>)
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122a:	492b      	ldr	r1, [pc, #172]	; (80012d8 <prvAddNewTaskToReadyList+0x11c>)
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	3304      	adds	r3, #4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	3204      	adds	r2, #4
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	1d1a      	adds	r2, r3, #4
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <prvAddNewTaskToReadyList+0x11c>)
 800126a:	441a      	add	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	615a      	str	r2, [r3, #20]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001274:	4918      	ldr	r1, [pc, #96]	; (80012d8 <prvAddNewTaskToReadyList+0x11c>)
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	1c59      	adds	r1, r3, #1
 8001284:	4814      	ldr	r0, [pc, #80]	; (80012d8 <prvAddNewTaskToReadyList+0x11c>)
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4403      	add	r3, r0
 8001290:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001292:	f000 fd01 	bl	8001c98 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <prvAddNewTaskToReadyList+0x110>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00e      	beq.n	80012bc <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <prvAddNewTaskToReadyList+0x10c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d207      	bcs.n	80012bc <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <prvAddNewTaskToReadyList+0x120>)
 80012ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	f3bf 8f4f 	dsb	sy
 80012b8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200001c4 	.word	0x200001c4
 80012c8:	200000c4 	.word	0x200000c4
 80012cc:	200001d0 	.word	0x200001d0
 80012d0:	200001e0 	.word	0x200001e0
 80012d4:	200001cc 	.word	0x200001cc
 80012d8:	200000c8 	.word	0x200000c8
 80012dc:	e000ed04 	.word	0xe000ed04

080012e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <vTaskStartScheduler+0x7c>)
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	2300      	movs	r3, #0
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2300      	movs	r3, #0
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	491b      	ldr	r1, [pc, #108]	; (8001360 <vTaskStartScheduler+0x80>)
 80012f4:	481b      	ldr	r0, [pc, #108]	; (8001364 <vTaskStartScheduler+0x84>)
 80012f6:	f7ff fe94 	bl	8001022 <xTaskCreate>
 80012fa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d116      	bne.n	8001330 <vTaskStartScheduler+0x50>
        __asm volatile
 8001302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001306:	f383 8811 	msr	BASEPRI, r3
 800130a:	f3bf 8f6f 	isb	sy
 800130e:	f3bf 8f4f 	dsb	sy
 8001312:	60bb      	str	r3, [r7, #8]
    }
 8001314:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <vTaskStartScheduler+0x88>)
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <vTaskStartScheduler+0x8c>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <vTaskStartScheduler+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800132a:	f000 fbe3 	bl	8001af4 <xPortStartScheduler>
 800132e:	e00e      	b.n	800134e <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001336:	d10a      	bne.n	800134e <vTaskStartScheduler+0x6e>
        __asm volatile
 8001338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800133c:	f383 8811 	msr	BASEPRI, r3
 8001340:	f3bf 8f6f 	isb	sy
 8001344:	f3bf 8f4f 	dsb	sy
 8001348:	607b      	str	r3, [r7, #4]
    }
 800134a:	bf00      	nop
 800134c:	e7fe      	b.n	800134c <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <vTaskStartScheduler+0x94>)
 8001350:	681b      	ldr	r3, [r3, #0]
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200001e8 	.word	0x200001e8
 8001360:	0800c030 	.word	0x0800c030
 8001364:	08001871 	.word	0x08001871
 8001368:	200001e4 	.word	0x200001e4
 800136c:	200001d0 	.word	0x200001d0
 8001370:	200001c8 	.word	0x200001c8
 8001374:	20000000 	.word	0x20000000

08001378 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <vTaskSuspendAll+0x18>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	4a03      	ldr	r2, [pc, #12]	; (8001390 <vTaskSuspendAll+0x18>)
 8001384:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	200001ec 	.word	0x200001ec

08001394 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80013a2:	4b71      	ldr	r3, [pc, #452]	; (8001568 <xTaskResumeAll+0x1d4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10a      	bne.n	80013c0 <xTaskResumeAll+0x2c>
        __asm volatile
 80013aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ae:	f383 8811 	msr	BASEPRI, r3
 80013b2:	f3bf 8f6f 	isb	sy
 80013b6:	f3bf 8f4f 	dsb	sy
 80013ba:	607b      	str	r3, [r7, #4]
    }
 80013bc:	bf00      	nop
 80013be:	e7fe      	b.n	80013be <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80013c0:	f000 fc3a 	bl	8001c38 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80013c4:	4b68      	ldr	r3, [pc, #416]	; (8001568 <xTaskResumeAll+0x1d4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	4a67      	ldr	r2, [pc, #412]	; (8001568 <xTaskResumeAll+0x1d4>)
 80013cc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013ce:	4b66      	ldr	r3, [pc, #408]	; (8001568 <xTaskResumeAll+0x1d4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 80c0 	bne.w	8001558 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80013d8:	4b64      	ldr	r3, [pc, #400]	; (800156c <xTaskResumeAll+0x1d8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80bb 	beq.w	8001558 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80013e2:	e08a      	b.n	80014fa <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013e4:	4b62      	ldr	r3, [pc, #392]	; (8001570 <xTaskResumeAll+0x1dc>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	6a12      	ldr	r2, [r2, #32]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	69d2      	ldr	r2, [r2, #28]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3318      	adds	r3, #24
 800140e:	429a      	cmp	r2, r3
 8001410:	d103      	bne.n	800141a <xTaskResumeAll+0x86>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	6a1a      	ldr	r2, [r3, #32]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	2200      	movs	r2, #0
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	1e5a      	subs	r2, r3, #1
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	68d2      	ldr	r2, [r2, #12]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	6892      	ldr	r2, [r2, #8]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	3304      	adds	r3, #4
 800144c:	429a      	cmp	r2, r3
 800144e:	d103      	bne.n	8001458 <xTaskResumeAll+0xc4>
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	1e5a      	subs	r2, r3, #1
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	2201      	movs	r2, #1
 800146e:	409a      	lsls	r2, r3
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <xTaskResumeAll+0x1e0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4313      	orrs	r3, r2
 8001476:	4a3f      	ldr	r2, [pc, #252]	; (8001574 <xTaskResumeAll+0x1e0>)
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800147e:	493e      	ldr	r1, [pc, #248]	; (8001578 <xTaskResumeAll+0x1e4>)
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	3304      	adds	r3, #4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	3204      	adds	r2, #4
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	1d1a      	adds	r2, r3, #4
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4a2e      	ldr	r2, [pc, #184]	; (8001578 <xTaskResumeAll+0x1e4>)
 80014be:	441a      	add	r2, r3
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	615a      	str	r2, [r3, #20]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c8:	492b      	ldr	r1, [pc, #172]	; (8001578 <xTaskResumeAll+0x1e4>)
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	1c59      	adds	r1, r3, #1
 80014d8:	4827      	ldr	r0, [pc, #156]	; (8001578 <xTaskResumeAll+0x1e4>)
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4403      	add	r3, r0
 80014e4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <xTaskResumeAll+0x1e8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d302      	bcc.n	80014fa <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <xTaskResumeAll+0x1ec>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <xTaskResumeAll+0x1dc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f47f af70 	bne.w	80013e4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800150a:	f000 fa47 	bl	800199c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <xTaskResumeAll+0x1f0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d010      	beq.n	800153c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800151a:	f000 f837 	bl	800158c <xTaskIncrementTick>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <xTaskResumeAll+0x1ec>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3b01      	subs	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f1      	bne.n	800151a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <xTaskResumeAll+0x1f0>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <xTaskResumeAll+0x1ec>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d009      	beq.n	8001558 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <xTaskResumeAll+0x1f4>)
 800154a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	f3bf 8f4f 	dsb	sy
 8001554:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001558:	f000 fb9e 	bl	8001c98 <vPortExitCritical>

    return xAlreadyYielded;
 800155c:	69bb      	ldr	r3, [r7, #24]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3720      	adds	r7, #32
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200001ec 	.word	0x200001ec
 800156c:	200001c4 	.word	0x200001c4
 8001570:	20000184 	.word	0x20000184
 8001574:	200001cc 	.word	0x200001cc
 8001578:	200000c8 	.word	0x200000c8
 800157c:	200000c4 	.word	0x200000c4
 8001580:	200001d8 	.word	0x200001d8
 8001584:	200001d4 	.word	0x200001d4
 8001588:	e000ed04 	.word	0xe000ed04

0800158c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001596:	4b7d      	ldr	r3, [pc, #500]	; (800178c <xTaskIncrementTick+0x200>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 80ec 	bne.w	8001778 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80015a0:	4b7b      	ldr	r3, [pc, #492]	; (8001790 <xTaskIncrementTick+0x204>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80015a8:	4a79      	ldr	r2, [pc, #484]	; (8001790 <xTaskIncrementTick+0x204>)
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d120      	bne.n	80015f6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80015b4:	4b77      	ldr	r3, [pc, #476]	; (8001794 <xTaskIncrementTick+0x208>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00a      	beq.n	80015d4 <xTaskIncrementTick+0x48>
        __asm volatile
 80015be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c2:	f383 8811 	msr	BASEPRI, r3
 80015c6:	f3bf 8f6f 	isb	sy
 80015ca:	f3bf 8f4f 	dsb	sy
 80015ce:	607b      	str	r3, [r7, #4]
    }
 80015d0:	bf00      	nop
 80015d2:	e7fe      	b.n	80015d2 <xTaskIncrementTick+0x46>
 80015d4:	4b6f      	ldr	r3, [pc, #444]	; (8001794 <xTaskIncrementTick+0x208>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <xTaskIncrementTick+0x20c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a6d      	ldr	r2, [pc, #436]	; (8001794 <xTaskIncrementTick+0x208>)
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4a6d      	ldr	r2, [pc, #436]	; (8001798 <xTaskIncrementTick+0x20c>)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b6c      	ldr	r3, [pc, #432]	; (800179c <xTaskIncrementTick+0x210>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a6b      	ldr	r2, [pc, #428]	; (800179c <xTaskIncrementTick+0x210>)
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	f000 f9d3 	bl	800199c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80015f6:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <xTaskIncrementTick+0x214>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a3a      	ldr	r2, [r7, #32]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	f0c0 80a6 	bcc.w	800174e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001602:	4b64      	ldr	r3, [pc, #400]	; (8001794 <xTaskIncrementTick+0x208>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d104      	bne.n	8001616 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800160c:	4b64      	ldr	r3, [pc, #400]	; (80017a0 <xTaskIncrementTick+0x214>)
 800160e:	f04f 32ff 	mov.w	r2, #4294967295
 8001612:	601a      	str	r2, [r3, #0]
                    break;
 8001614:	e09b      	b.n	800174e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001616:	4b5f      	ldr	r3, [pc, #380]	; (8001794 <xTaskIncrementTick+0x208>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001626:	6a3a      	ldr	r2, [r7, #32]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	429a      	cmp	r2, r3
 800162c:	d203      	bcs.n	8001636 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800162e:	4a5c      	ldr	r2, [pc, #368]	; (80017a0 <xTaskIncrementTick+0x214>)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001634:	e08b      	b.n	800174e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	68d2      	ldr	r2, [r2, #12]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	6892      	ldr	r2, [r2, #8]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	3304      	adds	r3, #4
 8001658:	429a      	cmp	r2, r3
 800165a:	d103      	bne.n	8001664 <xTaskIncrementTick+0xd8>
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	1e5a      	subs	r2, r3, #1
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01e      	beq.n	80016ba <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	6a12      	ldr	r2, [r2, #32]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	69d2      	ldr	r2, [r2, #28]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	3318      	adds	r3, #24
 800169e:	429a      	cmp	r2, r3
 80016a0:	d103      	bne.n	80016aa <xTaskIncrementTick+0x11e>
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	6a1a      	ldr	r2, [r3, #32]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2200      	movs	r2, #0
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	1e5a      	subs	r2, r3, #1
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	2201      	movs	r2, #1
 80016c0:	409a      	lsls	r2, r3
 80016c2:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <xTaskIncrementTick+0x218>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	4a36      	ldr	r2, [pc, #216]	; (80017a4 <xTaskIncrementTick+0x218>)
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d0:	4935      	ldr	r1, [pc, #212]	; (80017a8 <xTaskIncrementTick+0x21c>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	3304      	adds	r3, #4
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	3204      	adds	r2, #4
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	1d1a      	adds	r2, r3, #4
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <xTaskIncrementTick+0x21c>)
 8001710:	441a      	add	r2, r3
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	615a      	str	r2, [r3, #20]
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800171a:	4923      	ldr	r1, [pc, #140]	; (80017a8 <xTaskIncrementTick+0x21c>)
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	1c59      	adds	r1, r3, #1
 800172a:	481f      	ldr	r0, [pc, #124]	; (80017a8 <xTaskIncrementTick+0x21c>)
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4403      	add	r3, r0
 8001736:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <xTaskIncrementTick+0x220>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	429a      	cmp	r2, r3
 8001744:	f67f af5d 	bls.w	8001602 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001748:	2301      	movs	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800174c:	e759      	b.n	8001602 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <xTaskIncrementTick+0x220>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001754:	4914      	ldr	r1, [pc, #80]	; (80017a8 <xTaskIncrementTick+0x21c>)
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d901      	bls.n	800176a <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8001766:	2301      	movs	r3, #1
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <xTaskIncrementTick+0x224>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8001772:	2301      	movs	r3, #1
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
 8001776:	e004      	b.n	8001782 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <xTaskIncrementTick+0x228>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <xTaskIncrementTick+0x228>)
 8001780:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001784:	4618      	mov	r0, r3
 8001786:	3728      	adds	r7, #40	; 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200001ec 	.word	0x200001ec
 8001790:	200001c8 	.word	0x200001c8
 8001794:	2000017c 	.word	0x2000017c
 8001798:	20000180 	.word	0x20000180
 800179c:	200001dc 	.word	0x200001dc
 80017a0:	200001e4 	.word	0x200001e4
 80017a4:	200001cc 	.word	0x200001cc
 80017a8:	200000c8 	.word	0x200000c8
 80017ac:	200000c4 	.word	0x200000c4
 80017b0:	200001d8 	.word	0x200001d8
 80017b4:	200001d4 	.word	0x200001d4

080017b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017be:	4b27      	ldr	r3, [pc, #156]	; (800185c <vTaskSwitchContext+0xa4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <vTaskSwitchContext+0xa8>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80017cc:	e03f      	b.n	800184e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <vTaskSwitchContext+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017d4:	4b23      	ldr	r3, [pc, #140]	; (8001864 <vTaskSwitchContext+0xac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80017e2:	7afb      	ldrb	r3, [r7, #11]
 80017e4:	f1c3 031f 	rsb	r3, r3, #31
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	491f      	ldr	r1, [pc, #124]	; (8001868 <vTaskSwitchContext+0xb0>)
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10a      	bne.n	8001814 <vTaskSwitchContext+0x5c>
        __asm volatile
 80017fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001802:	f383 8811 	msr	BASEPRI, r3
 8001806:	f3bf 8f6f 	isb	sy
 800180a:	f3bf 8f4f 	dsb	sy
 800180e:	607b      	str	r3, [r7, #4]
    }
 8001810:	bf00      	nop
 8001812:	e7fe      	b.n	8001812 <vTaskSwitchContext+0x5a>
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <vTaskSwitchContext+0xb0>)
 8001820:	4413      	add	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	3308      	adds	r3, #8
 8001836:	429a      	cmp	r2, r3
 8001838:	d104      	bne.n	8001844 <vTaskSwitchContext+0x8c>
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	4a08      	ldr	r2, [pc, #32]	; (800186c <vTaskSwitchContext+0xb4>)
 800184c:	6013      	str	r3, [r2, #0]
}
 800184e:	bf00      	nop
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	200001ec 	.word	0x200001ec
 8001860:	200001d8 	.word	0x200001d8
 8001864:	200001cc 	.word	0x200001cc
 8001868:	200000c8 	.word	0x200000c8
 800186c:	200000c4 	.word	0x200000c4

08001870 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001878:	f000 f852 	bl	8001920 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <prvIdleTask+0x28>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d9f9      	bls.n	8001878 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <prvIdleTask+0x2c>)
 8001886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	f3bf 8f4f 	dsb	sy
 8001890:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001894:	e7f0      	b.n	8001878 <prvIdleTask+0x8>
 8001896:	bf00      	nop
 8001898:	200000c8 	.word	0x200000c8
 800189c:	e000ed04 	.word	0xe000ed04

080018a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	e00c      	b.n	80018c6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <prvInitialiseTaskLists+0x60>)
 80018b8:	4413      	add	r3, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fb5a 	bl	8000f74 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3301      	adds	r3, #1
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b06      	cmp	r3, #6
 80018ca:	d9ef      	bls.n	80018ac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <prvInitialiseTaskLists+0x64>)
 80018ce:	f7ff fb51 	bl	8000f74 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80018d2:	480d      	ldr	r0, [pc, #52]	; (8001908 <prvInitialiseTaskLists+0x68>)
 80018d4:	f7ff fb4e 	bl	8000f74 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80018d8:	480c      	ldr	r0, [pc, #48]	; (800190c <prvInitialiseTaskLists+0x6c>)
 80018da:	f7ff fb4b 	bl	8000f74 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80018de:	480c      	ldr	r0, [pc, #48]	; (8001910 <prvInitialiseTaskLists+0x70>)
 80018e0:	f7ff fb48 	bl	8000f74 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80018e4:	480b      	ldr	r0, [pc, #44]	; (8001914 <prvInitialiseTaskLists+0x74>)
 80018e6:	f7ff fb45 	bl	8000f74 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <prvInitialiseTaskLists+0x78>)
 80018ec:	4a05      	ldr	r2, [pc, #20]	; (8001904 <prvInitialiseTaskLists+0x64>)
 80018ee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <prvInitialiseTaskLists+0x7c>)
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <prvInitialiseTaskLists+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200000c8 	.word	0x200000c8
 8001904:	20000154 	.word	0x20000154
 8001908:	20000168 	.word	0x20000168
 800190c:	20000184 	.word	0x20000184
 8001910:	20000198 	.word	0x20000198
 8001914:	200001b0 	.word	0x200001b0
 8001918:	2000017c 	.word	0x2000017c
 800191c:	20000180 	.word	0x20000180

08001920 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001926:	e019      	b.n	800195c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001928:	f000 f986 	bl	8001c38 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <prvCheckTasksWaitingTermination+0x50>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3304      	adds	r3, #4
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fb48 	bl	8000fce <uxListRemove>
                --uxCurrentNumberOfTasks;
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <prvCheckTasksWaitingTermination+0x54>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3b01      	subs	r3, #1
 8001944:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <prvCheckTasksWaitingTermination+0x54>)
 8001946:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <prvCheckTasksWaitingTermination+0x58>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3b01      	subs	r3, #1
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <prvCheckTasksWaitingTermination+0x58>)
 8001950:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001952:	f000 f9a1 	bl	8001c98 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f810 	bl	800197c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <prvCheckTasksWaitingTermination+0x58>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1e1      	bne.n	8001928 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000198 	.word	0x20000198
 8001974:	200001c4 	.word	0x200001c4
 8001978:	200001ac 	.word	0x200001ac

0800197c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	4618      	mov	r0, r3
 800198a:	f000 faf1 	bl	8001f70 <vPortFree>
            vPortFree( pxTCB );
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 faee 	bl	8001f70 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <prvResetNextTaskUnblockTime+0x30>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d104      	bne.n	80019b4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <prvResetNextTaskUnblockTime+0x34>)
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80019b2:	e005      	b.n	80019c0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <prvResetNextTaskUnblockTime+0x30>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <prvResetNextTaskUnblockTime+0x34>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	2000017c 	.word	0x2000017c
 80019d0:	200001e4 	.word	0x200001e4

080019d4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3b04      	subs	r3, #4
 80019e4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3b04      	subs	r3, #4
 80019f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f023 0201 	bic.w	r2, r3, #1
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3b04      	subs	r3, #4
 8001a02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001a04:	4a0c      	ldr	r2, [pc, #48]	; (8001a38 <pxPortInitialiseStack+0x64>)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3b14      	subs	r3, #20
 8001a0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3b04      	subs	r3, #4
 8001a1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f06f 0202 	mvn.w	r2, #2
 8001a22:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3b20      	subs	r3, #32
 8001a28:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	08001a3d 	.word	0x08001a3d

08001a3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <prvTaskExitError+0x54>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4e:	d00a      	beq.n	8001a66 <prvTaskExitError+0x2a>
        __asm volatile
 8001a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a54:	f383 8811 	msr	BASEPRI, r3
 8001a58:	f3bf 8f6f 	isb	sy
 8001a5c:	f3bf 8f4f 	dsb	sy
 8001a60:	60fb      	str	r3, [r7, #12]
    }
 8001a62:	bf00      	nop
 8001a64:	e7fe      	b.n	8001a64 <prvTaskExitError+0x28>
        __asm volatile
 8001a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6a:	f383 8811 	msr	BASEPRI, r3
 8001a6e:	f3bf 8f6f 	isb	sy
 8001a72:	f3bf 8f4f 	dsb	sy
 8001a76:	60bb      	str	r3, [r7, #8]
    }
 8001a78:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001a7a:	bf00      	nop
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0fc      	beq.n	8001a7c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	20000004 	.word	0x20000004
	...

08001aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <pxCurrentTCBConst2>)
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	6808      	ldr	r0, [r1, #0]
 8001aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aaa:	f380 8809 	msr	PSP, r0
 8001aae:	f3bf 8f6f 	isb	sy
 8001ab2:	f04f 0000 	mov.w	r0, #0
 8001ab6:	f380 8811 	msr	BASEPRI, r0
 8001aba:	4770      	bx	lr
 8001abc:	f3af 8000 	nop.w

08001ac0 <pxCurrentTCBConst2>:
 8001ac0:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop

08001ac8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001ac8:	4808      	ldr	r0, [pc, #32]	; (8001aec <prvPortStartFirstTask+0x24>)
 8001aca:	6800      	ldr	r0, [r0, #0]
 8001acc:	6800      	ldr	r0, [r0, #0]
 8001ace:	f380 8808 	msr	MSP, r0
 8001ad2:	f04f 0000 	mov.w	r0, #0
 8001ad6:	f380 8814 	msr	CONTROL, r0
 8001ada:	b662      	cpsie	i
 8001adc:	b661      	cpsie	f
 8001ade:	f3bf 8f4f 	dsb	sy
 8001ae2:	f3bf 8f6f 	isb	sy
 8001ae6:	df00      	svc	0
 8001ae8:	bf00      	nop
 8001aea:	0000      	.short	0x0000
 8001aec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop

08001af4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001afa:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <xPortStartScheduler+0x120>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a46      	ldr	r2, [pc, #280]	; (8001c18 <xPortStartScheduler+0x124>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d10a      	bne.n	8001b1a <xPortStartScheduler+0x26>
        __asm volatile
 8001b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b08:	f383 8811 	msr	BASEPRI, r3
 8001b0c:	f3bf 8f6f 	isb	sy
 8001b10:	f3bf 8f4f 	dsb	sy
 8001b14:	613b      	str	r3, [r7, #16]
    }
 8001b16:	bf00      	nop
 8001b18:	e7fe      	b.n	8001b18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001b1a:	4b3e      	ldr	r3, [pc, #248]	; (8001c14 <xPortStartScheduler+0x120>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a3f      	ldr	r2, [pc, #252]	; (8001c1c <xPortStartScheduler+0x128>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d10a      	bne.n	8001b3a <xPortStartScheduler+0x46>
        __asm volatile
 8001b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b28:	f383 8811 	msr	BASEPRI, r3
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	60fb      	str	r3, [r7, #12]
    }
 8001b36:	bf00      	nop
 8001b38:	e7fe      	b.n	8001b38 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001b3a:	4b39      	ldr	r3, [pc, #228]	; (8001c20 <xPortStartScheduler+0x12c>)
 8001b3c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	22ff      	movs	r2, #255	; 0xff
 8001b4a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <xPortStartScheduler+0x130>)
 8001b60:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001b62:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <xPortStartScheduler+0x134>)
 8001b64:	2207      	movs	r2, #7
 8001b66:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001b68:	e009      	b.n	8001b7e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <xPortStartScheduler+0x134>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	4a2d      	ldr	r2, [pc, #180]	; (8001c28 <xPortStartScheduler+0x134>)
 8001b72:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b86:	2b80      	cmp	r3, #128	; 0x80
 8001b88:	d0ef      	beq.n	8001b6a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <xPortStartScheduler+0x134>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f1c3 0307 	rsb	r3, r3, #7
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d00a      	beq.n	8001bac <xPortStartScheduler+0xb8>
        __asm volatile
 8001b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b9a:	f383 8811 	msr	BASEPRI, r3
 8001b9e:	f3bf 8f6f 	isb	sy
 8001ba2:	f3bf 8f4f 	dsb	sy
 8001ba6:	60bb      	str	r3, [r7, #8]
    }
 8001ba8:	bf00      	nop
 8001baa:	e7fe      	b.n	8001baa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <xPortStartScheduler+0x134>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <xPortStartScheduler+0x134>)
 8001bb4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <xPortStartScheduler+0x134>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bbe:	4a1a      	ldr	r2, [pc, #104]	; (8001c28 <xPortStartScheduler+0x134>)
 8001bc0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <xPortStartScheduler+0x138>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <xPortStartScheduler+0x138>)
 8001bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <xPortStartScheduler+0x138>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <xPortStartScheduler+0x138>)
 8001bdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001be0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001be2:	f000 f8db 	bl	8001d9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <xPortStartScheduler+0x13c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001bec:	f000 f8fa 	bl	8001de4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <xPortStartScheduler+0x140>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <xPortStartScheduler+0x140>)
 8001bf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001bfa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001bfc:	f7ff ff64 	bl	8001ac8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001c00:	f7ff fdda 	bl	80017b8 <vTaskSwitchContext>
    prvTaskExitError();
 8001c04:	f7ff ff1a 	bl	8001a3c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00
 8001c18:	410fc271 	.word	0x410fc271
 8001c1c:	410fc270 	.word	0x410fc270
 8001c20:	e000e400 	.word	0xe000e400
 8001c24:	200001f0 	.word	0x200001f0
 8001c28:	200001f4 	.word	0x200001f4
 8001c2c:	e000ed20 	.word	0xe000ed20
 8001c30:	20000004 	.word	0x20000004
 8001c34:	e000ef34 	.word	0xe000ef34

08001c38 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
        __asm volatile
 8001c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c42:	f383 8811 	msr	BASEPRI, r3
 8001c46:	f3bf 8f6f 	isb	sy
 8001c4a:	f3bf 8f4f 	dsb	sy
 8001c4e:	607b      	str	r3, [r7, #4]
    }
 8001c50:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <vPortEnterCritical+0x58>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <vPortEnterCritical+0x58>)
 8001c5a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <vPortEnterCritical+0x58>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d10f      	bne.n	8001c84 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <vPortEnterCritical+0x5c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <vPortEnterCritical+0x4c>
        __asm volatile
 8001c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c72:	f383 8811 	msr	BASEPRI, r3
 8001c76:	f3bf 8f6f 	isb	sy
 8001c7a:	f3bf 8f4f 	dsb	sy
 8001c7e:	603b      	str	r3, [r7, #0]
    }
 8001c80:	bf00      	nop
 8001c82:	e7fe      	b.n	8001c82 <vPortEnterCritical+0x4a>
    }
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	20000004 	.word	0x20000004
 8001c94:	e000ed04 	.word	0xe000ed04

08001c98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <vPortExitCritical+0x50>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10a      	bne.n	8001cbc <vPortExitCritical+0x24>
        __asm volatile
 8001ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001caa:	f383 8811 	msr	BASEPRI, r3
 8001cae:	f3bf 8f6f 	isb	sy
 8001cb2:	f3bf 8f4f 	dsb	sy
 8001cb6:	607b      	str	r3, [r7, #4]
    }
 8001cb8:	bf00      	nop
 8001cba:	e7fe      	b.n	8001cba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <vPortExitCritical+0x50>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <vPortExitCritical+0x50>)
 8001cc4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <vPortExitCritical+0x50>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <vPortExitCritical+0x42>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001cd8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	00000000 	.word	0x00000000

08001cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001cf0:	f3ef 8009 	mrs	r0, PSP
 8001cf4:	f3bf 8f6f 	isb	sy
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <pxCurrentTCBConst>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f01e 0f10 	tst.w	lr, #16
 8001d00:	bf08      	it	eq
 8001d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d0a:	6010      	str	r0, [r2, #0]
 8001d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001d14:	f380 8811 	msr	BASEPRI, r0
 8001d18:	f3bf 8f4f 	dsb	sy
 8001d1c:	f3bf 8f6f 	isb	sy
 8001d20:	f7ff fd4a 	bl	80017b8 <vTaskSwitchContext>
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f380 8811 	msr	BASEPRI, r0
 8001d2c:	bc09      	pop	{r0, r3}
 8001d2e:	6819      	ldr	r1, [r3, #0]
 8001d30:	6808      	ldr	r0, [r1, #0]
 8001d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d36:	f01e 0f10 	tst.w	lr, #16
 8001d3a:	bf08      	it	eq
 8001d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001d40:	f380 8809 	msr	PSP, r0
 8001d44:	f3bf 8f6f 	isb	sy
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	f3af 8000 	nop.w

08001d50 <pxCurrentTCBConst>:
 8001d50:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop

08001d58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
        __asm volatile
 8001d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d62:	f383 8811 	msr	BASEPRI, r3
 8001d66:	f3bf 8f6f 	isb	sy
 8001d6a:	f3bf 8f4f 	dsb	sy
 8001d6e:	607b      	str	r3, [r7, #4]
    }
 8001d70:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001d72:	f7ff fc0b 	bl	800158c <xTaskIncrementTick>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <SysTick_Handler+0x40>)
 8001d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	2300      	movs	r3, #0
 8001d86:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	f383 8811 	msr	BASEPRI, r3
    }
 8001d8e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	e000ed04 	.word	0xe000ed04

08001d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <vPortSetupTimerInterrupt+0x34>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <vPortSetupTimerInterrupt+0x38>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <vPortSetupTimerInterrupt+0x3c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <vPortSetupTimerInterrupt+0x40>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	099b      	lsrs	r3, r3, #6
 8001db8:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <vPortSetupTimerInterrupt+0x44>)
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <vPortSetupTimerInterrupt+0x34>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010
 8001dd4:	e000e018 	.word	0xe000e018
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	10624dd3 	.word	0x10624dd3
 8001de0:	e000e014 	.word	0xe000e014

08001de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001de4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001df4 <vPortEnableVFP+0x10>
 8001de8:	6801      	ldr	r1, [r0, #0]
 8001dea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001dee:	6001      	str	r1, [r0, #0]
 8001df0:	4770      	bx	lr
 8001df2:	0000      	.short	0x0000
 8001df4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop

08001dfc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8001e08:	f7ff fab6 	bl	8001378 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001e0c:	4b53      	ldr	r3, [pc, #332]	; (8001f5c <pvPortMalloc+0x160>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001e14:	f000 f908 	bl	8002028 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d012      	beq.n	8001e44 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001e1e:	2208      	movs	r2, #8
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	3308      	adds	r3, #8
 8001e2a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d804      	bhi.n	8001e40 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	e001      	b.n	8001e44 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db70      	blt.n	8001f2c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d06d      	beq.n	8001f2c <pvPortMalloc+0x130>
 8001e50:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <pvPortMalloc+0x164>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d868      	bhi.n	8001f2c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001e5a:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <pvPortMalloc+0x168>)
 8001e5c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001e5e:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <pvPortMalloc+0x168>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e64:	e004      	b.n	8001e70 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d903      	bls.n	8001e82 <pvPortMalloc+0x86>
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f1      	bne.n	8001e66 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001e82:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <pvPortMalloc+0x160>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d04f      	beq.n	8001f2c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2208      	movs	r2, #8
 8001e92:	4413      	add	r3, r2
 8001e94:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	1ad2      	subs	r2, r2, r3
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d91f      	bls.n	8001eee <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <pvPortMalloc+0xda>
        __asm volatile
 8001ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec4:	f383 8811 	msr	BASEPRI, r3
 8001ec8:	f3bf 8f6f 	isb	sy
 8001ecc:	f3bf 8f4f 	dsb	sy
 8001ed0:	613b      	str	r3, [r7, #16]
    }
 8001ed2:	bf00      	nop
 8001ed4:	e7fe      	b.n	8001ed4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	1ad2      	subs	r2, r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001ee8:	6978      	ldr	r0, [r7, #20]
 8001eea:	f000 f8f9 	bl	80020e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <pvPortMalloc+0x164>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	4a19      	ldr	r2, [pc, #100]	; (8001f60 <pvPortMalloc+0x164>)
 8001efa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <pvPortMalloc+0x164>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <pvPortMalloc+0x16c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d203      	bcs.n	8001f10 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <pvPortMalloc+0x164>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <pvPortMalloc+0x16c>)
 8001f0e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <pvPortMalloc+0x170>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3301      	adds	r3, #1
 8001f28:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <pvPortMalloc+0x170>)
 8001f2a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001f2c:	f7ff fa32 	bl	8001394 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <pvPortMalloc+0x154>
        __asm volatile
 8001f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3e:	f383 8811 	msr	BASEPRI, r3
 8001f42:	f3bf 8f6f 	isb	sy
 8001f46:	f3bf 8f4f 	dsb	sy
 8001f4a:	60fb      	str	r3, [r7, #12]
    }
 8001f4c:	bf00      	nop
 8001f4e:	e7fe      	b.n	8001f4e <pvPortMalloc+0x152>
    return pvReturn;
 8001f50:	69fb      	ldr	r3, [r7, #28]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3728      	adds	r7, #40	; 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000db8 	.word	0x20000db8
 8001f60:	20000dbc 	.word	0x20000dbc
 8001f64:	20000db0 	.word	0x20000db0
 8001f68:	20000dc0 	.word	0x20000dc0
 8001f6c:	20000dc4 	.word	0x20000dc4

08001f70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d049      	beq.n	8002016 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001f82:	2308      	movs	r3, #8
 8001f84:	425b      	negs	r3, r3
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4413      	add	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <vPortFree+0x3e>
        __asm volatile
 8001f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9c:	f383 8811 	msr	BASEPRI, r3
 8001fa0:	f3bf 8f6f 	isb	sy
 8001fa4:	f3bf 8f4f 	dsb	sy
 8001fa8:	60fb      	str	r3, [r7, #12]
    }
 8001faa:	bf00      	nop
 8001fac:	e7fe      	b.n	8001fac <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <vPortFree+0x5c>
        __asm volatile
 8001fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fba:	f383 8811 	msr	BASEPRI, r3
 8001fbe:	f3bf 8f6f 	isb	sy
 8001fc2:	f3bf 8f4f 	dsb	sy
 8001fc6:	60bb      	str	r3, [r7, #8]
    }
 8001fc8:	bf00      	nop
 8001fca:	e7fe      	b.n	8001fca <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	0fdb      	lsrs	r3, r3, #31
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01c      	beq.n	8002016 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d118      	bne.n	8002016 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8001ff0:	f7ff f9c2 	bl	8001378 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <vPortFree+0xb0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a08      	ldr	r2, [pc, #32]	; (8002020 <vPortFree+0xb0>)
 8002000:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002002:	6938      	ldr	r0, [r7, #16]
 8002004:	f000 f86c 	bl	80020e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <vPortFree+0xb4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	3301      	adds	r3, #1
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <vPortFree+0xb4>)
 8002010:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002012:	f7ff f9bf 	bl	8001394 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000dbc 	.word	0x20000dbc
 8002024:	20000dc8 	.word	0x20000dc8

08002028 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800202e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002032:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002034:	4b25      	ldr	r3, [pc, #148]	; (80020cc <prvHeapInit+0xa4>)
 8002036:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3307      	adds	r3, #7
 8002046:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0307 	bic.w	r3, r3, #7
 800204e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	4a1d      	ldr	r2, [pc, #116]	; (80020cc <prvHeapInit+0xa4>)
 8002058:	4413      	add	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002060:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <prvHeapInit+0xa8>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <prvHeapInit+0xa8>)
 8002068:	2200      	movs	r2, #0
 800206a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	4413      	add	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002074:	2208      	movs	r2, #8
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0307 	bic.w	r3, r3, #7
 8002082:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <prvHeapInit+0xac>)
 8002088:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800208a:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <prvHeapInit+0xac>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <prvHeapInit+0xac>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	1ad2      	subs	r2, r2, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <prvHeapInit+0xac>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <prvHeapInit+0xb0>)
 80020b6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a07      	ldr	r2, [pc, #28]	; (80020dc <prvHeapInit+0xb4>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	200001f8 	.word	0x200001f8
 80020d0:	20000db0 	.word	0x20000db0
 80020d4:	20000db8 	.word	0x20000db8
 80020d8:	20000dc0 	.word	0x20000dc0
 80020dc:	20000dbc 	.word	0x20000dbc

080020e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80020e8:	4b28      	ldr	r3, [pc, #160]	; (800218c <prvInsertBlockIntoFreeList+0xac>)
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e002      	b.n	80020f4 <prvInsertBlockIntoFreeList+0x14>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d8f7      	bhi.n	80020ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	4413      	add	r3, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	429a      	cmp	r2, r3
 800210e:	d108      	bne.n	8002122 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	441a      	add	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	441a      	add	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d118      	bne.n	8002168 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <prvInsertBlockIntoFreeList+0xb0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d00d      	beq.n	800215e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	441a      	add	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e008      	b.n	8002170 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <prvInsertBlockIntoFreeList+0xb0>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	e003      	b.n	8002170 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	429a      	cmp	r2, r3
 8002176:	d002      	beq.n	800217e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000db0 	.word	0x20000db0
 8002190:	20000db8 	.word	0x20000db8

08002194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800219a:	f001 fd66 	bl	8003c6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800219e:	f000 f839 	bl	8002214 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80021a2:	f000 f899 	bl	80022d8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021a6:	f000 fbef 	bl	8002988 <MX_GPIO_Init>
  MX_ADC1_Init();
 80021aa:	f000 f8c5 	bl	8002338 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80021ae:	f000 f927 	bl	8002400 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80021b2:	f000 f95d 	bl	8002470 <MX_I2C1_Init>
  MX_I2C2_Init();
 80021b6:	f000 f99b 	bl	80024f0 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80021ba:	f000 f9d9 	bl	8002570 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80021be:	f000 fa2d 	bl	800261c <MX_SPI1_Init>
  MX_SPI3_Init();
 80021c2:	f000 fa69 	bl	8002698 <MX_SPI3_Init>
  MX_UART4_Init();
 80021c6:	f000 faa5 	bl	8002714 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80021ca:	f000 faef 	bl	80027ac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80021ce:	f000 fb39 	bl	8002844 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80021d2:	f000 fb85 	bl	80028e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80021d6:	f000 fbcf 	bl	8002978 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */

  BSP_ACCELERO_Init();
 80021da:	f008 f955 	bl	800a488 <BSP_ACCELERO_Init>


  flag_accelerometer = xTaskCreate(AcceleroRead, "AccelerometerRead", 200, "\r\nAcceleration along three axes!!!\r\n", 1, &pAcceleroRead);
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <main+0x70>)
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	2301      	movs	r3, #1
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <main+0x74>)
 80021e8:	22c8      	movs	r2, #200	; 0xc8
 80021ea:	4908      	ldr	r1, [pc, #32]	; (800220c <main+0x78>)
 80021ec:	4808      	ldr	r0, [pc, #32]	; (8002210 <main+0x7c>)
 80021ee:	f7fe ff18 	bl	8001022 <xTaskCreate>
 80021f2:	6078      	str	r0, [r7, #4]
  if (flag_accelerometer != pdPASS)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d001      	beq.n	80021fe <main+0x6a>
  {
	  Error_Handler();
 80021fa:	f001 f833 	bl	8003264 <Error_Handler>
//   {
// 	  Error_Handler();
//   }

  //Start Scheduler
  vTaskStartScheduler();
 80021fe:	f7ff f86f 	bl	80012e0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002202:	e7fe      	b.n	8002202 <main+0x6e>
 8002204:	20000dcc 	.word	0x20000dcc
 8002208:	0800c038 	.word	0x0800c038
 800220c:	0800c060 	.word	0x0800c060
 8002210:	08002c31 	.word	0x08002c31

08002214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b096      	sub	sp, #88	; 0x58
 8002218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	2244      	movs	r2, #68	; 0x44
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f008 fad2 	bl	800a7cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002228:	463b      	mov	r3, r7
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	60da      	str	r2, [r3, #12]
 8002234:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002236:	2000      	movs	r0, #0
 8002238:	f004 fd0e 	bl	8006c58 <HAL_PWREx_ControlVoltageScaling>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8002242:	f001 f80f 	bl	8003264 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002246:	f004 fcd7 	bl	8006bf8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800224a:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <SystemClock_Config+0xc0>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	4a20      	ldr	r2, [pc, #128]	; (80022d4 <SystemClock_Config+0xc0>)
 8002252:	f023 0318 	bic.w	r3, r3, #24
 8002256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800225a:	2314      	movs	r3, #20
 800225c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800225e:	2301      	movs	r3, #1
 8002260:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002262:	2301      	movs	r3, #1
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800226a:	2360      	movs	r3, #96	; 0x60
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800226e:	2302      	movs	r3, #2
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002272:	2301      	movs	r3, #1
 8002274:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002276:	2301      	movs	r3, #1
 8002278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800227a:	233c      	movs	r3, #60	; 0x3c
 800227c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800227e:	2302      	movs	r3, #2
 8002280:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002282:	2302      	movs	r3, #2
 8002284:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002286:	2302      	movs	r3, #2
 8002288:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4618      	mov	r0, r3
 8002290:	f004 fd86 	bl	8006da0 <HAL_RCC_OscConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800229a:	f000 ffe3 	bl	8003264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800229e:	230f      	movs	r3, #15
 80022a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022a2:	2303      	movs	r3, #3
 80022a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022b2:	463b      	mov	r3, r7
 80022b4:	2105      	movs	r1, #5
 80022b6:	4618      	mov	r0, r3
 80022b8:	f005 f98c 	bl	80075d4 <HAL_RCC_ClockConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80022c2:	f000 ffcf 	bl	8003264 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80022c6:	f005 ffa5 	bl	8008214 <HAL_RCCEx_EnableMSIPLLMode>
}
 80022ca:	bf00      	nop
 80022cc:	3758      	adds	r7, #88	; 0x58
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000

080022d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0a6      	sub	sp, #152	; 0x98
 80022dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	2294      	movs	r2, #148	; 0x94
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f008 fa71 	bl	800a7cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80022ea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80022ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80022f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80022f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80022f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022fc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80022fe:	2301      	movs	r3, #1
 8002300:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002302:	2301      	movs	r3, #1
 8002304:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002306:	2318      	movs	r3, #24
 8002308:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800230a:	2302      	movs	r3, #2
 800230c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800230e:	2302      	movs	r3, #2
 8002310:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002312:	2302      	movs	r3, #2
 8002314:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8002316:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800231a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	4618      	mov	r0, r3
 8002320:	f005 fc48 	bl	8007bb4 <HAL_RCCEx_PeriphCLKConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800232a:	f000 ff9b 	bl	8003264 <Error_Handler>
  }
}
 800232e:	bf00      	nop
 8002330:	3798      	adds	r7, #152	; 0x98
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800233e:	463b      	mov	r3, r7
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
 800234c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <MX_ADC1_Init+0xbc>)
 8002350:	4a29      	ldr	r2, [pc, #164]	; (80023f8 <MX_ADC1_Init+0xc0>)
 8002352:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002354:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <MX_ADC1_Init+0xbc>)
 8002356:	2200      	movs	r2, #0
 8002358:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <MX_ADC1_Init+0xbc>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <MX_ADC1_Init+0xbc>)
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002366:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <MX_ADC1_Init+0xbc>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <MX_ADC1_Init+0xbc>)
 800236e:	2204      	movs	r2, #4
 8002370:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <MX_ADC1_Init+0xbc>)
 8002374:	2200      	movs	r2, #0
 8002376:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <MX_ADC1_Init+0xbc>)
 800237a:	2200      	movs	r2, #0
 800237c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <MX_ADC1_Init+0xbc>)
 8002380:	2201      	movs	r2, #1
 8002382:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <MX_ADC1_Init+0xbc>)
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <MX_ADC1_Init+0xbc>)
 800238e:	2200      	movs	r2, #0
 8002390:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <MX_ADC1_Init+0xbc>)
 8002394:	2200      	movs	r2, #0
 8002396:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <MX_ADC1_Init+0xbc>)
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023a0:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <MX_ADC1_Init+0xbc>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80023a6:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <MX_ADC1_Init+0xbc>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023ae:	4811      	ldr	r0, [pc, #68]	; (80023f4 <MX_ADC1_Init+0xbc>)
 80023b0:	f001 fe58 	bl	8004064 <HAL_ADC_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80023ba:	f000 ff53 	bl	8003264 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <MX_ADC1_Init+0xc4>)
 80023c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023c2:	2306      	movs	r3, #6
 80023c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023ca:	237f      	movs	r3, #127	; 0x7f
 80023cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023ce:	2304      	movs	r3, #4
 80023d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023d6:	463b      	mov	r3, r7
 80023d8:	4619      	mov	r1, r3
 80023da:	4806      	ldr	r0, [pc, #24]	; (80023f4 <MX_ADC1_Init+0xbc>)
 80023dc:	f001 ff88 	bl	80042f0 <HAL_ADC_ConfigChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80023e6:	f000 ff3d 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000dd0 	.word	0x20000dd0
 80023f8:	50040000 	.word	0x50040000
 80023fc:	04300002 	.word	0x04300002

08002400 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8002404:	4b18      	ldr	r3, [pc, #96]	; (8002468 <MX_DFSDM1_Init+0x68>)
 8002406:	4a19      	ldr	r2, [pc, #100]	; (800246c <MX_DFSDM1_Init+0x6c>)
 8002408:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800240a:	4b17      	ldr	r3, [pc, #92]	; (8002468 <MX_DFSDM1_Init+0x68>)
 800240c:	2201      	movs	r2, #1
 800240e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002410:	4b15      	ldr	r3, [pc, #84]	; (8002468 <MX_DFSDM1_Init+0x68>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8002416:	4b14      	ldr	r3, [pc, #80]	; (8002468 <MX_DFSDM1_Init+0x68>)
 8002418:	2202      	movs	r2, #2
 800241a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <MX_DFSDM1_Init+0x68>)
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <MX_DFSDM1_Init+0x68>)
 8002424:	2200      	movs	r2, #0
 8002426:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <MX_DFSDM1_Init+0x68>)
 800242a:	2200      	movs	r2, #0
 800242c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <MX_DFSDM1_Init+0x68>)
 8002430:	2200      	movs	r2, #0
 8002432:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <MX_DFSDM1_Init+0x68>)
 8002436:	2204      	movs	r2, #4
 8002438:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <MX_DFSDM1_Init+0x68>)
 800243c:	2200      	movs	r2, #0
 800243e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <MX_DFSDM1_Init+0x68>)
 8002442:	2201      	movs	r2, #1
 8002444:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <MX_DFSDM1_Init+0x68>)
 8002448:	2200      	movs	r2, #0
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <MX_DFSDM1_Init+0x68>)
 800244e:	2200      	movs	r2, #0
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8002452:	4805      	ldr	r0, [pc, #20]	; (8002468 <MX_DFSDM1_Init+0x68>)
 8002454:	f002 fc2a 	bl	8004cac <HAL_DFSDM_ChannelInit>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800245e:	f000 ff01 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000e38 	.word	0x20000e38
 800246c:	40016040 	.word	0x40016040

08002470 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002474:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <MX_I2C1_Init+0x74>)
 8002476:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <MX_I2C1_Init+0x78>)
 8002478:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <MX_I2C1_Init+0x74>)
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <MX_I2C1_Init+0x7c>)
 800247e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002480:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <MX_I2C1_Init+0x74>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002486:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <MX_I2C1_Init+0x74>)
 8002488:	2201      	movs	r2, #1
 800248a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800248c:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <MX_I2C1_Init+0x74>)
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <MX_I2C1_Init+0x74>)
 8002494:	2200      	movs	r2, #0
 8002496:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <MX_I2C1_Init+0x74>)
 800249a:	2200      	movs	r2, #0
 800249c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <MX_I2C1_Init+0x74>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <MX_I2C1_Init+0x74>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024aa:	480e      	ldr	r0, [pc, #56]	; (80024e4 <MX_I2C1_Init+0x74>)
 80024ac:	f003 f885 	bl	80055ba <HAL_I2C_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80024b6:	f000 fed5 	bl	8003264 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024ba:	2100      	movs	r1, #0
 80024bc:	4809      	ldr	r0, [pc, #36]	; (80024e4 <MX_I2C1_Init+0x74>)
 80024be:	f003 fe2d 	bl	800611c <HAL_I2CEx_ConfigAnalogFilter>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80024c8:	f000 fecc 	bl	8003264 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80024cc:	2100      	movs	r1, #0
 80024ce:	4805      	ldr	r0, [pc, #20]	; (80024e4 <MX_I2C1_Init+0x74>)
 80024d0:	f003 fe6f 	bl	80061b2 <HAL_I2CEx_ConfigDigitalFilter>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80024da:	f000 fec3 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000e70 	.word	0x20000e70
 80024e8:	40005400 	.word	0x40005400
 80024ec:	307075b1 	.word	0x307075b1

080024f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <MX_I2C2_Init+0x74>)
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <MX_I2C2_Init+0x78>)
 80024f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <MX_I2C2_Init+0x74>)
 80024fc:	4a1b      	ldr	r2, [pc, #108]	; (800256c <MX_I2C2_Init+0x7c>)
 80024fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002500:	4b18      	ldr	r3, [pc, #96]	; (8002564 <MX_I2C2_Init+0x74>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <MX_I2C2_Init+0x74>)
 8002508:	2201      	movs	r2, #1
 800250a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <MX_I2C2_Init+0x74>)
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <MX_I2C2_Init+0x74>)
 8002514:	2200      	movs	r2, #0
 8002516:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <MX_I2C2_Init+0x74>)
 800251a:	2200      	movs	r2, #0
 800251c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <MX_I2C2_Init+0x74>)
 8002520:	2200      	movs	r2, #0
 8002522:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <MX_I2C2_Init+0x74>)
 8002526:	2200      	movs	r2, #0
 8002528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800252a:	480e      	ldr	r0, [pc, #56]	; (8002564 <MX_I2C2_Init+0x74>)
 800252c:	f003 f845 	bl	80055ba <HAL_I2C_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002536:	f000 fe95 	bl	8003264 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800253a:	2100      	movs	r1, #0
 800253c:	4809      	ldr	r0, [pc, #36]	; (8002564 <MX_I2C2_Init+0x74>)
 800253e:	f003 fded 	bl	800611c <HAL_I2CEx_ConfigAnalogFilter>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002548:	f000 fe8c 	bl	8003264 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800254c:	2100      	movs	r1, #0
 800254e:	4805      	ldr	r0, [pc, #20]	; (8002564 <MX_I2C2_Init+0x74>)
 8002550:	f003 fe2f 	bl	80061b2 <HAL_I2CEx_ConfigDigitalFilter>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800255a:	f000 fe83 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000ec4 	.word	0x20000ec4
 8002568:	40005800 	.word	0x40005800
 800256c:	307075b1 	.word	0x307075b1

08002570 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8002584:	4b23      	ldr	r3, [pc, #140]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 8002586:	4a24      	ldr	r2, [pc, #144]	; (8002618 <MX_OCTOSPI1_Init+0xa8>)
 8002588:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800258a:	4b22      	ldr	r3, [pc, #136]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 800258c:	2201      	movs	r2, #1
 800258e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8002590:	4b20      	ldr	r3, [pc, #128]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8002596:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 8002598:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800259c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 80025a0:	2220      	movs	r2, #32
 80025a2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 80025be:	2200      	movs	r2, #0
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 80025d0:	2208      	movs	r2, #8
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80025d4:	480f      	ldr	r0, [pc, #60]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 80025d6:	f003 fe39 	bl	800624c <HAL_OSPI_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80025e0:	f000 fe40 	bl	8003264 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80025e4:	2301      	movs	r3, #1
 80025e6:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80025e8:	2301      	movs	r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80025ec:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80025f0:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4619      	mov	r1, r3
 80025fa:	4806      	ldr	r0, [pc, #24]	; (8002614 <MX_OCTOSPI1_Init+0xa4>)
 80025fc:	f003 fee0 	bl	80063c0 <HAL_OSPIM_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8002606:	f000 fe2d 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000f18 	.word	0x20000f18
 8002618:	a0001000 	.word	0xa0001000

0800261c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <MX_SPI1_Init+0x74>)
 8002622:	4a1c      	ldr	r2, [pc, #112]	; (8002694 <MX_SPI1_Init+0x78>)
 8002624:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <MX_SPI1_Init+0x74>)
 8002628:	f44f 7282 	mov.w	r2, #260	; 0x104
 800262c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <MX_SPI1_Init+0x74>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002634:	4b16      	ldr	r3, [pc, #88]	; (8002690 <MX_SPI1_Init+0x74>)
 8002636:	f44f 7240 	mov.w	r2, #768	; 0x300
 800263a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <MX_SPI1_Init+0x74>)
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <MX_SPI1_Init+0x74>)
 8002644:	2200      	movs	r2, #0
 8002646:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <MX_SPI1_Init+0x74>)
 800264a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <MX_SPI1_Init+0x74>)
 8002652:	2208      	movs	r2, #8
 8002654:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <MX_SPI1_Init+0x74>)
 8002658:	2200      	movs	r2, #0
 800265a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <MX_SPI1_Init+0x74>)
 800265e:	2200      	movs	r2, #0
 8002660:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <MX_SPI1_Init+0x74>)
 8002664:	2200      	movs	r2, #0
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <MX_SPI1_Init+0x74>)
 800266a:	2207      	movs	r2, #7
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <MX_SPI1_Init+0x74>)
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <MX_SPI1_Init+0x74>)
 8002676:	2208      	movs	r2, #8
 8002678:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800267a:	4805      	ldr	r0, [pc, #20]	; (8002690 <MX_SPI1_Init+0x74>)
 800267c:	f005 ffc2 	bl	8008604 <HAL_SPI_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002686:	f000 fded 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000f68 	.word	0x20000f68
 8002694:	40013000 	.word	0x40013000

08002698 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <MX_SPI3_Init+0x74>)
 800269e:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <MX_SPI3_Init+0x78>)
 80026a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80026a2:	4b1a      	ldr	r3, [pc, #104]	; (800270c <MX_SPI3_Init+0x74>)
 80026a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <MX_SPI3_Init+0x74>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80026b0:	4b16      	ldr	r3, [pc, #88]	; (800270c <MX_SPI3_Init+0x74>)
 80026b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80026b6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <MX_SPI3_Init+0x74>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <MX_SPI3_Init+0x74>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <MX_SPI3_Init+0x74>)
 80026c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <MX_SPI3_Init+0x74>)
 80026ce:	2208      	movs	r2, #8
 80026d0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <MX_SPI3_Init+0x74>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <MX_SPI3_Init+0x74>)
 80026da:	2200      	movs	r2, #0
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <MX_SPI3_Init+0x74>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <MX_SPI3_Init+0x74>)
 80026e6:	2207      	movs	r2, #7
 80026e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <MX_SPI3_Init+0x74>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <MX_SPI3_Init+0x74>)
 80026f2:	2208      	movs	r2, #8
 80026f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80026f6:	4805      	ldr	r0, [pc, #20]	; (800270c <MX_SPI3_Init+0x74>)
 80026f8:	f005 ff84 	bl	8008604 <HAL_SPI_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002702:	f000 fdaf 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000fcc 	.word	0x20000fcc
 8002710:	40003c00 	.word	0x40003c00

08002714 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002718:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <MX_UART4_Init+0x90>)
 800271a:	4a23      	ldr	r2, [pc, #140]	; (80027a8 <MX_UART4_Init+0x94>)
 800271c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <MX_UART4_Init+0x90>)
 8002720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002724:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002726:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <MX_UART4_Init+0x90>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800272c:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <MX_UART4_Init+0x90>)
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <MX_UART4_Init+0x90>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002738:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <MX_UART4_Init+0x90>)
 800273a:	220c      	movs	r2, #12
 800273c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273e:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <MX_UART4_Init+0x90>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002744:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <MX_UART4_Init+0x90>)
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800274a:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <MX_UART4_Init+0x90>)
 800274c:	2200      	movs	r2, #0
 800274e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002750:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <MX_UART4_Init+0x90>)
 8002752:	2200      	movs	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002756:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <MX_UART4_Init+0x90>)
 8002758:	2200      	movs	r2, #0
 800275a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800275c:	4811      	ldr	r0, [pc, #68]	; (80027a4 <MX_UART4_Init+0x90>)
 800275e:	f006 faa7 	bl	8008cb0 <HAL_UART_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002768:	f000 fd7c 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800276c:	2100      	movs	r1, #0
 800276e:	480d      	ldr	r0, [pc, #52]	; (80027a4 <MX_UART4_Init+0x90>)
 8002770:	f007 fc6f 	bl	800a052 <HAL_UARTEx_SetTxFifoThreshold>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800277a:	f000 fd73 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800277e:	2100      	movs	r1, #0
 8002780:	4808      	ldr	r0, [pc, #32]	; (80027a4 <MX_UART4_Init+0x90>)
 8002782:	f007 fca4 	bl	800a0ce <HAL_UARTEx_SetRxFifoThreshold>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800278c:	f000 fd6a 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002790:	4804      	ldr	r0, [pc, #16]	; (80027a4 <MX_UART4_Init+0x90>)
 8002792:	f007 fc25 	bl	8009fe0 <HAL_UARTEx_DisableFifoMode>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800279c:	f000 fd62 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20001030 	.word	0x20001030
 80027a8:	40004c00 	.word	0x40004c00

080027ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027b0:	4b22      	ldr	r3, [pc, #136]	; (800283c <MX_USART1_UART_Init+0x90>)
 80027b2:	4a23      	ldr	r2, [pc, #140]	; (8002840 <MX_USART1_UART_Init+0x94>)
 80027b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <MX_USART1_UART_Init+0x90>)
 80027b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027be:	4b1f      	ldr	r3, [pc, #124]	; (800283c <MX_USART1_UART_Init+0x90>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <MX_USART1_UART_Init+0x90>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ca:	4b1c      	ldr	r3, [pc, #112]	; (800283c <MX_USART1_UART_Init+0x90>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <MX_USART1_UART_Init+0x90>)
 80027d2:	220c      	movs	r2, #12
 80027d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <MX_USART1_UART_Init+0x90>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027dc:	4b17      	ldr	r3, [pc, #92]	; (800283c <MX_USART1_UART_Init+0x90>)
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <MX_USART1_UART_Init+0x90>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <MX_USART1_UART_Init+0x90>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <MX_USART1_UART_Init+0x90>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027f4:	4811      	ldr	r0, [pc, #68]	; (800283c <MX_USART1_UART_Init+0x90>)
 80027f6:	f006 fa5b 	bl	8008cb0 <HAL_UART_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002800:	f000 fd30 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002804:	2100      	movs	r1, #0
 8002806:	480d      	ldr	r0, [pc, #52]	; (800283c <MX_USART1_UART_Init+0x90>)
 8002808:	f007 fc23 	bl	800a052 <HAL_UARTEx_SetTxFifoThreshold>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002812:	f000 fd27 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002816:	2100      	movs	r1, #0
 8002818:	4808      	ldr	r0, [pc, #32]	; (800283c <MX_USART1_UART_Init+0x90>)
 800281a:	f007 fc58 	bl	800a0ce <HAL_UARTEx_SetRxFifoThreshold>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002824:	f000 fd1e 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002828:	4804      	ldr	r0, [pc, #16]	; (800283c <MX_USART1_UART_Init+0x90>)
 800282a:	f007 fbd9 	bl	8009fe0 <HAL_UARTEx_DisableFifoMode>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002834:	f000 fd16 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}
 800283c:	200010c4 	.word	0x200010c4
 8002840:	40013800 	.word	0x40013800

08002844 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002848:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 800284a:	4a24      	ldr	r2, [pc, #144]	; (80028dc <MX_USART2_UART_Init+0x98>)
 800284c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 8002850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002854:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800285c:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002862:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 800286a:	220c      	movs	r2, #12
 800286c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800286e:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 8002870:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002874:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002876:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 8002878:	2200      	movs	r2, #0
 800287a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800287c:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 800287e:	2200      	movs	r2, #0
 8002880:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 8002884:	2200      	movs	r2, #0
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 800288a:	2200      	movs	r2, #0
 800288c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800288e:	4812      	ldr	r0, [pc, #72]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 8002890:	f006 fa0e 	bl	8008cb0 <HAL_UART_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800289a:	f000 fce3 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800289e:	2100      	movs	r1, #0
 80028a0:	480d      	ldr	r0, [pc, #52]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 80028a2:	f007 fbd6 	bl	800a052 <HAL_UARTEx_SetTxFifoThreshold>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80028ac:	f000 fcda 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028b0:	2100      	movs	r1, #0
 80028b2:	4809      	ldr	r0, [pc, #36]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 80028b4:	f007 fc0b 	bl	800a0ce <HAL_UARTEx_SetRxFifoThreshold>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80028be:	f000 fcd1 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80028c2:	4805      	ldr	r0, [pc, #20]	; (80028d8 <MX_USART2_UART_Init+0x94>)
 80028c4:	f007 fb8c 	bl	8009fe0 <HAL_UARTEx_DisableFifoMode>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80028ce:	f000 fcc9 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20001158 	.word	0x20001158
 80028dc:	40004400 	.word	0x40004400

080028e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028e4:	4b22      	ldr	r3, [pc, #136]	; (8002970 <MX_USART3_UART_Init+0x90>)
 80028e6:	4a23      	ldr	r2, [pc, #140]	; (8002974 <MX_USART3_UART_Init+0x94>)
 80028e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <MX_USART3_UART_Init+0x90>)
 80028ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <MX_USART3_UART_Init+0x90>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028f8:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <MX_USART3_UART_Init+0x90>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028fe:	4b1c      	ldr	r3, [pc, #112]	; (8002970 <MX_USART3_UART_Init+0x90>)
 8002900:	2200      	movs	r2, #0
 8002902:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002904:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <MX_USART3_UART_Init+0x90>)
 8002906:	220c      	movs	r2, #12
 8002908:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290a:	4b19      	ldr	r3, [pc, #100]	; (8002970 <MX_USART3_UART_Init+0x90>)
 800290c:	2200      	movs	r2, #0
 800290e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002910:	4b17      	ldr	r3, [pc, #92]	; (8002970 <MX_USART3_UART_Init+0x90>)
 8002912:	2200      	movs	r2, #0
 8002914:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <MX_USART3_UART_Init+0x90>)
 8002918:	2200      	movs	r2, #0
 800291a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <MX_USART3_UART_Init+0x90>)
 800291e:	2200      	movs	r2, #0
 8002920:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002922:	4b13      	ldr	r3, [pc, #76]	; (8002970 <MX_USART3_UART_Init+0x90>)
 8002924:	2200      	movs	r2, #0
 8002926:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002928:	4811      	ldr	r0, [pc, #68]	; (8002970 <MX_USART3_UART_Init+0x90>)
 800292a:	f006 f9c1 	bl	8008cb0 <HAL_UART_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002934:	f000 fc96 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002938:	2100      	movs	r1, #0
 800293a:	480d      	ldr	r0, [pc, #52]	; (8002970 <MX_USART3_UART_Init+0x90>)
 800293c:	f007 fb89 	bl	800a052 <HAL_UARTEx_SetTxFifoThreshold>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002946:	f000 fc8d 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800294a:	2100      	movs	r1, #0
 800294c:	4808      	ldr	r0, [pc, #32]	; (8002970 <MX_USART3_UART_Init+0x90>)
 800294e:	f007 fbbe 	bl	800a0ce <HAL_UARTEx_SetRxFifoThreshold>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002958:	f000 fc84 	bl	8003264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800295c:	4804      	ldr	r0, [pc, #16]	; (8002970 <MX_USART3_UART_Init+0x90>)
 800295e:	f007 fb3f 	bl	8009fe0 <HAL_UARTEx_DisableFifoMode>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002968:	f000 fc7c 	bl	8003264 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}
 8002970:	200011ec 	.word	0x200011ec
 8002974:	40004800 	.word	0x40004800

08002978 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08c      	sub	sp, #48	; 0x30
 800298c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298e:	f107 031c 	add.w	r3, r7, #28
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	60da      	str	r2, [r3, #12]
 800299c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800299e:	4b9e      	ldr	r3, [pc, #632]	; (8002c18 <MX_GPIO_Init+0x290>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a2:	4a9d      	ldr	r2, [pc, #628]	; (8002c18 <MX_GPIO_Init+0x290>)
 80029a4:	f043 0310 	orr.w	r3, r3, #16
 80029a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029aa:	4b9b      	ldr	r3, [pc, #620]	; (8002c18 <MX_GPIO_Init+0x290>)
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b6:	4b98      	ldr	r3, [pc, #608]	; (8002c18 <MX_GPIO_Init+0x290>)
 80029b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ba:	4a97      	ldr	r2, [pc, #604]	; (8002c18 <MX_GPIO_Init+0x290>)
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029c2:	4b95      	ldr	r3, [pc, #596]	; (8002c18 <MX_GPIO_Init+0x290>)
 80029c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029ce:	4b92      	ldr	r3, [pc, #584]	; (8002c18 <MX_GPIO_Init+0x290>)
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	4a91      	ldr	r2, [pc, #580]	; (8002c18 <MX_GPIO_Init+0x290>)
 80029d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029da:	4b8f      	ldr	r3, [pc, #572]	; (8002c18 <MX_GPIO_Init+0x290>)
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e6:	4b8c      	ldr	r3, [pc, #560]	; (8002c18 <MX_GPIO_Init+0x290>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	4a8b      	ldr	r2, [pc, #556]	; (8002c18 <MX_GPIO_Init+0x290>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029f2:	4b89      	ldr	r3, [pc, #548]	; (8002c18 <MX_GPIO_Init+0x290>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	4b86      	ldr	r3, [pc, #536]	; (8002c18 <MX_GPIO_Init+0x290>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	4a85      	ldr	r2, [pc, #532]	; (8002c18 <MX_GPIO_Init+0x290>)
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a0a:	4b83      	ldr	r3, [pc, #524]	; (8002c18 <MX_GPIO_Init+0x290>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a16:	4b80      	ldr	r3, [pc, #512]	; (8002c18 <MX_GPIO_Init+0x290>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	4a7f      	ldr	r2, [pc, #508]	; (8002c18 <MX_GPIO_Init+0x290>)
 8002a1c:	f043 0308 	orr.w	r3, r3, #8
 8002a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a22:	4b7d      	ldr	r3, [pc, #500]	; (8002c18 <MX_GPIO_Init+0x290>)
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	607b      	str	r3, [r7, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f240 1105 	movw	r1, #261	; 0x105
 8002a34:	4879      	ldr	r0, [pc, #484]	; (8002c1c <MX_GPIO_Init+0x294>)
 8002a36:	f002 fd85 	bl	8005544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f248 111c 	movw	r1, #33052	; 0x811c
 8002a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a44:	f002 fd7e 	bl	8005544 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f24f 0134 	movw	r1, #61492	; 0xf034
 8002a4e:	4874      	ldr	r0, [pc, #464]	; (8002c20 <MX_GPIO_Init+0x298>)
 8002a50:	f002 fd78 	bl	8005544 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8002a54:	2200      	movs	r2, #0
 8002a56:	f242 0183 	movw	r1, #8323	; 0x2083
 8002a5a:	4872      	ldr	r0, [pc, #456]	; (8002c24 <MX_GPIO_Init+0x29c>)
 8002a5c:	f002 fd72 	bl	8005544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002a66:	4870      	ldr	r0, [pc, #448]	; (8002c28 <MX_GPIO_Init+0x2a0>)
 8002a68:	f002 fd6c 	bl	8005544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002a6c:	f240 1305 	movw	r3, #261	; 0x105
 8002a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a72:	2301      	movs	r3, #1
 8002a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a7e:	f107 031c 	add.w	r3, r7, #28
 8002a82:	4619      	mov	r1, r3
 8002a84:	4865      	ldr	r0, [pc, #404]	; (8002c1c <MX_GPIO_Init+0x294>)
 8002a86:	f002 fad9 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8002a8a:	237a      	movs	r3, #122	; 0x7a
 8002a8c:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a98:	f107 031c 	add.w	r3, r7, #28
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	485f      	ldr	r0, [pc, #380]	; (8002c1c <MX_GPIO_Init+0x294>)
 8002aa0:	f002 facc 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002aa4:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8002aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab4:	f107 031c 	add.w	r3, r7, #28
 8002ab8:	4619      	mov	r1, r3
 8002aba:	485b      	ldr	r0, [pc, #364]	; (8002c28 <MX_GPIO_Init+0x2a0>)
 8002abc:	f002 fabe 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002ac0:	f248 131c 	movw	r3, #33052	; 0x811c
 8002ac4:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad2:	f107 031c 	add.w	r3, r7, #28
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002adc:	f002 faae 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ae4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002aee:	f107 031c 	add.w	r3, r7, #28
 8002af2:	4619      	mov	r1, r3
 8002af4:	484a      	ldr	r0, [pc, #296]	; (8002c20 <MX_GPIO_Init+0x298>)
 8002af6:	f002 faa1 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002afa:	2302      	movs	r3, #2
 8002afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002b0e:	f107 031c 	add.w	r3, r7, #28
 8002b12:	4619      	mov	r1, r3
 8002b14:	4842      	ldr	r0, [pc, #264]	; (8002c20 <MX_GPIO_Init+0x298>)
 8002b16:	f002 fa91 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002b1a:	f24b 0334 	movw	r3, #45108	; 0xb034
 8002b1e:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b20:	2301      	movs	r3, #1
 8002b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2c:	f107 031c 	add.w	r3, r7, #28
 8002b30:	4619      	mov	r1, r3
 8002b32:	483b      	ldr	r0, [pc, #236]	; (8002c20 <MX_GPIO_Init+0x298>)
 8002b34:	f002 fa82 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8002b38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002b4a:	f107 031c 	add.w	r3, r7, #28
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4833      	ldr	r0, [pc, #204]	; (8002c20 <MX_GPIO_Init+0x298>)
 8002b52:	f002 fa73 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8002b56:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8002b5a:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b66:	f107 031c 	add.w	r3, r7, #28
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	482d      	ldr	r0, [pc, #180]	; (8002c24 <MX_GPIO_Init+0x29c>)
 8002b6e:	f002 fa65 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8002b72:	f242 0383 	movw	r3, #8323	; 0x2083
 8002b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b84:	f107 031c 	add.w	r3, r7, #28
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4826      	ldr	r0, [pc, #152]	; (8002c24 <MX_GPIO_Init+0x29c>)
 8002b8c:	f002 fa56 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002b90:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b96:	2301      	movs	r3, #1
 8002b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba2:	f107 031c 	add.w	r3, r7, #28
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	481f      	ldr	r0, [pc, #124]	; (8002c28 <MX_GPIO_Init+0x2a0>)
 8002baa:	f002 fa47 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc6:	f002 fa39 	bl	800503c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002bca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bdc:	230a      	movs	r3, #10
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	4619      	mov	r1, r3
 8002be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bea:	f002 fa27 	bl	800503c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	2017      	movs	r0, #23
 8002bf4:	f002 f830 	bl	8004c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002bf8:	2017      	movs	r0, #23
 8002bfa:	f002 f849 	bl	8004c90 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2106      	movs	r1, #6
 8002c02:	2028      	movs	r0, #40	; 0x28
 8002c04:	f002 f828 	bl	8004c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c08:	2028      	movs	r0, #40	; 0x28
 8002c0a:	f002 f841 	bl	8004c90 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c0e:	bf00      	nop
 8002c10:	3730      	adds	r7, #48	; 0x30
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	48001000 	.word	0x48001000
 8002c20:	48000400 	.word	0x48000400
 8002c24:	48000c00 	.word	0x48000c00
 8002c28:	48000800 	.word	0x48000800
 8002c2c:	00000000 	.word	0x00000000

08002c30 <AcceleroRead>:

/* USER CODE BEGIN 4 */

static void AcceleroRead(void * parameter){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8002c36:	af02      	add	r7, sp, #8
 8002c38:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c3c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c40:	6018      	str	r0, [r3, #0]
	char strtemp1[100];
	char strtemp2[100];
    char strtemp3[100];
	char strtemp4[100];
	int16_t accelerationValues[3];
	int16_t x_temp = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f8a7 325e 	strh.w	r3, [r7, #606]	; 0x25e
	int16_t y_temp = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8a7 325c 	strh.w	r3, [r7, #604]	; 0x25c
	int16_t z_temp = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f8a7 325a 	strh.w	r3, [r7, #602]	; 0x25a
	int16_t diffX = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
	int16_t diffY = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8a7 3254 	strh.w	r3, [r7, #596]	; 0x254
	int16_t diffZ = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8a7 3252 	strh.w	r3, [r7, #594]	; 0x252
	int16_t steps;
	//	float filteredAcc[3] = {0.0, 0.0, 0.0};

	while(1){
		//AccelerometerDrv->GetXYZ(pDataXYZ);
		BSP_ACCELERO_AccGetXYZ(accelerationValues);
 8002c66:	f107 0310 	add.w	r3, r7, #16
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f007 fc4a 	bl	800a504 <BSP_ACCELERO_AccGetXYZ>

//		for (int i = 0; i < 3; ++i) {
//		        filteredAcc[i] = FILTER_ALPHA * accelerationValues[i] + (1 - FILTER_ALPHA) * filteredAcc[i];
//		    }

		Accms[0] = accelerationValues[0]*9.81*1e-3;
 8002c70:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c74:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8002c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fc69 	bl	8000554 <__aeabi_i2d>
 8002c82:	f20f 43fc 	addw	r3, pc, #1276	; 0x4fc
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f7fd fccd 	bl	8000628 <__aeabi_dmul>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	f20f 43f0 	addw	r3, pc, #1264	; 0x4f0
 8002c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9e:	f7fd fcc3 	bl	8000628 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ff6d 	bl	8000b88 <__aeabi_d2iz>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	b21a      	sxth	r2, r3
 8002cb2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cb6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002cba:	801a      	strh	r2, [r3, #0]
		Accms[1] = accelerationValues[1]*9.81*1e-3;
 8002cbc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cc0:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8002cc4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fc43 	bl	8000554 <__aeabi_i2d>
 8002cce:	f20f 43b0 	addw	r3, pc, #1200	; 0x4b0
 8002cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd6:	f7fd fca7 	bl	8000628 <__aeabi_dmul>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f20f 43a4 	addw	r3, pc, #1188	; 0x4a4
 8002ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cea:	f7fd fc9d 	bl	8000628 <__aeabi_dmul>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7fd ff47 	bl	8000b88 <__aeabi_d2iz>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	b21a      	sxth	r2, r3
 8002cfe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d02:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d06:	805a      	strh	r2, [r3, #2]
		Accms[2] = accelerationValues[2]*9.81*1e-3;
 8002d08:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d0c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8002d10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fc1d 	bl	8000554 <__aeabi_i2d>
 8002d1a:	f20f 4364 	addw	r3, pc, #1124	; 0x464
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	f7fd fc81 	bl	8000628 <__aeabi_dmul>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f20f 4358 	addw	r3, pc, #1112	; 0x458
 8002d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d36:	f7fd fc77 	bl	8000628 <__aeabi_dmul>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	f7fd ff21 	bl	8000b88 <__aeabi_d2iz>
 8002d46:	4603      	mov	r3, r0
 8002d48:	b21a      	sxth	r2, r3
 8002d4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d4e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d52:	809a      	strh	r2, [r3, #4]
//		Accms[0] = filteredAcc[0]*9.81*1e-3;
//		Accms[1] = filteredAcc[1]*9.81*1e-3;
//		Accms[2] = filteredAcc[2]*9.81*1e-3;

		diffX = abs(Accms[0] - x_temp);
 8002d54:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d58:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d60:	461a      	mov	r2, r3
 8002d62:	f9b7 325e 	ldrsh.w	r3, [r7, #606]	; 0x25e
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bfb8      	it	lt
 8002d6c:	425b      	neglt	r3, r3
 8002d6e:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
		diffY = abs(Accms[1] - y_temp);
 8002d72:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d76:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f9b7 325c 	ldrsh.w	r3, [r7, #604]	; 0x25c
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bfb8      	it	lt
 8002d8a:	425b      	neglt	r3, r3
 8002d8c:	f8a7 3254 	strh.w	r3, [r7, #596]	; 0x254
    	diffZ = abs(Accms[2] - z_temp);
 8002d90:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d94:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f9b7 325a 	ldrsh.w	r3, [r7, #602]	; 0x25a
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bfb8      	it	lt
 8002da8:	425b      	neglt	r3, r3
 8002daa:	f8a7 3252 	strh.w	r3, [r7, #594]	; 0x252

//		snprintf(strtemp, 100, "\nACC X:%d, ACC Y:%d, ACC Z:%d\r\n",Accms[0],Accms[1],Accms[2]);
//		HAL_UART_Transmit(&huart1, (uint8_t *)strtemp, strlen(strtemp), 1000);

		int32_t squaredX = pow(Accms[0], 2);
 8002dae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002db2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fbca 	bl	8000554 <__aeabi_i2d>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	ed9f 1bea 	vldr	d1, [pc, #936]	; 8003170 <AcceleroRead+0x540>
 8002dc8:	ec43 2b10 	vmov	d0, r2, r3
 8002dcc:	f008 f982 	bl	800b0d4 <pow>
 8002dd0:	ec53 2b10 	vmov	r2, r3, d0
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f7fd fed6 	bl	8000b88 <__aeabi_d2iz>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		int32_t squaredY = pow(Accms[1], 2);
 8002de2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002de6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002dea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fbb0 	bl	8000554 <__aeabi_i2d>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	ed9f 1bdd 	vldr	d1, [pc, #884]	; 8003170 <AcceleroRead+0x540>
 8002dfc:	ec43 2b10 	vmov	d0, r2, r3
 8002e00:	f008 f968 	bl	800b0d4 <pow>
 8002e04:	ec53 2b10 	vmov	r2, r3, d0
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7fd febc 	bl	8000b88 <__aeabi_d2iz>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
		int32_t squaredZ = pow(Accms[2], 2);
 8002e16:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e1a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd fb96 	bl	8000554 <__aeabi_i2d>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	ed9f 1bd0 	vldr	d1, [pc, #832]	; 8003170 <AcceleroRead+0x540>
 8002e30:	ec43 2b10 	vmov	d0, r2, r3
 8002e34:	f008 f94e 	bl	800b0d4 <pow>
 8002e38:	ec53 2b10 	vmov	r2, r3, d0
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f7fd fea2 	bl	8000b88 <__aeabi_d2iz>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	    int32_t sumOfSquares = squaredX + squaredY + squaredZ;
 8002e4a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8002e4e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002e52:	4413      	add	r3, r2
 8002e54:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8002e58:	4413      	add	r3, r2
 8002e5a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
		float accelerationMagnitude = sqrt(sumOfSquares);
 8002e5e:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8002e62:	f7fd fb77 	bl	8000554 <__aeabi_i2d>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	ec43 2b10 	vmov	d0, r2, r3
 8002e6e:	f008 f9a1 	bl	800b1b4 <sqrt>
 8002e72:	ec53 2b10 	vmov	r2, r3, d0
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7fd fead 	bl	8000bd8 <__aeabi_d2f>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
		int MagInt = accelerationMagnitude;
 8002e84:	edd7 7a8f 	vldr	s15, [r7, #572]	; 0x23c
 8002e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e8c:	ee17 3a90 	vmov	r3, s15
 8002e90:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		float MagFrac = 0;
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
		MagFrac = accelerationMagnitude - MagInt;
 8002e9c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002ea0:	ee07 3a90 	vmov	s15, r3
 8002ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea8:	ed97 7a8f 	vldr	s14, [r7, #572]	; 0x23c
 8002eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb0:	edc7 7a8d 	vstr	s15, [r7, #564]	; 0x234
		int tempMagFrac = trunc(MagFrac * 100);
 8002eb4:	edd7 7a8d 	vldr	s15, [r7, #564]	; 0x234
 8002eb8:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8003190 <AcceleroRead+0x560>
 8002ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ec0:	ee17 0a90 	vmov	r0, s15
 8002ec4:	f7fd fb58 	bl	8000578 <__aeabi_f2d>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	ec43 2b10 	vmov	d0, r2, r3
 8002ed0:	f008 fa82 	bl	800b3d8 <trunc>
 8002ed4:	ec53 2b10 	vmov	r2, r3, d0
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	f7fd fe54 	bl	8000b88 <__aeabi_d2iz>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

		if(diffX>0 && diffY>0 && diffZ>0 && accelerationMagnitude>6){
 8002ee6:	f9b7 3256 	ldrsh.w	r3, [r7, #598]	; 0x256
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	dd16      	ble.n	8002f1c <AcceleroRead+0x2ec>
 8002eee:	f9b7 3254 	ldrsh.w	r3, [r7, #596]	; 0x254
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	dd12      	ble.n	8002f1c <AcceleroRead+0x2ec>
 8002ef6:	f9b7 3252 	ldrsh.w	r3, [r7, #594]	; 0x252
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	dd0e      	ble.n	8002f1c <AcceleroRead+0x2ec>
 8002efe:	edd7 7a8f 	vldr	s15, [r7, #572]	; 0x23c
 8002f02:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0e:	dd05      	ble.n	8002f1c <AcceleroRead+0x2ec>
			steps = steps + 1;
 8002f10:	f8b7 3258 	ldrh.w	r3, [r7, #600]	; 0x258
 8002f14:	3301      	adds	r3, #1
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f8a7 3258 	strh.w	r3, [r7, #600]	; 0x258
		}
		else{
			steps = steps + 0;
		}

		float stride = 0.415*UserHeight;
 8002f1c:	4b9d      	ldr	r3, [pc, #628]	; (8003194 <AcceleroRead+0x564>)
 8002f1e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		float Distance = steps*stride;
 8002f22:	f9b7 3258 	ldrsh.w	r3, [r7, #600]	; 0x258
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f2e:	ed97 7a8b 	vldr	s14, [r7, #556]	; 0x22c
 8002f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f36:	edc7 7a8a 	vstr	s15, [r7, #552]	; 0x228
	    int DInt = Distance;
 8002f3a:	edd7 7a8a 	vldr	s15, [r7, #552]	; 0x228
 8002f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f42:	ee17 3a90 	vmov	r3, s15
 8002f46:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		float DFrac = Distance - DInt;
 8002f4a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f56:	ed97 7a8a 	vldr	s14, [r7, #552]	; 0x228
 8002f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f5e:	edc7 7a88 	vstr	s15, [r7, #544]	; 0x220
		int tempDFrac = trunc(DFrac * 100);
 8002f62:	edd7 7a88 	vldr	s15, [r7, #544]	; 0x220
 8002f66:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003190 <AcceleroRead+0x560>
 8002f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f6e:	ee17 0a90 	vmov	r0, s15
 8002f72:	f7fd fb01 	bl	8000578 <__aeabi_f2d>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	ec43 2b10 	vmov	d0, r2, r3
 8002f7e:	f008 fa2b 	bl	800b3d8 <trunc>
 8002f82:	ec53 2b10 	vmov	r2, r3, d0
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f7fd fdfd 	bl	8000b88 <__aeabi_d2iz>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

		float Calorie = (UserWeight*MET*Distance)/1000;
 8002f94:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8002f98:	f7fd faee 	bl	8000578 <__aeabi_f2d>
 8002f9c:	a376      	add	r3, pc, #472	; (adr r3, 8003178 <AcceleroRead+0x548>)
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	f7fd fb41 	bl	8000628 <__aeabi_dmul>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4610      	mov	r0, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	4b79      	ldr	r3, [pc, #484]	; (8003198 <AcceleroRead+0x568>)
 8002fb4:	f7fd fc62 	bl	800087c <__aeabi_ddiv>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f7fd fe0a 	bl	8000bd8 <__aeabi_d2f>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
        int CalInt = Calorie;
 8002fca:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 8002fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fd2:	ee17 3a90 	vmov	r3, s15
 8002fd6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
        float CalFrac = Calorie - CalInt;
 8002fda:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe6:	ed97 7a86 	vldr	s14, [r7, #536]	; 0x218
 8002fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fee:	edc7 7a84 	vstr	s15, [r7, #528]	; 0x210
        int tempCalFrac = trunc(CalFrac*100);
 8002ff2:	edd7 7a84 	vldr	s15, [r7, #528]	; 0x210
 8002ff6:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003190 <AcceleroRead+0x560>
 8002ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ffe:	ee17 0a90 	vmov	r0, s15
 8003002:	f7fd fab9 	bl	8000578 <__aeabi_f2d>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	ec43 2b10 	vmov	d0, r2, r3
 800300e:	f008 f9e3 	bl	800b3d8 <trunc>
 8003012:	ec53 2b10 	vmov	r2, r3, d0
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	f7fd fdb5 	bl	8000b88 <__aeabi_d2iz>
 800301e:	4603      	mov	r3, r0
 8003020:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

		snprintf(strtemp1, 100, "\n\rAcceleration Magnitude = %1d.%02d\n\r", MagInt, tempMagFrac);
 8003024:	f507 70a2 	add.w	r0, r7, #324	; 0x144
 8003028:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003032:	4a5a      	ldr	r2, [pc, #360]	; (800319c <AcceleroRead+0x56c>)
 8003034:	2164      	movs	r1, #100	; 0x64
 8003036:	f007 fb95 	bl	800a764 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)strtemp1, strlen(strtemp1), 1000);
 800303a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd f8de 	bl	8000200 <strlen>
 8003044:	4603      	mov	r3, r0
 8003046:	b29a      	uxth	r2, r3
 8003048:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 800304c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003050:	4853      	ldr	r0, [pc, #332]	; (80031a0 <AcceleroRead+0x570>)
 8003052:	f005 fe7d 	bl	8008d50 <HAL_UART_Transmit>
		snprintf(strtemp3, 100, "Xdiff = %1d, YDiff = %1d, Zdiff = %1d\n\r", diffX, diffY, diffZ);
 8003056:	f9b7 1256 	ldrsh.w	r1, [r7, #598]	; 0x256
 800305a:	f9b7 3254 	ldrsh.w	r3, [r7, #596]	; 0x254
 800305e:	f9b7 2252 	ldrsh.w	r2, [r7, #594]	; 0x252
 8003062:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8003066:	9201      	str	r2, [sp, #4]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	460b      	mov	r3, r1
 800306c:	4a4d      	ldr	r2, [pc, #308]	; (80031a4 <AcceleroRead+0x574>)
 800306e:	2164      	movs	r1, #100	; 0x64
 8003070:	f007 fb78 	bl	800a764 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)strtemp3, strlen(strtemp3), 1000);
 8003074:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd f8c1 	bl	8000200 <strlen>
 800307e:	4603      	mov	r3, r0
 8003080:	b29a      	uxth	r2, r3
 8003082:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8003086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308a:	4845      	ldr	r0, [pc, #276]	; (80031a0 <AcceleroRead+0x570>)
 800308c:	f005 fe60 	bl	8008d50 <HAL_UART_Transmit>
		snprintf(strtemp2, 100, "Number of Steps = %1d\n\r", steps);
 8003090:	f9b7 3258 	ldrsh.w	r3, [r7, #600]	; 0x258
 8003094:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8003098:	4a43      	ldr	r2, [pc, #268]	; (80031a8 <AcceleroRead+0x578>)
 800309a:	2164      	movs	r1, #100	; 0x64
 800309c:	f007 fb62 	bl	800a764 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)strtemp2, strlen(strtemp2), 1000);
 80030a0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fd f8ab 	bl	8000200 <strlen>
 80030aa:	4603      	mov	r3, r0
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80030b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030b6:	483a      	ldr	r0, [pc, #232]	; (80031a0 <AcceleroRead+0x570>)
 80030b8:	f005 fe4a 	bl	8008d50 <HAL_UART_Transmit>
		snprintf(strtemp4, 100, "Distance Traveled = %1d.%02dm\n\r", DInt, tempDFrac);
 80030bc:	f107 0018 	add.w	r0, r7, #24
 80030c0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80030ca:	4a38      	ldr	r2, [pc, #224]	; (80031ac <AcceleroRead+0x57c>)
 80030cc:	2164      	movs	r1, #100	; 0x64
 80030ce:	f007 fb49 	bl	800a764 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)strtemp4, strlen(strtemp4), 1000);
 80030d2:	f107 0318 	add.w	r3, r7, #24
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd f892 	bl	8000200 <strlen>
 80030dc:	4603      	mov	r3, r0
 80030de:	b29a      	uxth	r2, r3
 80030e0:	f107 0118 	add.w	r1, r7, #24
 80030e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030e8:	482d      	ldr	r0, [pc, #180]	; (80031a0 <AcceleroRead+0x570>)
 80030ea:	f005 fe31 	bl	8008d50 <HAL_UART_Transmit>
        snprintf(strtemp, 100, "Calorie Burnt = %1d.%02dcal\n\r", CalInt, tempCalFrac);
 80030ee:	f507 70d4 	add.w	r0, r7, #424	; 0x1a8
 80030f2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80030fc:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <AcceleroRead+0x580>)
 80030fe:	2164      	movs	r1, #100	; 0x64
 8003100:	f007 fb30 	bl	800a764 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)strtemp, strlen(strtemp), 1000);
 8003104:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd f879 	bl	8000200 <strlen>
 800310e:	4603      	mov	r3, r0
 8003110:	b29a      	uxth	r2, r3
 8003112:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 8003116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800311a:	4821      	ldr	r0, [pc, #132]	; (80031a0 <AcceleroRead+0x570>)
 800311c:	f005 fe18 	bl	8008d50 <HAL_UART_Transmit>

		x_temp = accelerationValues[0]*9.81*1e-3;
 8003120:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003124:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8003128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd fa11 	bl	8000554 <__aeabi_i2d>
 8003132:	a313      	add	r3, pc, #76	; (adr r3, 8003180 <AcceleroRead+0x550>)
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	f7fd fa76 	bl	8000628 <__aeabi_dmul>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	a310      	add	r3, pc, #64	; (adr r3, 8003188 <AcceleroRead+0x558>)
 8003146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314a:	f7fd fa6d 	bl	8000628 <__aeabi_dmul>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4610      	mov	r0, r2
 8003154:	4619      	mov	r1, r3
 8003156:	f7fd fd17 	bl	8000b88 <__aeabi_d2iz>
 800315a:	4603      	mov	r3, r0
 800315c:	f8a7 325e 	strh.w	r3, [r7, #606]	; 0x25e
		y_temp = accelerationValues[1]*9.81*1e-3;
 8003160:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003164:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8003168:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800316c:	4618      	mov	r0, r3
 800316e:	e021      	b.n	80031b4 <AcceleroRead+0x584>
 8003170:	00000000 	.word	0x00000000
 8003174:	40000000 	.word	0x40000000
 8003178:	00000000 	.word	0x00000000
 800317c:	40706800 	.word	0x40706800
 8003180:	51eb851f 	.word	0x51eb851f
 8003184:	40239eb8 	.word	0x40239eb8
 8003188:	d2f1a9fc 	.word	0xd2f1a9fc
 800318c:	3f50624d 	.word	0x3f50624d
 8003190:	42c80000 	.word	0x42c80000
 8003194:	3f39eb85 	.word	0x3f39eb85
 8003198:	408f4000 	.word	0x408f4000
 800319c:	0800c074 	.word	0x0800c074
 80031a0:	200010c4 	.word	0x200010c4
 80031a4:	0800c09c 	.word	0x0800c09c
 80031a8:	0800c0c4 	.word	0x0800c0c4
 80031ac:	0800c0dc 	.word	0x0800c0dc
 80031b0:	0800c0fc 	.word	0x0800c0fc
 80031b4:	f7fd f9ce 	bl	8000554 <__aeabi_i2d>
 80031b8:	a31d      	add	r3, pc, #116	; (adr r3, 8003230 <AcceleroRead+0x600>)
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f7fd fa33 	bl	8000628 <__aeabi_dmul>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	a31b      	add	r3, pc, #108	; (adr r3, 8003238 <AcceleroRead+0x608>)
 80031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d0:	f7fd fa2a 	bl	8000628 <__aeabi_dmul>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4610      	mov	r0, r2
 80031da:	4619      	mov	r1, r3
 80031dc:	f7fd fcd4 	bl	8000b88 <__aeabi_d2iz>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f8a7 325c 	strh.w	r3, [r7, #604]	; 0x25c
		z_temp = accelerationValues[2]*9.81*1e-3;
 80031e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031ea:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80031ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd f9ae 	bl	8000554 <__aeabi_i2d>
 80031f8:	a30d      	add	r3, pc, #52	; (adr r3, 8003230 <AcceleroRead+0x600>)
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	f7fd fa13 	bl	8000628 <__aeabi_dmul>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4610      	mov	r0, r2
 8003208:	4619      	mov	r1, r3
 800320a:	a30b      	add	r3, pc, #44	; (adr r3, 8003238 <AcceleroRead+0x608>)
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	f7fd fa0a 	bl	8000628 <__aeabi_dmul>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	f7fd fcb4 	bl	8000b88 <__aeabi_d2iz>
 8003220:	4603      	mov	r3, r0
 8003222:	f8a7 325a 	strh.w	r3, [r7, #602]	; 0x25a

//		x_temp = filteredAcc[0]*9.81*1e-3;
//		y_temp = filteredAcc[1]*9.81*1e-3;
//		z_temp = filteredAcc[2]*9.81*1e-3;

	    HAL_Delay(5000);
 8003226:	f241 3088 	movw	r0, #5000	; 0x1388
 800322a:	f000 fd57 	bl	8003cdc <HAL_Delay>
	while(1){
 800322e:	e51a      	b.n	8002c66 <AcceleroRead+0x36>
 8003230:	51eb851f 	.word	0x51eb851f
 8003234:	40239eb8 	.word	0x40239eb8
 8003238:	d2f1a9fc 	.word	0xd2f1a9fc
 800323c:	3f50624d 	.word	0x3f50624d

08003240 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a04      	ldr	r2, [pc, #16]	; (8003260 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d101      	bne.n	8003256 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003252:	f000 fd23 	bl	8003c9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40001000 	.word	0x40001000

08003264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003268:	b672      	cpsid	i
}
 800326a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800326c:	e7fe      	b.n	800326c <Error_Handler+0x8>
	...

08003270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003276:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <HAL_MspInit+0x44>)
 8003278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327a:	4a0e      	ldr	r2, [pc, #56]	; (80032b4 <HAL_MspInit+0x44>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6613      	str	r3, [r2, #96]	; 0x60
 8003282:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <HAL_MspInit+0x44>)
 8003284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_MspInit+0x44>)
 8003290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003292:	4a08      	ldr	r2, [pc, #32]	; (80032b4 <HAL_MspInit+0x44>)
 8003294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003298:	6593      	str	r3, [r2, #88]	; 0x58
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_MspInit+0x44>)
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000

080032b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a15      	ldr	r2, [pc, #84]	; (800332c <HAL_ADC_MspInit+0x74>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d123      	bne.n	8003322 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <HAL_ADC_MspInit+0x78>)
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	4a14      	ldr	r2, [pc, #80]	; (8003330 <HAL_ADC_MspInit+0x78>)
 80032e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032e6:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_ADC_MspInit+0x78>)
 80032e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_ADC_MspInit+0x78>)
 80032f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f6:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <HAL_ADC_MspInit+0x78>)
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_ADC_MspInit+0x78>)
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800330a:	233f      	movs	r3, #63	; 0x3f
 800330c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800330e:	230b      	movs	r3, #11
 8003310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003316:	f107 0314 	add.w	r3, r7, #20
 800331a:	4619      	mov	r1, r3
 800331c:	4805      	ldr	r0, [pc, #20]	; (8003334 <HAL_ADC_MspInit+0x7c>)
 800331e:	f001 fe8d 	bl	800503c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003322:	bf00      	nop
 8003324:	3728      	adds	r7, #40	; 0x28
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	50040000 	.word	0x50040000
 8003330:	40021000 	.word	0x40021000
 8003334:	48000800 	.word	0x48000800

08003338 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b0ae      	sub	sp, #184	; 0xb8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003350:	f107 0310 	add.w	r3, r7, #16
 8003354:	2294      	movs	r2, #148	; 0x94
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f007 fa37 	bl	800a7cc <memset>
  if(DFSDM1_Init == 0)
 800335e:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d142      	bne.n	80033ec <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800336a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800336c:	2300      	movs	r3, #0
 800336e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003372:	f107 0310 	add.w	r3, r7, #16
 8003376:	4618      	mov	r0, r3
 8003378:	f004 fc1c 	bl	8007bb4 <HAL_RCCEx_PeriphCLKConfig>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8003382:	f7ff ff6f 	bl	8003264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338a:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800338c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003390:	6613      	str	r3, [r2, #96]	; 0x60
 8003392:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a2:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80033a4:	f043 0310 	orr.w	r3, r3, #16
 80033a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033aa:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80033b6:	f44f 7320 	mov.w	r3, #640	; 0x280
 80033ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033be:	2302      	movs	r3, #2
 80033c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80033d0:	2306      	movs	r3, #6
 80033d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80033da:	4619      	mov	r1, r3
 80033dc:	4807      	ldr	r0, [pc, #28]	; (80033fc <HAL_DFSDM_ChannelMspInit+0xc4>)
 80033de:	f001 fe2d 	bl	800503c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80033e2:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3301      	adds	r3, #1
 80033e8:	4a02      	ldr	r2, [pc, #8]	; (80033f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80033ea:	6013      	str	r3, [r2, #0]
  }

}
 80033ec:	bf00      	nop
 80033ee:	37b8      	adds	r7, #184	; 0xb8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20001280 	.word	0x20001280
 80033f8:	40021000 	.word	0x40021000
 80033fc:	48001000 	.word	0x48001000

08003400 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b0b0      	sub	sp, #192	; 0xc0
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003418:	f107 0318 	add.w	r3, r7, #24
 800341c:	2294      	movs	r2, #148	; 0x94
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f007 f9d3 	bl	800a7cc <memset>
  if(hi2c->Instance==I2C1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a42      	ldr	r2, [pc, #264]	; (8003534 <HAL_I2C_MspInit+0x134>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d13c      	bne.n	80034aa <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003430:	2340      	movs	r3, #64	; 0x40
 8003432:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003434:	2300      	movs	r3, #0
 8003436:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003438:	f107 0318 	add.w	r3, r7, #24
 800343c:	4618      	mov	r0, r3
 800343e:	f004 fbb9 	bl	8007bb4 <HAL_RCCEx_PeriphCLKConfig>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003448:	f7ff ff0c 	bl	8003264 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800344c:	4b3a      	ldr	r3, [pc, #232]	; (8003538 <HAL_I2C_MspInit+0x138>)
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	4a39      	ldr	r2, [pc, #228]	; (8003538 <HAL_I2C_MspInit+0x138>)
 8003452:	f043 0302 	orr.w	r3, r3, #2
 8003456:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003458:	4b37      	ldr	r3, [pc, #220]	; (8003538 <HAL_I2C_MspInit+0x138>)
 800345a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8003464:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800346c:	2312      	movs	r3, #18
 800346e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003472:	2301      	movs	r3, #1
 8003474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003478:	2303      	movs	r3, #3
 800347a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800347e:	2304      	movs	r3, #4
 8003480:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003484:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003488:	4619      	mov	r1, r3
 800348a:	482c      	ldr	r0, [pc, #176]	; (800353c <HAL_I2C_MspInit+0x13c>)
 800348c:	f001 fdd6 	bl	800503c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003490:	4b29      	ldr	r3, [pc, #164]	; (8003538 <HAL_I2C_MspInit+0x138>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	4a28      	ldr	r2, [pc, #160]	; (8003538 <HAL_I2C_MspInit+0x138>)
 8003496:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800349a:	6593      	str	r3, [r2, #88]	; 0x58
 800349c:	4b26      	ldr	r3, [pc, #152]	; (8003538 <HAL_I2C_MspInit+0x138>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80034a8:	e040      	b.n	800352c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a24      	ldr	r2, [pc, #144]	; (8003540 <HAL_I2C_MspInit+0x140>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d13b      	bne.n	800352c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80034b8:	2300      	movs	r3, #0
 80034ba:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034bc:	f107 0318 	add.w	r3, r7, #24
 80034c0:	4618      	mov	r0, r3
 80034c2:	f004 fb77 	bl	8007bb4 <HAL_RCCEx_PeriphCLKConfig>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80034cc:	f7ff feca 	bl	8003264 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d0:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_I2C_MspInit+0x138>)
 80034d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d4:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_I2C_MspInit+0x138>)
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034dc:	4b16      	ldr	r3, [pc, #88]	; (8003538 <HAL_I2C_MspInit+0x138>)
 80034de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80034e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034f0:	2312      	movs	r3, #18
 80034f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fc:	2303      	movs	r3, #3
 80034fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003502:	2304      	movs	r3, #4
 8003504:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003508:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800350c:	4619      	mov	r1, r3
 800350e:	480b      	ldr	r0, [pc, #44]	; (800353c <HAL_I2C_MspInit+0x13c>)
 8003510:	f001 fd94 	bl	800503c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HAL_I2C_MspInit+0x138>)
 8003516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003518:	4a07      	ldr	r2, [pc, #28]	; (8003538 <HAL_I2C_MspInit+0x138>)
 800351a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800351e:	6593      	str	r3, [r2, #88]	; 0x58
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_I2C_MspInit+0x138>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	68bb      	ldr	r3, [r7, #8]
}
 800352c:	bf00      	nop
 800352e:	37c0      	adds	r7, #192	; 0xc0
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40005400 	.word	0x40005400
 8003538:	40021000 	.word	0x40021000
 800353c:	48000400 	.word	0x48000400
 8003540:	40005800 	.word	0x40005800

08003544 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a16      	ldr	r2, [pc, #88]	; (80035ac <HAL_I2C_MspDeInit+0x68>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d110      	bne.n	8003578 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003556:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <HAL_I2C_MspDeInit+0x6c>)
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	4a15      	ldr	r2, [pc, #84]	; (80035b0 <HAL_I2C_MspDeInit+0x6c>)
 800355c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003560:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 8003562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003566:	4813      	ldr	r0, [pc, #76]	; (80035b4 <HAL_I2C_MspDeInit+0x70>)
 8003568:	f001 fefa 	bl	8005360 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 800356c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003570:	4810      	ldr	r0, [pc, #64]	; (80035b4 <HAL_I2C_MspDeInit+0x70>)
 8003572:	f001 fef5 	bl	8005360 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003576:	e014      	b.n	80035a2 <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0e      	ldr	r2, [pc, #56]	; (80035b8 <HAL_I2C_MspDeInit+0x74>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d10f      	bne.n	80035a2 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_I2C_MspDeInit+0x6c>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <HAL_I2C_MspDeInit+0x6c>)
 8003588:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800358c:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800358e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003592:	4808      	ldr	r0, [pc, #32]	; (80035b4 <HAL_I2C_MspDeInit+0x70>)
 8003594:	f001 fee4 	bl	8005360 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8003598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800359c:	4805      	ldr	r0, [pc, #20]	; (80035b4 <HAL_I2C_MspDeInit+0x70>)
 800359e:	f001 fedf 	bl	8005360 <HAL_GPIO_DeInit>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40005400 	.word	0x40005400
 80035b0:	40021000 	.word	0x40021000
 80035b4:	48000400 	.word	0x48000400
 80035b8:	40005800 	.word	0x40005800

080035bc <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b0b0      	sub	sp, #192	; 0xc0
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	60da      	str	r2, [r3, #12]
 80035d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035d4:	f107 0318 	add.w	r3, r7, #24
 80035d8:	2294      	movs	r2, #148	; 0x94
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f007 f8f5 	bl	800a7cc <memset>
  if(hospi->Instance==OCTOSPI1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a28      	ldr	r2, [pc, #160]	; (8003688 <HAL_OSPI_MspInit+0xcc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d149      	bne.n	8003680 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80035ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035f8:	f107 0318 	add.w	r3, r7, #24
 80035fc:	4618      	mov	r0, r3
 80035fe:	f004 fad9 	bl	8007bb4 <HAL_RCCEx_PeriphCLKConfig>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8003608:	f7ff fe2c 	bl	8003264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800360c:	4b1f      	ldr	r3, [pc, #124]	; (800368c <HAL_OSPI_MspInit+0xd0>)
 800360e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003610:	4a1e      	ldr	r2, [pc, #120]	; (800368c <HAL_OSPI_MspInit+0xd0>)
 8003612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003616:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003618:	4b1c      	ldr	r3, [pc, #112]	; (800368c <HAL_OSPI_MspInit+0xd0>)
 800361a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003624:	4b19      	ldr	r3, [pc, #100]	; (800368c <HAL_OSPI_MspInit+0xd0>)
 8003626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003628:	4a18      	ldr	r2, [pc, #96]	; (800368c <HAL_OSPI_MspInit+0xd0>)
 800362a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362e:	6513      	str	r3, [r2, #80]	; 0x50
 8003630:	4b16      	ldr	r3, [pc, #88]	; (800368c <HAL_OSPI_MspInit+0xd0>)
 8003632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800363c:	4b13      	ldr	r3, [pc, #76]	; (800368c <HAL_OSPI_MspInit+0xd0>)
 800363e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003640:	4a12      	ldr	r2, [pc, #72]	; (800368c <HAL_OSPI_MspInit+0xd0>)
 8003642:	f043 0310 	orr.w	r3, r3, #16
 8003646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003648:	4b10      	ldr	r3, [pc, #64]	; (800368c <HAL_OSPI_MspInit+0xd0>)
 800364a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8003654:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365c:	2302      	movs	r3, #2
 800365e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003662:	2300      	movs	r3, #0
 8003664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003668:	2303      	movs	r3, #3
 800366a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800366e:	230a      	movs	r3, #10
 8003670:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003674:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003678:	4619      	mov	r1, r3
 800367a:	4805      	ldr	r0, [pc, #20]	; (8003690 <HAL_OSPI_MspInit+0xd4>)
 800367c:	f001 fcde 	bl	800503c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8003680:	bf00      	nop
 8003682:	37c0      	adds	r7, #192	; 0xc0
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	a0001000 	.word	0xa0001000
 800368c:	40021000 	.word	0x40021000
 8003690:	48001000 	.word	0x48001000

08003694 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08c      	sub	sp, #48	; 0x30
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	f107 031c 	add.w	r3, r7, #28
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2f      	ldr	r2, [pc, #188]	; (8003770 <HAL_SPI_MspInit+0xdc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d129      	bne.n	800370a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036b6:	4b2f      	ldr	r3, [pc, #188]	; (8003774 <HAL_SPI_MspInit+0xe0>)
 80036b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ba:	4a2e      	ldr	r2, [pc, #184]	; (8003774 <HAL_SPI_MspInit+0xe0>)
 80036bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036c0:	6613      	str	r3, [r2, #96]	; 0x60
 80036c2:	4b2c      	ldr	r3, [pc, #176]	; (8003774 <HAL_SPI_MspInit+0xe0>)
 80036c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ce:	4b29      	ldr	r3, [pc, #164]	; (8003774 <HAL_SPI_MspInit+0xe0>)
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	4a28      	ldr	r2, [pc, #160]	; (8003774 <HAL_SPI_MspInit+0xe0>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036da:	4b26      	ldr	r3, [pc, #152]	; (8003774 <HAL_SPI_MspInit+0xe0>)
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80036e6:	23e0      	movs	r3, #224	; 0xe0
 80036e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ea:	2302      	movs	r3, #2
 80036ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f2:	2303      	movs	r3, #3
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036f6:	2305      	movs	r3, #5
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fa:	f107 031c 	add.w	r3, r7, #28
 80036fe:	4619      	mov	r1, r3
 8003700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003704:	f001 fc9a 	bl	800503c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003708:	e02d      	b.n	8003766 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1a      	ldr	r2, [pc, #104]	; (8003778 <HAL_SPI_MspInit+0xe4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d128      	bne.n	8003766 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003714:	4b17      	ldr	r3, [pc, #92]	; (8003774 <HAL_SPI_MspInit+0xe0>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	4a16      	ldr	r2, [pc, #88]	; (8003774 <HAL_SPI_MspInit+0xe0>)
 800371a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371e:	6593      	str	r3, [r2, #88]	; 0x58
 8003720:	4b14      	ldr	r3, [pc, #80]	; (8003774 <HAL_SPI_MspInit+0xe0>)
 8003722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_SPI_MspInit+0xe0>)
 800372e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003730:	4a10      	ldr	r2, [pc, #64]	; (8003774 <HAL_SPI_MspInit+0xe0>)
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003738:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <HAL_SPI_MspInit+0xe0>)
 800373a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003744:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374a:	2302      	movs	r3, #2
 800374c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003752:	2303      	movs	r3, #3
 8003754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003756:	2306      	movs	r3, #6
 8003758:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800375a:	f107 031c 	add.w	r3, r7, #28
 800375e:	4619      	mov	r1, r3
 8003760:	4806      	ldr	r0, [pc, #24]	; (800377c <HAL_SPI_MspInit+0xe8>)
 8003762:	f001 fc6b 	bl	800503c <HAL_GPIO_Init>
}
 8003766:	bf00      	nop
 8003768:	3730      	adds	r7, #48	; 0x30
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40013000 	.word	0x40013000
 8003774:	40021000 	.word	0x40021000
 8003778:	40003c00 	.word	0x40003c00
 800377c:	48000800 	.word	0x48000800

08003780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b0b4      	sub	sp, #208	; 0xd0
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800379c:	2294      	movs	r2, #148	; 0x94
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f007 f813 	bl	800a7cc <memset>
  if(huart->Instance==UART4)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a87      	ldr	r2, [pc, #540]	; (80039c8 <HAL_UART_MspInit+0x248>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d13c      	bne.n	800382a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80037b0:	2308      	movs	r3, #8
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80037b4:	2300      	movs	r3, #0
 80037b6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037bc:	4618      	mov	r0, r3
 80037be:	f004 f9f9 	bl	8007bb4 <HAL_RCCEx_PeriphCLKConfig>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80037c8:	f7ff fd4c 	bl	8003264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80037cc:	4b7f      	ldr	r3, [pc, #508]	; (80039cc <HAL_UART_MspInit+0x24c>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	4a7e      	ldr	r2, [pc, #504]	; (80039cc <HAL_UART_MspInit+0x24c>)
 80037d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037d6:	6593      	str	r3, [r2, #88]	; 0x58
 80037d8:	4b7c      	ldr	r3, [pc, #496]	; (80039cc <HAL_UART_MspInit+0x24c>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e4:	4b79      	ldr	r3, [pc, #484]	; (80039cc <HAL_UART_MspInit+0x24c>)
 80037e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e8:	4a78      	ldr	r2, [pc, #480]	; (80039cc <HAL_UART_MspInit+0x24c>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037f0:	4b76      	ldr	r3, [pc, #472]	; (80039cc <HAL_UART_MspInit+0x24c>)
 80037f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80037fc:	2303      	movs	r3, #3
 80037fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003802:	2302      	movs	r3, #2
 8003804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	2300      	movs	r3, #0
 800380a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800380e:	2303      	movs	r3, #3
 8003810:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003814:	2308      	movs	r3, #8
 8003816:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800381e:	4619      	mov	r1, r3
 8003820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003824:	f001 fc0a 	bl	800503c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003828:	e0ca      	b.n	80039c0 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a68      	ldr	r2, [pc, #416]	; (80039d0 <HAL_UART_MspInit+0x250>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d143      	bne.n	80038bc <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003834:	2301      	movs	r3, #1
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003838:	2300      	movs	r3, #0
 800383a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800383c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003840:	4618      	mov	r0, r3
 8003842:	f004 f9b7 	bl	8007bb4 <HAL_RCCEx_PeriphCLKConfig>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800384c:	f7ff fd0a 	bl	8003264 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003850:	4b5e      	ldr	r3, [pc, #376]	; (80039cc <HAL_UART_MspInit+0x24c>)
 8003852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003854:	4a5d      	ldr	r2, [pc, #372]	; (80039cc <HAL_UART_MspInit+0x24c>)
 8003856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800385a:	6613      	str	r3, [r2, #96]	; 0x60
 800385c:	4b5b      	ldr	r3, [pc, #364]	; (80039cc <HAL_UART_MspInit+0x24c>)
 800385e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003868:	4b58      	ldr	r3, [pc, #352]	; (80039cc <HAL_UART_MspInit+0x24c>)
 800386a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386c:	4a57      	ldr	r2, [pc, #348]	; (80039cc <HAL_UART_MspInit+0x24c>)
 800386e:	f043 0302 	orr.w	r3, r3, #2
 8003872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003874:	4b55      	ldr	r3, [pc, #340]	; (80039cc <HAL_UART_MspInit+0x24c>)
 8003876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003880:	23c0      	movs	r3, #192	; 0xc0
 8003882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003886:	2302      	movs	r3, #2
 8003888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003892:	2303      	movs	r3, #3
 8003894:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003898:	2307      	movs	r3, #7
 800389a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800389e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80038a2:	4619      	mov	r1, r3
 80038a4:	484b      	ldr	r0, [pc, #300]	; (80039d4 <HAL_UART_MspInit+0x254>)
 80038a6:	f001 fbc9 	bl	800503c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80038aa:	2200      	movs	r2, #0
 80038ac:	2106      	movs	r1, #6
 80038ae:	2025      	movs	r0, #37	; 0x25
 80038b0:	f001 f9d2 	bl	8004c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038b4:	2025      	movs	r0, #37	; 0x25
 80038b6:	f001 f9eb 	bl	8004c90 <HAL_NVIC_EnableIRQ>
}
 80038ba:	e081      	b.n	80039c0 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a45      	ldr	r2, [pc, #276]	; (80039d8 <HAL_UART_MspInit+0x258>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d13b      	bne.n	800393e <HAL_UART_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80038c6:	2302      	movs	r3, #2
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80038ca:	2300      	movs	r3, #0
 80038cc:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038d2:	4618      	mov	r0, r3
 80038d4:	f004 f96e 	bl	8007bb4 <HAL_RCCEx_PeriphCLKConfig>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_UART_MspInit+0x162>
      Error_Handler();
 80038de:	f7ff fcc1 	bl	8003264 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038e2:	4b3a      	ldr	r3, [pc, #232]	; (80039cc <HAL_UART_MspInit+0x24c>)
 80038e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e6:	4a39      	ldr	r2, [pc, #228]	; (80039cc <HAL_UART_MspInit+0x24c>)
 80038e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ec:	6593      	str	r3, [r2, #88]	; 0x58
 80038ee:	4b37      	ldr	r3, [pc, #220]	; (80039cc <HAL_UART_MspInit+0x24c>)
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038fa:	4b34      	ldr	r3, [pc, #208]	; (80039cc <HAL_UART_MspInit+0x24c>)
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	4a33      	ldr	r2, [pc, #204]	; (80039cc <HAL_UART_MspInit+0x24c>)
 8003900:	f043 0308 	orr.w	r3, r3, #8
 8003904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003906:	4b31      	ldr	r3, [pc, #196]	; (80039cc <HAL_UART_MspInit+0x24c>)
 8003908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003912:	2378      	movs	r3, #120	; 0x78
 8003914:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003918:	2302      	movs	r3, #2
 800391a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003924:	2303      	movs	r3, #3
 8003926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800392a:	2307      	movs	r3, #7
 800392c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003930:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003934:	4619      	mov	r1, r3
 8003936:	4829      	ldr	r0, [pc, #164]	; (80039dc <HAL_UART_MspInit+0x25c>)
 8003938:	f001 fb80 	bl	800503c <HAL_GPIO_Init>
}
 800393c:	e040      	b.n	80039c0 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a27      	ldr	r2, [pc, #156]	; (80039e0 <HAL_UART_MspInit+0x260>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d13b      	bne.n	80039c0 <HAL_UART_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003948:	2304      	movs	r3, #4
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800394c:	2300      	movs	r3, #0
 800394e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003950:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003954:	4618      	mov	r0, r3
 8003956:	f004 f92d 	bl	8007bb4 <HAL_RCCEx_PeriphCLKConfig>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8003960:	f7ff fc80 	bl	8003264 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003964:	4b19      	ldr	r3, [pc, #100]	; (80039cc <HAL_UART_MspInit+0x24c>)
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	4a18      	ldr	r2, [pc, #96]	; (80039cc <HAL_UART_MspInit+0x24c>)
 800396a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800396e:	6593      	str	r3, [r2, #88]	; 0x58
 8003970:	4b16      	ldr	r3, [pc, #88]	; (80039cc <HAL_UART_MspInit+0x24c>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800397c:	4b13      	ldr	r3, [pc, #76]	; (80039cc <HAL_UART_MspInit+0x24c>)
 800397e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003980:	4a12      	ldr	r2, [pc, #72]	; (80039cc <HAL_UART_MspInit+0x24c>)
 8003982:	f043 0308 	orr.w	r3, r3, #8
 8003986:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <HAL_UART_MspInit+0x24c>)
 800398a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003994:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003998:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399c:	2302      	movs	r3, #2
 800399e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a8:	2303      	movs	r3, #3
 80039aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039ae:	2307      	movs	r3, #7
 80039b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80039b8:	4619      	mov	r1, r3
 80039ba:	4808      	ldr	r0, [pc, #32]	; (80039dc <HAL_UART_MspInit+0x25c>)
 80039bc:	f001 fb3e 	bl	800503c <HAL_GPIO_Init>
}
 80039c0:	bf00      	nop
 80039c2:	37d0      	adds	r7, #208	; 0xd0
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40004c00 	.word	0x40004c00
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40013800 	.word	0x40013800
 80039d4:	48000400 	.word	0x48000400
 80039d8:	40004400 	.word	0x40004400
 80039dc:	48000c00 	.word	0x48000c00
 80039e0:	40004800 	.word	0x40004800

080039e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08e      	sub	sp, #56	; 0x38
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80039f2:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <HAL_InitTick+0xe0>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	4a33      	ldr	r2, [pc, #204]	; (8003ac4 <HAL_InitTick+0xe0>)
 80039f8:	f043 0310 	orr.w	r3, r3, #16
 80039fc:	6593      	str	r3, [r2, #88]	; 0x58
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <HAL_InitTick+0xe0>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a0a:	f107 0210 	add.w	r2, r7, #16
 8003a0e:	f107 0314 	add.w	r3, r7, #20
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f003 ffdb 	bl	80079d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d103      	bne.n	8003a2c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a24:	f003 ffa8 	bl	8007978 <HAL_RCC_GetPCLK1Freq>
 8003a28:	6378      	str	r0, [r7, #52]	; 0x34
 8003a2a:	e004      	b.n	8003a36 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003a2c:	f003 ffa4 	bl	8007978 <HAL_RCC_GetPCLK1Freq>
 8003a30:	4603      	mov	r3, r0
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a38:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <HAL_InitTick+0xe4>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	0c9b      	lsrs	r3, r3, #18
 8003a40:	3b01      	subs	r3, #1
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a44:	4b21      	ldr	r3, [pc, #132]	; (8003acc <HAL_InitTick+0xe8>)
 8003a46:	4a22      	ldr	r2, [pc, #136]	; (8003ad0 <HAL_InitTick+0xec>)
 8003a48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_InitTick+0xe8>)
 8003a4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a50:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a52:	4a1e      	ldr	r2, [pc, #120]	; (8003acc <HAL_InitTick+0xe8>)
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a58:	4b1c      	ldr	r3, [pc, #112]	; (8003acc <HAL_InitTick+0xe8>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a5e:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_InitTick+0xe8>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a64:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_InitTick+0xe8>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003a6a:	4818      	ldr	r0, [pc, #96]	; (8003acc <HAL_InitTick+0xe8>)
 8003a6c:	f004 fe6d 	bl	800874a <HAL_TIM_Base_Init>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003a76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d11b      	bne.n	8003ab6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003a7e:	4813      	ldr	r0, [pc, #76]	; (8003acc <HAL_InitTick+0xe8>)
 8003a80:	f004 fec4 	bl	800880c <HAL_TIM_Base_Start_IT>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003a8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d111      	bne.n	8003ab6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a92:	2036      	movs	r0, #54	; 0x36
 8003a94:	f001 f8fc 	bl	8004c90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b0f      	cmp	r3, #15
 8003a9c:	d808      	bhi.n	8003ab0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	2036      	movs	r0, #54	; 0x36
 8003aa4:	f001 f8d8 	bl	8004c58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <HAL_InitTick+0xf0>)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e002      	b.n	8003ab6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003ab6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3738      	adds	r7, #56	; 0x38
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	431bde83 	.word	0x431bde83
 8003acc:	20001284 	.word	0x20001284
 8003ad0:	40001000 	.word	0x40001000
 8003ad4:	2000000c 	.word	0x2000000c

08003ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003adc:	e7fe      	b.n	8003adc <NMI_Handler+0x4>

08003ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ae2:	e7fe      	b.n	8003ae2 <HardFault_Handler+0x4>

08003ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ae8:	e7fe      	b.n	8003ae8 <MemManage_Handler+0x4>

08003aea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aea:	b480      	push	{r7}
 8003aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aee:	e7fe      	b.n	8003aee <BusFault_Handler+0x4>

08003af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003af4:	e7fe      	b.n	8003af4 <UsageFault_Handler+0x4>

08003af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003b08:	2020      	movs	r0, #32
 8003b0a:	f001 fd33 	bl	8005574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003b0e:	2040      	movs	r0, #64	; 0x40
 8003b10:	f001 fd30 	bl	8005574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003b14:	2080      	movs	r0, #128	; 0x80
 8003b16:	f001 fd2d 	bl	8005574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003b1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b1e:	f001 fd29 	bl	8005574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <USART1_IRQHandler+0x10>)
 8003b2e:	f005 f99f 	bl	8008e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200010c4 	.word	0x200010c4

08003b3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8003b40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003b44:	f001 fd16 	bl	8005574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003b48:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b4c:	f001 fd12 	bl	8005574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8003b50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b54:	f001 fd0e 	bl	8005574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003b58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b5c:	f001 fd0a 	bl	8005574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8003b60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b64:	f001 fd06 	bl	8005574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003b68:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003b6c:	f001 fd02 	bl	8005574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b70:	bf00      	nop
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b78:	4802      	ldr	r0, [pc, #8]	; (8003b84 <TIM6_DAC_IRQHandler+0x10>)
 8003b7a:	f004 feb7 	bl	80088ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20001284 	.word	0x20001284

08003b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b90:	4a14      	ldr	r2, [pc, #80]	; (8003be4 <_sbrk+0x5c>)
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <_sbrk+0x60>)
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b9c:	4b13      	ldr	r3, [pc, #76]	; (8003bec <_sbrk+0x64>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ba4:	4b11      	ldr	r3, [pc, #68]	; (8003bec <_sbrk+0x64>)
 8003ba6:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <_sbrk+0x68>)
 8003ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003baa:	4b10      	ldr	r3, [pc, #64]	; (8003bec <_sbrk+0x64>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d207      	bcs.n	8003bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bb8:	f006 fe10 	bl	800a7dc <__errno>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc6:	e009      	b.n	8003bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bc8:	4b08      	ldr	r3, [pc, #32]	; (8003bec <_sbrk+0x64>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bce:	4b07      	ldr	r3, [pc, #28]	; (8003bec <_sbrk+0x64>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	4a05      	ldr	r2, [pc, #20]	; (8003bec <_sbrk+0x64>)
 8003bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bda:	68fb      	ldr	r3, [r7, #12]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	200a0000 	.word	0x200a0000
 8003be8:	00000400 	.word	0x00000400
 8003bec:	200012d0 	.word	0x200012d0
 8003bf0:	200014a0 	.word	0x200014a0

08003bf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <SystemInit+0x20>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	4a05      	ldr	r2, [pc, #20]	; (8003c14 <SystemInit+0x20>)
 8003c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c1c:	f7ff ffea 	bl	8003bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c20:	480c      	ldr	r0, [pc, #48]	; (8003c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c22:	490d      	ldr	r1, [pc, #52]	; (8003c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c24:	4a0d      	ldr	r2, [pc, #52]	; (8003c5c <LoopForever+0xe>)
  movs r3, #0
 8003c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c28:	e002      	b.n	8003c30 <LoopCopyDataInit>

08003c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c2e:	3304      	adds	r3, #4

08003c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c34:	d3f9      	bcc.n	8003c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c36:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c38:	4c0a      	ldr	r4, [pc, #40]	; (8003c64 <LoopForever+0x16>)
  movs r3, #0
 8003c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c3c:	e001      	b.n	8003c42 <LoopFillZerobss>

08003c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c40:	3204      	adds	r2, #4

08003c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c44:	d3fb      	bcc.n	8003c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c46:	f006 fdcf 	bl	800a7e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c4a:	f7fe faa3 	bl	8002194 <main>

08003c4e <LoopForever>:

LoopForever:
    b LoopForever
 8003c4e:	e7fe      	b.n	8003c4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003c50:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c58:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8003c5c:	0800c200 	.word	0x0800c200
  ldr r2, =_sbss
 8003c60:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003c64:	2000149c 	.word	0x2000149c

08003c68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c68:	e7fe      	b.n	8003c68 <ADC1_IRQHandler>

08003c6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c74:	2003      	movs	r0, #3
 8003c76:	f000 ffe4 	bl	8004c42 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c7a:	200f      	movs	r0, #15
 8003c7c:	f7ff feb2 	bl	80039e4 <HAL_InitTick>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	71fb      	strb	r3, [r7, #7]
 8003c8a:	e001      	b.n	8003c90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c8c:	f7ff faf0 	bl	8003270 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c90:	79fb      	ldrb	r3, [r7, #7]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_IncTick+0x20>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <HAL_IncTick+0x24>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	4a04      	ldr	r2, [pc, #16]	; (8003cc0 <HAL_IncTick+0x24>)
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000010 	.word	0x20000010
 8003cc0:	200012d4 	.word	0x200012d4

08003cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cc8:	4b03      	ldr	r3, [pc, #12]	; (8003cd8 <HAL_GetTick+0x14>)
 8003cca:	681b      	ldr	r3, [r3, #0]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	200012d4 	.word	0x200012d4

08003cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ce4:	f7ff ffee 	bl	8003cc4 <HAL_GetTick>
 8003ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d005      	beq.n	8003d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <HAL_Delay+0x44>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d02:	bf00      	nop
 8003d04:	f7ff ffde 	bl	8003cc4 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d8f7      	bhi.n	8003d04 <HAL_Delay+0x28>
  {
  }
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000010 	.word	0x20000010

08003d24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	609a      	str	r2, [r3, #8]
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3360      	adds	r3, #96	; 0x60
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <LL_ADC_SetOffset+0x44>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003dc4:	bf00      	nop
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	03fff000 	.word	0x03fff000

08003dd4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3360      	adds	r3, #96	; 0x60
 8003de2:	461a      	mov	r2, r3
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3360      	adds	r3, #96	; 0x60
 8003e10:	461a      	mov	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	615a      	str	r2, [r3, #20]
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3330      	adds	r3, #48	; 0x30
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	0a1b      	lsrs	r3, r3, #8
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	f003 030c 	and.w	r3, r3, #12
 8003e78:	4413      	add	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	211f      	movs	r1, #31
 8003e88:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	401a      	ands	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	0e9b      	lsrs	r3, r3, #26
 8003e94:	f003 011f 	and.w	r1, r3, #31
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ea8:	bf00      	nop
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3314      	adds	r3, #20
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	0e5b      	lsrs	r3, r3, #25
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	4413      	add	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	0d1b      	lsrs	r3, r3, #20
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	2107      	movs	r1, #7
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	401a      	ands	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	0d1b      	lsrs	r3, r3, #20
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003efe:	bf00      	nop
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f24:	43db      	mvns	r3, r3
 8003f26:	401a      	ands	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f003 0318 	and.w	r3, r3, #24
 8003f2e:	4908      	ldr	r1, [pc, #32]	; (8003f50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f30:	40d9      	lsrs	r1, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	400b      	ands	r3, r1
 8003f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	0007ffff 	.word	0x0007ffff

08003f54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003f64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6093      	str	r3, [r2, #8]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f8c:	d101      	bne.n	8003f92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003fb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fdc:	d101      	bne.n	8003fe2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <LL_ADC_IsEnabled+0x18>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <LL_ADC_IsEnabled+0x1a>
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b04      	cmp	r3, #4
 8004028:	d101      	bne.n	800402e <LL_ADC_REG_IsConversionOngoing+0x18>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b08      	cmp	r3, #8
 800404e:	d101      	bne.n	8004054 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e129      	b.n	80042d2 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004088:	2b00      	cmp	r3, #0
 800408a:	d109      	bne.n	80040a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff f913 	bl	80032b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff67 	bl	8003f78 <LL_ADC_IsDeepPowerDownEnabled>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d004      	beq.n	80040ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff ff4d 	bl	8003f54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff ff82 	bl	8003fc8 <LL_ADC_IsInternalRegulatorEnabled>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d115      	bne.n	80040f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff ff66 	bl	8003fa0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040d4:	4b81      	ldr	r3, [pc, #516]	; (80042dc <HAL_ADC_Init+0x278>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	099b      	lsrs	r3, r3, #6
 80040da:	4a81      	ldr	r2, [pc, #516]	; (80042e0 <HAL_ADC_Init+0x27c>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	099b      	lsrs	r3, r3, #6
 80040e2:	3301      	adds	r3, #1
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80040e8:	e002      	b.n	80040f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f9      	bne.n	80040ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff ff64 	bl	8003fc8 <LL_ADC_IsInternalRegulatorEnabled>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10d      	bne.n	8004122 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	f043 0210 	orr.w	r2, r3, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004116:	f043 0201 	orr.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff ff75 	bl	8004016 <LL_ADC_REG_IsConversionOngoing>
 800412c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b00      	cmp	r3, #0
 8004138:	f040 80c2 	bne.w	80042c0 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 80be 	bne.w	80042c0 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004148:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800414c:	f043 0202 	orr.w	r2, r3, #2
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff ff49 	bl	8003ff0 <LL_ADC_IsEnabled>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10b      	bne.n	800417c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004164:	485f      	ldr	r0, [pc, #380]	; (80042e4 <HAL_ADC_Init+0x280>)
 8004166:	f7ff ff43 	bl	8003ff0 <LL_ADC_IsEnabled>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d105      	bne.n	800417c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4619      	mov	r1, r3
 8004176:	485c      	ldr	r0, [pc, #368]	; (80042e8 <HAL_ADC_Init+0x284>)
 8004178:	f7ff fdd4 	bl	8003d24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	7e5b      	ldrb	r3, [r3, #25]
 8004180:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004186:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800418c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004192:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800419a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800419c:	4313      	orrs	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d106      	bne.n	80041b8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	3b01      	subs	r3, #1
 80041b0:	045b      	lsls	r3, r3, #17
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d009      	beq.n	80041d4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	4b44      	ldr	r3, [pc, #272]	; (80042ec <HAL_ADC_Init+0x288>)
 80041dc:	4013      	ands	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	69b9      	ldr	r1, [r7, #24]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff ff25 	bl	800403c <LL_ADC_INJ_IsConversionOngoing>
 80041f2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d140      	bne.n	800427c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d13d      	bne.n	800427c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	7e1b      	ldrb	r3, [r3, #24]
 8004208:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800420a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004212:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004214:	4313      	orrs	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004222:	f023 0306 	bic.w	r3, r3, #6
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	69b9      	ldr	r1, [r7, #24]
 800422c:	430b      	orrs	r3, r1
 800422e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004236:	2b01      	cmp	r3, #1
 8004238:	d118      	bne.n	800426c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004244:	f023 0304 	bic.w	r3, r3, #4
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004250:	4311      	orrs	r1, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004256:	4311      	orrs	r1, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800425c:	430a      	orrs	r2, r1
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	611a      	str	r2, [r3, #16]
 800426a:	e007      	b.n	800427c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d10c      	bne.n	800429e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	f023 010f 	bic.w	r1, r3, #15
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	1e5a      	subs	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	631a      	str	r2, [r3, #48]	; 0x30
 800429c:	e007      	b.n	80042ae <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 020f 	bic.w	r2, r2, #15
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	f043 0201 	orr.w	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	659a      	str	r2, [r3, #88]	; 0x58
 80042be:	e007      	b.n	80042d0 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	f043 0210 	orr.w	r2, r3, #16
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80042d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000008 	.word	0x20000008
 80042e0:	053e2d63 	.word	0x053e2d63
 80042e4:	50040000 	.word	0x50040000
 80042e8:	50040300 	.word	0x50040300
 80042ec:	fff0c007 	.word	0xfff0c007

080042f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b0b6      	sub	sp, #216	; 0xd8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004300:	2300      	movs	r3, #0
 8004302:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x22>
 800430e:	2302      	movs	r3, #2
 8004310:	e3d5      	b.n	8004abe <HAL_ADC_ConfigChannel+0x7ce>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fe79 	bl	8004016 <LL_ADC_REG_IsConversionOngoing>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 83ba 	bne.w	8004aa0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b05      	cmp	r3, #5
 800433a:	d824      	bhi.n	8004386 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	3b02      	subs	r3, #2
 8004342:	2b03      	cmp	r3, #3
 8004344:	d81b      	bhi.n	800437e <HAL_ADC_ConfigChannel+0x8e>
 8004346:	a201      	add	r2, pc, #4	; (adr r2, 800434c <HAL_ADC_ConfigChannel+0x5c>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	0800435d 	.word	0x0800435d
 8004350:	08004365 	.word	0x08004365
 8004354:	0800436d 	.word	0x0800436d
 8004358:	08004375 	.word	0x08004375
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800435c:	230c      	movs	r3, #12
 800435e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004362:	e010      	b.n	8004386 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004364:	2312      	movs	r3, #18
 8004366:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800436a:	e00c      	b.n	8004386 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800436c:	2318      	movs	r3, #24
 800436e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004372:	e008      	b.n	8004386 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800437c:	e003      	b.n	8004386 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800437e:	2306      	movs	r3, #6
 8004380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004384:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004394:	f7ff fd62 	bl	8003e5c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fe3a 	bl	8004016 <LL_ADC_REG_IsConversionOngoing>
 80043a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fe46 	bl	800403c <LL_ADC_INJ_IsConversionOngoing>
 80043b0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f040 81bf 	bne.w	800473c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f040 81ba 	bne.w	800473c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d0:	d10f      	bne.n	80043f2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2200      	movs	r2, #0
 80043dc:	4619      	mov	r1, r3
 80043de:	f7ff fd69 	bl	8003eb4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fd23 	bl	8003e36 <LL_ADC_SetSamplingTimeCommonConfig>
 80043f0:	e00e      	b.n	8004410 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	461a      	mov	r2, r3
 8004400:	f7ff fd58 	bl	8003eb4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2100      	movs	r1, #0
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fd13 	bl	8003e36 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	08db      	lsrs	r3, r3, #3
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b04      	cmp	r3, #4
 8004430:	d00a      	beq.n	8004448 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6919      	ldr	r1, [r3, #16]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004442:	f7ff fca3 	bl	8003d8c <LL_ADC_SetOffset>
 8004446:	e179      	b.n	800473c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fcc0 	bl	8003dd4 <LL_ADC_GetOffsetChannel>
 8004454:	4603      	mov	r3, r0
 8004456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x184>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2100      	movs	r1, #0
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff fcb5 	bl	8003dd4 <LL_ADC_GetOffsetChannel>
 800446a:	4603      	mov	r3, r0
 800446c:	0e9b      	lsrs	r3, r3, #26
 800446e:	f003 021f 	and.w	r2, r3, #31
 8004472:	e01e      	b.n	80044b2 <HAL_ADC_ConfigChannel+0x1c2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2100      	movs	r1, #0
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff fcaa 	bl	8003dd4 <LL_ADC_GetOffsetChannel>
 8004480:	4603      	mov	r3, r0
 8004482:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800448a:	fa93 f3a3 	rbit	r3, r3
 800448e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004492:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004496:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800449a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80044a2:	2320      	movs	r3, #32
 80044a4:	e004      	b.n	80044b0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80044a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044aa:	fab3 f383 	clz	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d105      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x1da>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	0e9b      	lsrs	r3, r3, #26
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	e018      	b.n	80044fc <HAL_ADC_ConfigChannel+0x20c>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044d6:	fa93 f3a3 	rbit	r3, r3
 80044da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80044de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80044e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80044ee:	2320      	movs	r3, #32
 80044f0:	e004      	b.n	80044fc <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80044f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044f6:	fab3 f383 	clz	r3, r3
 80044fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d106      	bne.n	800450e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2200      	movs	r2, #0
 8004506:	2100      	movs	r1, #0
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fc79 	bl	8003e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2101      	movs	r1, #1
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fc5d 	bl	8003dd4 <LL_ADC_GetOffsetChannel>
 800451a:	4603      	mov	r3, r0
 800451c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <HAL_ADC_ConfigChannel+0x24a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2101      	movs	r1, #1
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fc52 	bl	8003dd4 <LL_ADC_GetOffsetChannel>
 8004530:	4603      	mov	r3, r0
 8004532:	0e9b      	lsrs	r3, r3, #26
 8004534:	f003 021f 	and.w	r2, r3, #31
 8004538:	e01e      	b.n	8004578 <HAL_ADC_ConfigChannel+0x288>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2101      	movs	r1, #1
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fc47 	bl	8003dd4 <LL_ADC_GetOffsetChannel>
 8004546:	4603      	mov	r3, r0
 8004548:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800455c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004560:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004568:	2320      	movs	r3, #32
 800456a:	e004      	b.n	8004576 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800456c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004570:	fab3 f383 	clz	r3, r3
 8004574:	b2db      	uxtb	r3, r3
 8004576:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x2a0>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	0e9b      	lsrs	r3, r3, #26
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	e018      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x2d2>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004598:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800459c:	fa93 f3a3 	rbit	r3, r3
 80045a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80045a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80045ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80045b4:	2320      	movs	r3, #32
 80045b6:	e004      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80045b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045bc:	fab3 f383 	clz	r3, r3
 80045c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d106      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2101      	movs	r1, #1
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff fc16 	bl	8003e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2102      	movs	r1, #2
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fbfa 	bl	8003dd4 <LL_ADC_GetOffsetChannel>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10a      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x310>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2102      	movs	r1, #2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fbef 	bl	8003dd4 <LL_ADC_GetOffsetChannel>
 80045f6:	4603      	mov	r3, r0
 80045f8:	0e9b      	lsrs	r3, r3, #26
 80045fa:	f003 021f 	and.w	r2, r3, #31
 80045fe:	e01e      	b.n	800463e <HAL_ADC_ConfigChannel+0x34e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2102      	movs	r1, #2
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fbe4 	bl	8003dd4 <LL_ADC_GetOffsetChannel>
 800460c:	4603      	mov	r3, r0
 800460e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004616:	fa93 f3a3 	rbit	r3, r3
 800461a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800461e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800462e:	2320      	movs	r3, #32
 8004630:	e004      	b.n	800463c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004636:	fab3 f383 	clz	r3, r3
 800463a:	b2db      	uxtb	r3, r3
 800463c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004646:	2b00      	cmp	r3, #0
 8004648:	d105      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x366>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	0e9b      	lsrs	r3, r3, #26
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	e014      	b.n	8004680 <HAL_ADC_ConfigChannel+0x390>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800466a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004672:	2320      	movs	r3, #32
 8004674:	e004      	b.n	8004680 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8004676:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004680:	429a      	cmp	r2, r3
 8004682:	d106      	bne.n	8004692 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2200      	movs	r2, #0
 800468a:	2102      	movs	r1, #2
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fbb7 	bl	8003e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2103      	movs	r1, #3
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff fb9b 	bl	8003dd4 <LL_ADC_GetOffsetChannel>
 800469e:	4603      	mov	r3, r0
 80046a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10a      	bne.n	80046be <HAL_ADC_ConfigChannel+0x3ce>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2103      	movs	r1, #3
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fb90 	bl	8003dd4 <LL_ADC_GetOffsetChannel>
 80046b4:	4603      	mov	r3, r0
 80046b6:	0e9b      	lsrs	r3, r3, #26
 80046b8:	f003 021f 	and.w	r2, r3, #31
 80046bc:	e017      	b.n	80046ee <HAL_ADC_ConfigChannel+0x3fe>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2103      	movs	r1, #3
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fb85 	bl	8003dd4 <LL_ADC_GetOffsetChannel>
 80046ca:	4603      	mov	r3, r0
 80046cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046d0:	fa93 f3a3 	rbit	r3, r3
 80046d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80046d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d8:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80046da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80046e0:	2320      	movs	r3, #32
 80046e2:	e003      	b.n	80046ec <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80046e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e6:	fab3 f383 	clz	r3, r3
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d105      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x416>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	0e9b      	lsrs	r3, r3, #26
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	e011      	b.n	800472a <HAL_ADC_ConfigChannel+0x43a>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800470e:	fa93 f3a3 	rbit	r3, r3
 8004712:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004714:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004716:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004718:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800471e:	2320      	movs	r3, #32
 8004720:	e003      	b.n	800472a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004722:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004724:	fab3 f383 	clz	r3, r3
 8004728:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800472a:	429a      	cmp	r2, r3
 800472c:	d106      	bne.n	800473c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2200      	movs	r2, #0
 8004734:	2103      	movs	r1, #3
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fb62 	bl	8003e00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff fc55 	bl	8003ff0 <LL_ADC_IsEnabled>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	f040 813f 	bne.w	80049cc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6819      	ldr	r1, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	461a      	mov	r2, r3
 800475c:	f7ff fbd6 	bl	8003f0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4a8e      	ldr	r2, [pc, #568]	; (80049a0 <HAL_ADC_ConfigChannel+0x6b0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	f040 8130 	bne.w	80049cc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10b      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x4a4>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	0e9b      	lsrs	r3, r3, #26
 8004782:	3301      	adds	r3, #1
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	2b09      	cmp	r3, #9
 800478a:	bf94      	ite	ls
 800478c:	2301      	movls	r3, #1
 800478e:	2300      	movhi	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e019      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x4d8>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800479c:	fa93 f3a3 	rbit	r3, r3
 80047a0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80047a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80047a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80047ac:	2320      	movs	r3, #32
 80047ae:	e003      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80047b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b2:	fab3 f383 	clz	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	3301      	adds	r3, #1
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	2b09      	cmp	r3, #9
 80047c0:	bf94      	ite	ls
 80047c2:	2301      	movls	r3, #1
 80047c4:	2300      	movhi	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d079      	beq.n	80048c0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d107      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x4f8>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	0e9b      	lsrs	r3, r3, #26
 80047de:	3301      	adds	r3, #1
 80047e0:	069b      	lsls	r3, r3, #26
 80047e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047e6:	e015      	b.n	8004814 <HAL_ADC_ConfigChannel+0x524>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f0:	fa93 f3a3 	rbit	r3, r3
 80047f4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80047f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80047fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004800:	2320      	movs	r3, #32
 8004802:	e003      	b.n	800480c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004806:	fab3 f383 	clz	r3, r3
 800480a:	b2db      	uxtb	r3, r3
 800480c:	3301      	adds	r3, #1
 800480e:	069b      	lsls	r3, r3, #26
 8004810:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481c:	2b00      	cmp	r3, #0
 800481e:	d109      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x544>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	0e9b      	lsrs	r3, r3, #26
 8004826:	3301      	adds	r3, #1
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	e017      	b.n	8004864 <HAL_ADC_ConfigChannel+0x574>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004844:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800484c:	2320      	movs	r3, #32
 800484e:	e003      	b.n	8004858 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004852:	fab3 f383 	clz	r3, r3
 8004856:	b2db      	uxtb	r3, r3
 8004858:	3301      	adds	r3, #1
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	2101      	movs	r1, #1
 8004860:	fa01 f303 	lsl.w	r3, r1, r3
 8004864:	ea42 0103 	orr.w	r1, r2, r3
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <HAL_ADC_ConfigChannel+0x59a>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	0e9b      	lsrs	r3, r3, #26
 800487a:	3301      	adds	r3, #1
 800487c:	f003 021f 	and.w	r2, r3, #31
 8004880:	4613      	mov	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4413      	add	r3, r2
 8004886:	051b      	lsls	r3, r3, #20
 8004888:	e018      	b.n	80048bc <HAL_ADC_ConfigChannel+0x5cc>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004892:	fa93 f3a3 	rbit	r3, r3
 8004896:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80048a2:	2320      	movs	r3, #32
 80048a4:	e003      	b.n	80048ae <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80048a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a8:	fab3 f383 	clz	r3, r3
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	3301      	adds	r3, #1
 80048b0:	f003 021f 	and.w	r2, r3, #31
 80048b4:	4613      	mov	r3, r2
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	4413      	add	r3, r2
 80048ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048bc:	430b      	orrs	r3, r1
 80048be:	e080      	b.n	80049c2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d107      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x5ec>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	0e9b      	lsrs	r3, r3, #26
 80048d2:	3301      	adds	r3, #1
 80048d4:	069b      	lsls	r3, r3, #26
 80048d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048da:	e015      	b.n	8004908 <HAL_ADC_ConfigChannel+0x618>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	fa93 f3a3 	rbit	r3, r3
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80048f4:	2320      	movs	r3, #32
 80048f6:	e003      	b.n	8004900 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80048f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fa:	fab3 f383 	clz	r3, r3
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	3301      	adds	r3, #1
 8004902:	069b      	lsls	r3, r3, #26
 8004904:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <HAL_ADC_ConfigChannel+0x638>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	0e9b      	lsrs	r3, r3, #26
 800491a:	3301      	adds	r3, #1
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	2101      	movs	r1, #1
 8004922:	fa01 f303 	lsl.w	r3, r1, r3
 8004926:	e017      	b.n	8004958 <HAL_ADC_ConfigChannel+0x668>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	fa93 f3a3 	rbit	r3, r3
 8004934:	61bb      	str	r3, [r7, #24]
  return result;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004940:	2320      	movs	r3, #32
 8004942:	e003      	b.n	800494c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	fab3 f383 	clz	r3, r3
 800494a:	b2db      	uxtb	r3, r3
 800494c:	3301      	adds	r3, #1
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	2101      	movs	r1, #1
 8004954:	fa01 f303 	lsl.w	r3, r1, r3
 8004958:	ea42 0103 	orr.w	r1, r2, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10d      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x694>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	0e9b      	lsrs	r3, r3, #26
 800496e:	3301      	adds	r3, #1
 8004970:	f003 021f 	and.w	r2, r3, #31
 8004974:	4613      	mov	r3, r2
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	4413      	add	r3, r2
 800497a:	3b1e      	subs	r3, #30
 800497c:	051b      	lsls	r3, r3, #20
 800497e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004982:	e01d      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x6d0>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	fa93 f3a3 	rbit	r3, r3
 8004990:	60fb      	str	r3, [r7, #12]
  return result;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d103      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800499c:	2320      	movs	r3, #32
 800499e:	e005      	b.n	80049ac <HAL_ADC_ConfigChannel+0x6bc>
 80049a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	fab3 f383 	clz	r3, r3
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	3301      	adds	r3, #1
 80049ae:	f003 021f 	and.w	r2, r3, #31
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	3b1e      	subs	r3, #30
 80049ba:	051b      	lsls	r3, r3, #20
 80049bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049c0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049c6:	4619      	mov	r1, r3
 80049c8:	f7ff fa74 	bl	8003eb4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4b3d      	ldr	r3, [pc, #244]	; (8004ac8 <HAL_ADC_ConfigChannel+0x7d8>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d06c      	beq.n	8004ab2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049d8:	483c      	ldr	r0, [pc, #240]	; (8004acc <HAL_ADC_ConfigChannel+0x7dc>)
 80049da:	f7ff f9c9 	bl	8003d70 <LL_ADC_GetCommonPathInternalCh>
 80049de:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a3a      	ldr	r2, [pc, #232]	; (8004ad0 <HAL_ADC_ConfigChannel+0x7e0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d127      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d121      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a35      	ldr	r2, [pc, #212]	; (8004ad4 <HAL_ADC_ConfigChannel+0x7e4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d157      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	482f      	ldr	r0, [pc, #188]	; (8004acc <HAL_ADC_ConfigChannel+0x7dc>)
 8004a0e:	f7ff f99c 	bl	8003d4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a12:	4b31      	ldr	r3, [pc, #196]	; (8004ad8 <HAL_ADC_ConfigChannel+0x7e8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	099b      	lsrs	r3, r3, #6
 8004a18:	4a30      	ldr	r2, [pc, #192]	; (8004adc <HAL_ADC_ConfigChannel+0x7ec>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	099b      	lsrs	r3, r3, #6
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	4613      	mov	r3, r2
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004a2c:	e002      	b.n	8004a34 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f9      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a3a:	e03a      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <HAL_ADC_ConfigChannel+0x7f0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d113      	bne.n	8004a6e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10d      	bne.n	8004a6e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1f      	ldr	r2, [pc, #124]	; (8004ad4 <HAL_ADC_ConfigChannel+0x7e4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d12a      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a64:	4619      	mov	r1, r3
 8004a66:	4819      	ldr	r0, [pc, #100]	; (8004acc <HAL_ADC_ConfigChannel+0x7dc>)
 8004a68:	f7ff f96f 	bl	8003d4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a6c:	e021      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1c      	ldr	r2, [pc, #112]	; (8004ae4 <HAL_ADC_ConfigChannel+0x7f4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d11c      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d116      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a12      	ldr	r2, [pc, #72]	; (8004ad4 <HAL_ADC_ConfigChannel+0x7e4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d111      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a96:	4619      	mov	r1, r3
 8004a98:	480c      	ldr	r0, [pc, #48]	; (8004acc <HAL_ADC_ConfigChannel+0x7dc>)
 8004a9a:	f7ff f956 	bl	8003d4a <LL_ADC_SetCommonPathInternalCh>
 8004a9e:	e008      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa4:	f043 0220 	orr.w	r2, r3, #32
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004aba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	37d8      	adds	r7, #216	; 0xd8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	80080000 	.word	0x80080000
 8004acc:	50040300 	.word	0x50040300
 8004ad0:	c7520000 	.word	0xc7520000
 8004ad4:	50040000 	.word	0x50040000
 8004ad8:	20000008 	.word	0x20000008
 8004adc:	053e2d63 	.word	0x053e2d63
 8004ae0:	cb840000 	.word	0xcb840000
 8004ae4:	80000001 	.word	0x80000001

08004ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004af8:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <__NVIC_SetPriorityGrouping+0x44>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b04:	4013      	ands	r3, r2
 8004b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b1a:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <__NVIC_SetPriorityGrouping+0x44>)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	60d3      	str	r3, [r2, #12]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	e000ed00 	.word	0xe000ed00

08004b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b34:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <__NVIC_GetPriorityGrouping+0x18>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	0a1b      	lsrs	r3, r3, #8
 8004b3a:	f003 0307 	and.w	r3, r3, #7
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	e000ed00 	.word	0xe000ed00

08004b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	db0b      	blt.n	8004b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	f003 021f 	and.w	r2, r3, #31
 8004b64:	4907      	ldr	r1, [pc, #28]	; (8004b84 <__NVIC_EnableIRQ+0x38>)
 8004b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	2001      	movs	r0, #1
 8004b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	e000e100 	.word	0xe000e100

08004b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	db0a      	blt.n	8004bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	490c      	ldr	r1, [pc, #48]	; (8004bd4 <__NVIC_SetPriority+0x4c>)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	0112      	lsls	r2, r2, #4
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	440b      	add	r3, r1
 8004bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bb0:	e00a      	b.n	8004bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	4908      	ldr	r1, [pc, #32]	; (8004bd8 <__NVIC_SetPriority+0x50>)
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	3b04      	subs	r3, #4
 8004bc0:	0112      	lsls	r2, r2, #4
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	761a      	strb	r2, [r3, #24]
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	e000e100 	.word	0xe000e100
 8004bd8:	e000ed00 	.word	0xe000ed00

08004bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b089      	sub	sp, #36	; 0x24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f1c3 0307 	rsb	r3, r3, #7
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	bf28      	it	cs
 8004bfa:	2304      	movcs	r3, #4
 8004bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	3304      	adds	r3, #4
 8004c02:	2b06      	cmp	r3, #6
 8004c04:	d902      	bls.n	8004c0c <NVIC_EncodePriority+0x30>
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3b03      	subs	r3, #3
 8004c0a:	e000      	b.n	8004c0e <NVIC_EncodePriority+0x32>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c10:	f04f 32ff 	mov.w	r2, #4294967295
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	43da      	mvns	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	401a      	ands	r2, r3
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c24:	f04f 31ff 	mov.w	r1, #4294967295
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2e:	43d9      	mvns	r1, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c34:	4313      	orrs	r3, r2
         );
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3724      	adds	r7, #36	; 0x24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff ff4c 	bl	8004ae8 <__NVIC_SetPriorityGrouping>
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c6a:	f7ff ff61 	bl	8004b30 <__NVIC_GetPriorityGrouping>
 8004c6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	6978      	ldr	r0, [r7, #20]
 8004c76:	f7ff ffb1 	bl	8004bdc <NVIC_EncodePriority>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c80:	4611      	mov	r1, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff ff80 	bl	8004b88 <__NVIC_SetPriority>
}
 8004c88:	bf00      	nop
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff ff54 	bl	8004b4c <__NVIC_EnableIRQ>
}
 8004ca4:	bf00      	nop
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e0ac      	b.n	8004e18 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 f8b2 	bl	8004e2c <DFSDM_GetChannelFromInstance>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4a55      	ldr	r2, [pc, #340]	; (8004e20 <HAL_DFSDM_ChannelInit+0x174>)
 8004ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e09f      	b.n	8004e18 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7fe fb2d 	bl	8003338 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004cde:	4b51      	ldr	r3, [pc, #324]	; (8004e24 <HAL_DFSDM_ChannelInit+0x178>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	4a4f      	ldr	r2, [pc, #316]	; (8004e24 <HAL_DFSDM_ChannelInit+0x178>)
 8004ce6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004ce8:	4b4e      	ldr	r3, [pc, #312]	; (8004e24 <HAL_DFSDM_ChannelInit+0x178>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d125      	bne.n	8004d3c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004cf0:	4b4d      	ldr	r3, [pc, #308]	; (8004e28 <HAL_DFSDM_ChannelInit+0x17c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a4c      	ldr	r2, [pc, #304]	; (8004e28 <HAL_DFSDM_ChannelInit+0x17c>)
 8004cf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cfa:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004cfc:	4b4a      	ldr	r3, [pc, #296]	; (8004e28 <HAL_DFSDM_ChannelInit+0x17c>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	4948      	ldr	r1, [pc, #288]	; (8004e28 <HAL_DFSDM_ChannelInit+0x17c>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004d0a:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <HAL_DFSDM_ChannelInit+0x17c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a46      	ldr	r2, [pc, #280]	; (8004e28 <HAL_DFSDM_ChannelInit+0x17c>)
 8004d10:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004d14:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	791b      	ldrb	r3, [r3, #4]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d108      	bne.n	8004d30 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004d1e:	4b42      	ldr	r3, [pc, #264]	; (8004e28 <HAL_DFSDM_ChannelInit+0x17c>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	041b      	lsls	r3, r3, #16
 8004d2a:	493f      	ldr	r1, [pc, #252]	; (8004e28 <HAL_DFSDM_ChannelInit+0x17c>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004d30:	4b3d      	ldr	r3, [pc, #244]	; (8004e28 <HAL_DFSDM_ChannelInit+0x17c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a3c      	ldr	r2, [pc, #240]	; (8004e28 <HAL_DFSDM_ChannelInit+0x17c>)
 8004d36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d3a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004d4a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6819      	ldr	r1, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004d5a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004d60:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 020f 	bic.w	r2, r2, #15
 8004d78:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004da0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6899      	ldr	r1, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	3b01      	subs	r3, #1
 8004db2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f002 0207 	and.w	r2, r2, #7
 8004dcc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6859      	ldr	r1, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004df8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 f810 	bl	8004e2c <DFSDM_GetChannelFromInstance>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	4904      	ldr	r1, [pc, #16]	; (8004e20 <HAL_DFSDM_ChannelInit+0x174>)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	200012dc 	.word	0x200012dc
 8004e24:	200012d8 	.word	0x200012d8
 8004e28:	40016000 	.word	0x40016000

08004e2c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <DFSDM_GetChannelFromInstance+0x7c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d102      	bne.n	8004e42 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	e02b      	b.n	8004e9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a19      	ldr	r2, [pc, #100]	; (8004eac <DFSDM_GetChannelFromInstance+0x80>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d102      	bne.n	8004e50 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	e024      	b.n	8004e9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <DFSDM_GetChannelFromInstance+0x84>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d102      	bne.n	8004e5e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004e58:	2302      	movs	r3, #2
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	e01d      	b.n	8004e9a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <DFSDM_GetChannelFromInstance+0x88>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d102      	bne.n	8004e6c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004e66:	2304      	movs	r3, #4
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e016      	b.n	8004e9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a12      	ldr	r2, [pc, #72]	; (8004eb8 <DFSDM_GetChannelFromInstance+0x8c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d102      	bne.n	8004e7a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004e74:	2305      	movs	r3, #5
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e00f      	b.n	8004e9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a0f      	ldr	r2, [pc, #60]	; (8004ebc <DFSDM_GetChannelFromInstance+0x90>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d102      	bne.n	8004e88 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004e82:	2306      	movs	r3, #6
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	e008      	b.n	8004e9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a0d      	ldr	r2, [pc, #52]	; (8004ec0 <DFSDM_GetChannelFromInstance+0x94>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d102      	bne.n	8004e96 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004e90:	2307      	movs	r3, #7
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	e001      	b.n	8004e9a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004e96:	2303      	movs	r3, #3
 8004e98:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	40016000 	.word	0x40016000
 8004eac:	40016020 	.word	0x40016020
 8004eb0:	40016040 	.word	0x40016040
 8004eb4:	40016080 	.word	0x40016080
 8004eb8:	400160a0 	.word	0x400160a0
 8004ebc:	400160c0 	.word	0x400160c0
 8004ec0:	400160e0 	.word	0x400160e0

08004ec4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d008      	beq.n	8004eee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2204      	movs	r2, #4
 8004ee0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e040      	b.n	8004f70 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 020e 	bic.w	r2, r2, #14
 8004efc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f0c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f22:	f003 021c 	and.w	r2, r3, #28
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f30:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f3a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00c      	beq.n	8004f5e <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f5c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d005      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2204      	movs	r2, #4
 8004f98:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	73fb      	strb	r3, [r7, #15]
 8004f9e:	e047      	b.n	8005030 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 020e 	bic.w	r2, r2, #14
 8004fae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0201 	bic.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd4:	f003 021c 	and.w	r2, r3, #28
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	2101      	movs	r1, #1
 8004fde:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005004:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800500e:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	4798      	blx	r3
    }
  }
  return status;
 8005030:	7bfb      	ldrb	r3, [r7, #15]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800504a:	e166      	b.n	800531a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	2101      	movs	r1, #1
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	fa01 f303 	lsl.w	r3, r1, r3
 8005058:	4013      	ands	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 8158 	beq.w	8005314 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	2b01      	cmp	r3, #1
 800506e:	d005      	beq.n	800507c <HAL_GPIO_Init+0x40>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d130      	bne.n	80050de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	2203      	movs	r2, #3
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4013      	ands	r3, r2
 8005092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050b2:	2201      	movs	r2, #1
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43db      	mvns	r3, r3
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4013      	ands	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	091b      	lsrs	r3, r3, #4
 80050c8:	f003 0201 	and.w	r2, r3, #1
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d017      	beq.n	800511a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	2203      	movs	r2, #3
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	43db      	mvns	r3, r3
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4013      	ands	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d123      	bne.n	800516e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	08da      	lsrs	r2, r3, #3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3208      	adds	r2, #8
 800512e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	220f      	movs	r2, #15
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4013      	ands	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	08da      	lsrs	r2, r3, #3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3208      	adds	r2, #8
 8005168:	6939      	ldr	r1, [r7, #16]
 800516a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	2203      	movs	r2, #3
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4013      	ands	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f003 0203 	and.w	r2, r3, #3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80b2 	beq.w	8005314 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051b0:	4b61      	ldr	r3, [pc, #388]	; (8005338 <HAL_GPIO_Init+0x2fc>)
 80051b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b4:	4a60      	ldr	r2, [pc, #384]	; (8005338 <HAL_GPIO_Init+0x2fc>)
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	6613      	str	r3, [r2, #96]	; 0x60
 80051bc:	4b5e      	ldr	r3, [pc, #376]	; (8005338 <HAL_GPIO_Init+0x2fc>)
 80051be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80051c8:	4a5c      	ldr	r2, [pc, #368]	; (800533c <HAL_GPIO_Init+0x300>)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	089b      	lsrs	r3, r3, #2
 80051ce:	3302      	adds	r3, #2
 80051d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	220f      	movs	r2, #15
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	43db      	mvns	r3, r3
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4013      	ands	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80051f2:	d02b      	beq.n	800524c <HAL_GPIO_Init+0x210>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a52      	ldr	r2, [pc, #328]	; (8005340 <HAL_GPIO_Init+0x304>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d025      	beq.n	8005248 <HAL_GPIO_Init+0x20c>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a51      	ldr	r2, [pc, #324]	; (8005344 <HAL_GPIO_Init+0x308>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d01f      	beq.n	8005244 <HAL_GPIO_Init+0x208>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a50      	ldr	r2, [pc, #320]	; (8005348 <HAL_GPIO_Init+0x30c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d019      	beq.n	8005240 <HAL_GPIO_Init+0x204>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a4f      	ldr	r2, [pc, #316]	; (800534c <HAL_GPIO_Init+0x310>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <HAL_GPIO_Init+0x200>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a4e      	ldr	r2, [pc, #312]	; (8005350 <HAL_GPIO_Init+0x314>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00d      	beq.n	8005238 <HAL_GPIO_Init+0x1fc>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a4d      	ldr	r2, [pc, #308]	; (8005354 <HAL_GPIO_Init+0x318>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <HAL_GPIO_Init+0x1f8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a4c      	ldr	r2, [pc, #304]	; (8005358 <HAL_GPIO_Init+0x31c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d101      	bne.n	8005230 <HAL_GPIO_Init+0x1f4>
 800522c:	2307      	movs	r3, #7
 800522e:	e00e      	b.n	800524e <HAL_GPIO_Init+0x212>
 8005230:	2308      	movs	r3, #8
 8005232:	e00c      	b.n	800524e <HAL_GPIO_Init+0x212>
 8005234:	2306      	movs	r3, #6
 8005236:	e00a      	b.n	800524e <HAL_GPIO_Init+0x212>
 8005238:	2305      	movs	r3, #5
 800523a:	e008      	b.n	800524e <HAL_GPIO_Init+0x212>
 800523c:	2304      	movs	r3, #4
 800523e:	e006      	b.n	800524e <HAL_GPIO_Init+0x212>
 8005240:	2303      	movs	r3, #3
 8005242:	e004      	b.n	800524e <HAL_GPIO_Init+0x212>
 8005244:	2302      	movs	r3, #2
 8005246:	e002      	b.n	800524e <HAL_GPIO_Init+0x212>
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <HAL_GPIO_Init+0x212>
 800524c:	2300      	movs	r3, #0
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	f002 0203 	and.w	r2, r2, #3
 8005254:	0092      	lsls	r2, r2, #2
 8005256:	4093      	lsls	r3, r2
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800525e:	4937      	ldr	r1, [pc, #220]	; (800533c <HAL_GPIO_Init+0x300>)
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	089b      	lsrs	r3, r3, #2
 8005264:	3302      	adds	r3, #2
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800526c:	4b3b      	ldr	r3, [pc, #236]	; (800535c <HAL_GPIO_Init+0x320>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	43db      	mvns	r3, r3
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4013      	ands	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005290:	4a32      	ldr	r2, [pc, #200]	; (800535c <HAL_GPIO_Init+0x320>)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005296:	4b31      	ldr	r3, [pc, #196]	; (800535c <HAL_GPIO_Init+0x320>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	43db      	mvns	r3, r3
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4013      	ands	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052ba:	4a28      	ldr	r2, [pc, #160]	; (800535c <HAL_GPIO_Init+0x320>)
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80052c0:	4b26      	ldr	r3, [pc, #152]	; (800535c <HAL_GPIO_Init+0x320>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	43db      	mvns	r3, r3
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4013      	ands	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80052e4:	4a1d      	ldr	r2, [pc, #116]	; (800535c <HAL_GPIO_Init+0x320>)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80052ea:	4b1c      	ldr	r3, [pc, #112]	; (800535c <HAL_GPIO_Init+0x320>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	43db      	mvns	r3, r3
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4013      	ands	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800530e:	4a13      	ldr	r2, [pc, #76]	; (800535c <HAL_GPIO_Init+0x320>)
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	3301      	adds	r3, #1
 8005318:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	f47f ae91 	bne.w	800504c <HAL_GPIO_Init+0x10>
  }
}
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	40021000 	.word	0x40021000
 800533c:	40010000 	.word	0x40010000
 8005340:	48000400 	.word	0x48000400
 8005344:	48000800 	.word	0x48000800
 8005348:	48000c00 	.word	0x48000c00
 800534c:	48001000 	.word	0x48001000
 8005350:	48001400 	.word	0x48001400
 8005354:	48001800 	.word	0x48001800
 8005358:	48001c00 	.word	0x48001c00
 800535c:	40010400 	.word	0x40010400

08005360 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800536e:	e0c9      	b.n	8005504 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005370:	2201      	movs	r2, #1
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	4013      	ands	r3, r2
 800537c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80bc 	beq.w	80054fe <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005386:	4a66      	ldr	r2, [pc, #408]	; (8005520 <HAL_GPIO_DeInit+0x1c0>)
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	089b      	lsrs	r3, r3, #2
 800538c:	3302      	adds	r3, #2
 800538e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005392:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	220f      	movs	r2, #15
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4013      	ands	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80053ae:	d02b      	beq.n	8005408 <HAL_GPIO_DeInit+0xa8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a5c      	ldr	r2, [pc, #368]	; (8005524 <HAL_GPIO_DeInit+0x1c4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d025      	beq.n	8005404 <HAL_GPIO_DeInit+0xa4>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a5b      	ldr	r2, [pc, #364]	; (8005528 <HAL_GPIO_DeInit+0x1c8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d01f      	beq.n	8005400 <HAL_GPIO_DeInit+0xa0>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a5a      	ldr	r2, [pc, #360]	; (800552c <HAL_GPIO_DeInit+0x1cc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d019      	beq.n	80053fc <HAL_GPIO_DeInit+0x9c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a59      	ldr	r2, [pc, #356]	; (8005530 <HAL_GPIO_DeInit+0x1d0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d013      	beq.n	80053f8 <HAL_GPIO_DeInit+0x98>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a58      	ldr	r2, [pc, #352]	; (8005534 <HAL_GPIO_DeInit+0x1d4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00d      	beq.n	80053f4 <HAL_GPIO_DeInit+0x94>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a57      	ldr	r2, [pc, #348]	; (8005538 <HAL_GPIO_DeInit+0x1d8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <HAL_GPIO_DeInit+0x90>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a56      	ldr	r2, [pc, #344]	; (800553c <HAL_GPIO_DeInit+0x1dc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d101      	bne.n	80053ec <HAL_GPIO_DeInit+0x8c>
 80053e8:	2307      	movs	r3, #7
 80053ea:	e00e      	b.n	800540a <HAL_GPIO_DeInit+0xaa>
 80053ec:	2308      	movs	r3, #8
 80053ee:	e00c      	b.n	800540a <HAL_GPIO_DeInit+0xaa>
 80053f0:	2306      	movs	r3, #6
 80053f2:	e00a      	b.n	800540a <HAL_GPIO_DeInit+0xaa>
 80053f4:	2305      	movs	r3, #5
 80053f6:	e008      	b.n	800540a <HAL_GPIO_DeInit+0xaa>
 80053f8:	2304      	movs	r3, #4
 80053fa:	e006      	b.n	800540a <HAL_GPIO_DeInit+0xaa>
 80053fc:	2303      	movs	r3, #3
 80053fe:	e004      	b.n	800540a <HAL_GPIO_DeInit+0xaa>
 8005400:	2302      	movs	r3, #2
 8005402:	e002      	b.n	800540a <HAL_GPIO_DeInit+0xaa>
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_GPIO_DeInit+0xaa>
 8005408:	2300      	movs	r3, #0
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	f002 0203 	and.w	r2, r2, #3
 8005410:	0092      	lsls	r2, r2, #2
 8005412:	4093      	lsls	r3, r2
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	429a      	cmp	r2, r3
 8005418:	d132      	bne.n	8005480 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800541a:	4b49      	ldr	r3, [pc, #292]	; (8005540 <HAL_GPIO_DeInit+0x1e0>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	43db      	mvns	r3, r3
 8005422:	4947      	ldr	r1, [pc, #284]	; (8005540 <HAL_GPIO_DeInit+0x1e0>)
 8005424:	4013      	ands	r3, r2
 8005426:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005428:	4b45      	ldr	r3, [pc, #276]	; (8005540 <HAL_GPIO_DeInit+0x1e0>)
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	43db      	mvns	r3, r3
 8005430:	4943      	ldr	r1, [pc, #268]	; (8005540 <HAL_GPIO_DeInit+0x1e0>)
 8005432:	4013      	ands	r3, r2
 8005434:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005436:	4b42      	ldr	r3, [pc, #264]	; (8005540 <HAL_GPIO_DeInit+0x1e0>)
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	43db      	mvns	r3, r3
 800543e:	4940      	ldr	r1, [pc, #256]	; (8005540 <HAL_GPIO_DeInit+0x1e0>)
 8005440:	4013      	ands	r3, r2
 8005442:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005444:	4b3e      	ldr	r3, [pc, #248]	; (8005540 <HAL_GPIO_DeInit+0x1e0>)
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	43db      	mvns	r3, r3
 800544c:	493c      	ldr	r1, [pc, #240]	; (8005540 <HAL_GPIO_DeInit+0x1e0>)
 800544e:	4013      	ands	r3, r2
 8005450:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f003 0303 	and.w	r3, r3, #3
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	220f      	movs	r2, #15
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005462:	4a2f      	ldr	r2, [pc, #188]	; (8005520 <HAL_GPIO_DeInit+0x1c0>)
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	089b      	lsrs	r3, r3, #2
 8005468:	3302      	adds	r3, #2
 800546a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	43da      	mvns	r2, r3
 8005472:	482b      	ldr	r0, [pc, #172]	; (8005520 <HAL_GPIO_DeInit+0x1c0>)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	089b      	lsrs	r3, r3, #2
 8005478:	400a      	ands	r2, r1
 800547a:	3302      	adds	r3, #2
 800547c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	2103      	movs	r1, #3
 800548a:	fa01 f303 	lsl.w	r3, r1, r3
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	08da      	lsrs	r2, r3, #3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3208      	adds	r2, #8
 800549c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	220f      	movs	r2, #15
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43db      	mvns	r3, r3
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	08d2      	lsrs	r2, r2, #3
 80054b4:	4019      	ands	r1, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3208      	adds	r2, #8
 80054ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	2103      	movs	r1, #3
 80054c8:	fa01 f303 	lsl.w	r3, r1, r3
 80054cc:	43db      	mvns	r3, r3
 80054ce:	401a      	ands	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	2101      	movs	r1, #1
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	fa01 f303 	lsl.w	r3, r1, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	401a      	ands	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	2103      	movs	r1, #3
 80054f2:	fa01 f303 	lsl.w	r3, r1, r3
 80054f6:	43db      	mvns	r3, r3
 80054f8:	401a      	ands	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	3301      	adds	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	fa22 f303 	lsr.w	r3, r2, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	f47f af2f 	bne.w	8005370 <HAL_GPIO_DeInit+0x10>
  }
}
 8005512:	bf00      	nop
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	40010000 	.word	0x40010000
 8005524:	48000400 	.word	0x48000400
 8005528:	48000800 	.word	0x48000800
 800552c:	48000c00 	.word	0x48000c00
 8005530:	48001000 	.word	0x48001000
 8005534:	48001400 	.word	0x48001400
 8005538:	48001800 	.word	0x48001800
 800553c:	48001c00 	.word	0x48001c00
 8005540:	40010400 	.word	0x40010400

08005544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	807b      	strh	r3, [r7, #2]
 8005550:	4613      	mov	r3, r2
 8005552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005554:	787b      	ldrb	r3, [r7, #1]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800555a:	887a      	ldrh	r2, [r7, #2]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005560:	e002      	b.n	8005568 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005562:	887a      	ldrh	r2, [r7, #2]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800557e:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	4013      	ands	r3, r2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d006      	beq.n	8005598 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800558a:	4a05      	ldr	r2, [pc, #20]	; (80055a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800558c:	88fb      	ldrh	r3, [r7, #6]
 800558e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005590:	88fb      	ldrh	r3, [r7, #6]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f806 	bl	80055a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005598:	bf00      	nop
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40010400 	.word	0x40010400

080055a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e08d      	b.n	80056e8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d106      	bne.n	80055e6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7fd ff0d 	bl	8003400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2224      	movs	r2, #36	; 0x24
 80055ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800560a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800561a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d107      	bne.n	8005634 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005630:	609a      	str	r2, [r3, #8]
 8005632:	e006      	b.n	8005642 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005640:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d108      	bne.n	800565c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005658:	605a      	str	r2, [r3, #4]
 800565a:	e007      	b.n	800566c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800566a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6812      	ldr	r2, [r2, #0]
 8005676:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800567a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800568e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69d9      	ldr	r1, [r3, #28]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1a      	ldr	r2, [r3, #32]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0201 	orr.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e021      	b.n	8005746 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2224      	movs	r2, #36	; 0x24
 8005706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0201 	bic.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fd ff12 	bl	8003544 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af02      	add	r7, sp, #8
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	4608      	mov	r0, r1
 800575a:	4611      	mov	r1, r2
 800575c:	461a      	mov	r2, r3
 800575e:	4603      	mov	r3, r0
 8005760:	817b      	strh	r3, [r7, #10]
 8005762:	460b      	mov	r3, r1
 8005764:	813b      	strh	r3, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b20      	cmp	r3, #32
 8005774:	f040 80f9 	bne.w	800596a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_I2C_Mem_Write+0x34>
 800577e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005780:	2b00      	cmp	r3, #0
 8005782:	d105      	bne.n	8005790 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800578a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0ed      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_I2C_Mem_Write+0x4e>
 800579a:	2302      	movs	r3, #2
 800579c:	e0e6      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057a6:	f7fe fa8d 	bl	8003cc4 <HAL_GetTick>
 80057aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	2319      	movs	r3, #25
 80057b2:	2201      	movs	r2, #1
 80057b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 fac3 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0d1      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2221      	movs	r2, #33	; 0x21
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2240      	movs	r2, #64	; 0x40
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a3a      	ldr	r2, [r7, #32]
 80057e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057f0:	88f8      	ldrh	r0, [r7, #6]
 80057f2:	893a      	ldrh	r2, [r7, #8]
 80057f4:	8979      	ldrh	r1, [r7, #10]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	4603      	mov	r3, r0
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f9d3 	bl	8005bac <I2C_RequestMemoryWrite>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e0a9      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	2bff      	cmp	r3, #255	; 0xff
 8005820:	d90e      	bls.n	8005840 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	22ff      	movs	r2, #255	; 0xff
 8005826:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582c:	b2da      	uxtb	r2, r3
 800582e:	8979      	ldrh	r1, [r7, #10]
 8005830:	2300      	movs	r3, #0
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 fc3d 	bl	80060b8 <I2C_TransferConfig>
 800583e:	e00f      	b.n	8005860 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584e:	b2da      	uxtb	r2, r3
 8005850:	8979      	ldrh	r1, [r7, #10]
 8005852:	2300      	movs	r3, #0
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 fc2c 	bl	80060b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fabc 	bl	8005de2 <I2C_WaitOnTXISFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e07b      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	781a      	ldrb	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d034      	beq.n	8005918 <HAL_I2C_Mem_Write+0x1c8>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d130      	bne.n	8005918 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	2200      	movs	r2, #0
 80058be:	2180      	movs	r1, #128	; 0x80
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fa3f 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e04d      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2bff      	cmp	r3, #255	; 0xff
 80058d8:	d90e      	bls.n	80058f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	22ff      	movs	r2, #255	; 0xff
 80058de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	8979      	ldrh	r1, [r7, #10]
 80058e8:	2300      	movs	r3, #0
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 fbe1 	bl	80060b8 <I2C_TransferConfig>
 80058f6:	e00f      	b.n	8005918 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005906:	b2da      	uxtb	r2, r3
 8005908:	8979      	ldrh	r1, [r7, #10]
 800590a:	2300      	movs	r3, #0
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fbd0 	bl	80060b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d19e      	bne.n	8005860 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 faa2 	bl	8005e70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e01a      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2220      	movs	r2, #32
 800593c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6859      	ldr	r1, [r3, #4]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <HAL_I2C_Mem_Write+0x224>)
 800594a:	400b      	ands	r3, r1
 800594c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	e000      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800596a:	2302      	movs	r3, #2
  }
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	fe00e800 	.word	0xfe00e800

08005978 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	4608      	mov	r0, r1
 8005982:	4611      	mov	r1, r2
 8005984:	461a      	mov	r2, r3
 8005986:	4603      	mov	r3, r0
 8005988:	817b      	strh	r3, [r7, #10]
 800598a:	460b      	mov	r3, r1
 800598c:	813b      	strh	r3, [r7, #8]
 800598e:	4613      	mov	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b20      	cmp	r3, #32
 800599c:	f040 80fd 	bne.w	8005b9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <HAL_I2C_Mem_Read+0x34>
 80059a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0f1      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_I2C_Mem_Read+0x4e>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e0ea      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059ce:	f7fe f979 	bl	8003cc4 <HAL_GetTick>
 80059d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	2319      	movs	r3, #25
 80059da:	2201      	movs	r2, #1
 80059dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f9af 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0d5      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2222      	movs	r2, #34	; 0x22
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2240      	movs	r2, #64	; 0x40
 80059fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a3a      	ldr	r2, [r7, #32]
 8005a0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a18:	88f8      	ldrh	r0, [r7, #6]
 8005a1a:	893a      	ldrh	r2, [r7, #8]
 8005a1c:	8979      	ldrh	r1, [r7, #10]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	4603      	mov	r3, r0
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f913 	bl	8005c54 <I2C_RequestMemoryRead>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e0ad      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2bff      	cmp	r3, #255	; 0xff
 8005a48:	d90e      	bls.n	8005a68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	22ff      	movs	r2, #255	; 0xff
 8005a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	8979      	ldrh	r1, [r7, #10]
 8005a58:	4b52      	ldr	r3, [pc, #328]	; (8005ba4 <HAL_I2C_Mem_Read+0x22c>)
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fb29 	bl	80060b8 <I2C_TransferConfig>
 8005a66:	e00f      	b.n	8005a88 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	8979      	ldrh	r1, [r7, #10]
 8005a7a:	4b4a      	ldr	r3, [pc, #296]	; (8005ba4 <HAL_I2C_Mem_Read+0x22c>)
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fb18 	bl	80060b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2104      	movs	r1, #4
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f956 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e07c      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d034      	beq.n	8005b48 <HAL_I2C_Mem_Read+0x1d0>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d130      	bne.n	8005b48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	2200      	movs	r2, #0
 8005aee:	2180      	movs	r1, #128	; 0x80
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f927 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e04d      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2bff      	cmp	r3, #255	; 0xff
 8005b08:	d90e      	bls.n	8005b28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	22ff      	movs	r2, #255	; 0xff
 8005b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	8979      	ldrh	r1, [r7, #10]
 8005b18:	2300      	movs	r3, #0
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fac9 	bl	80060b8 <I2C_TransferConfig>
 8005b26:	e00f      	b.n	8005b48 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	8979      	ldrh	r1, [r7, #10]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 fab8 	bl	80060b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d19a      	bne.n	8005a88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 f98a 	bl	8005e70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e01a      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6859      	ldr	r1, [r3, #4]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <HAL_I2C_Mem_Read+0x230>)
 8005b7a:	400b      	ands	r3, r1
 8005b7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	e000      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
  }
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	80002400 	.word	0x80002400
 8005ba8:	fe00e800 	.word	0xfe00e800

08005bac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4603      	mov	r3, r0
 8005bbc:	817b      	strh	r3, [r7, #10]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	813b      	strh	r3, [r7, #8]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005bc6:	88fb      	ldrh	r3, [r7, #6]
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	8979      	ldrh	r1, [r7, #10]
 8005bcc:	4b20      	ldr	r3, [pc, #128]	; (8005c50 <I2C_RequestMemoryWrite+0xa4>)
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fa6f 	bl	80060b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	69b9      	ldr	r1, [r7, #24]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f8ff 	bl	8005de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e02c      	b.n	8005c48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d105      	bne.n	8005c00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bf4:	893b      	ldrh	r3, [r7, #8]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	629a      	str	r2, [r3, #40]	; 0x28
 8005bfe:	e015      	b.n	8005c2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c00:	893b      	ldrh	r3, [r7, #8]
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	69b9      	ldr	r1, [r7, #24]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f8e5 	bl	8005de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e012      	b.n	8005c48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c22:	893b      	ldrh	r3, [r7, #8]
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	2200      	movs	r2, #0
 8005c34:	2180      	movs	r1, #128	; 0x80
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f884 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	80002000 	.word	0x80002000

08005c54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	4611      	mov	r1, r2
 8005c60:	461a      	mov	r2, r3
 8005c62:	4603      	mov	r3, r0
 8005c64:	817b      	strh	r3, [r7, #10]
 8005c66:	460b      	mov	r3, r1
 8005c68:	813b      	strh	r3, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c6e:	88fb      	ldrh	r3, [r7, #6]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	8979      	ldrh	r1, [r7, #10]
 8005c74:	4b20      	ldr	r3, [pc, #128]	; (8005cf8 <I2C_RequestMemoryRead+0xa4>)
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 fa1c 	bl	80060b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c80:	69fa      	ldr	r2, [r7, #28]
 8005c82:	69b9      	ldr	r1, [r7, #24]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f8ac 	bl	8005de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e02c      	b.n	8005cee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d105      	bne.n	8005ca6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c9a:	893b      	ldrh	r3, [r7, #8]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ca4:	e015      	b.n	8005cd2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ca6:	893b      	ldrh	r3, [r7, #8]
 8005ca8:	0a1b      	lsrs	r3, r3, #8
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	69b9      	ldr	r1, [r7, #24]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f892 	bl	8005de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e012      	b.n	8005cee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cc8:	893b      	ldrh	r3, [r7, #8]
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2140      	movs	r1, #64	; 0x40
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f831 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	80002000 	.word	0x80002000

08005cfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d103      	bne.n	8005d1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2200      	movs	r2, #0
 8005d18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d007      	beq.n	8005d38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	619a      	str	r2, [r3, #24]
  }
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	4613      	mov	r3, r2
 8005d52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d54:	e031      	b.n	8005dba <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d02d      	beq.n	8005dba <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d5e:	f7fd ffb1 	bl	8003cc4 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d302      	bcc.n	8005d74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d122      	bne.n	8005dba <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699a      	ldr	r2, [r3, #24]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	bf0c      	ite	eq
 8005d84:	2301      	moveq	r3, #1
 8005d86:	2300      	movne	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d113      	bne.n	8005dba <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d96:	f043 0220 	orr.w	r2, r3, #32
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e00f      	b.n	8005dda <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	699a      	ldr	r2, [r3, #24]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	bf0c      	ite	eq
 8005dca:	2301      	moveq	r3, #1
 8005dcc:	2300      	movne	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d0be      	beq.n	8005d56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005dee:	e033      	b.n	8005e58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 f87f 	bl	8005ef8 <I2C_IsErrorOccurred>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e031      	b.n	8005e68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0a:	d025      	beq.n	8005e58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e0c:	f7fd ff5a 	bl	8003cc4 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d302      	bcc.n	8005e22 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d11a      	bne.n	8005e58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d013      	beq.n	8005e58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e34:	f043 0220 	orr.w	r2, r3, #32
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e007      	b.n	8005e68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d1c4      	bne.n	8005df0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e7c:	e02f      	b.n	8005ede <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f838 	bl	8005ef8 <I2C_IsErrorOccurred>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e02d      	b.n	8005eee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e92:	f7fd ff17 	bl	8003cc4 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d302      	bcc.n	8005ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d11a      	bne.n	8005ede <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d013      	beq.n	8005ede <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eba:	f043 0220 	orr.w	r2, r3, #32
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e007      	b.n	8005eee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	f003 0320 	and.w	r3, r3, #32
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d1c8      	bne.n	8005e7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08a      	sub	sp, #40	; 0x28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	f003 0310 	and.w	r3, r3, #16
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d068      	beq.n	8005ff6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2210      	movs	r2, #16
 8005f2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f2c:	e049      	b.n	8005fc2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f34:	d045      	beq.n	8005fc2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f36:	f7fd fec5 	bl	8003cc4 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d302      	bcc.n	8005f4c <I2C_IsErrorOccurred+0x54>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d13a      	bne.n	8005fc2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f6e:	d121      	bne.n	8005fb4 <I2C_IsErrorOccurred+0xbc>
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f76:	d01d      	beq.n	8005fb4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005f78:	7cfb      	ldrb	r3, [r7, #19]
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d01a      	beq.n	8005fb4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f8c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f8e:	f7fd fe99 	bl	8003cc4 <HAL_GetTick>
 8005f92:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f94:	e00e      	b.n	8005fb4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f96:	f7fd fe95 	bl	8003cc4 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b19      	cmp	r3, #25
 8005fa2:	d907      	bls.n	8005fb4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	f043 0320 	orr.w	r3, r3, #32
 8005faa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005fb2:	e006      	b.n	8005fc2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d1e9      	bne.n	8005f96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	f003 0320 	and.w	r3, r3, #32
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	d003      	beq.n	8005fd8 <I2C_IsErrorOccurred+0xe0>
 8005fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0aa      	beq.n	8005f2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d103      	bne.n	8005fe8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	f043 0304 	orr.w	r3, r3, #4
 8005fee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00b      	beq.n	8006020 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	f043 0301 	orr.w	r3, r3, #1
 800600e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006018:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00b      	beq.n	8006042 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	f043 0308 	orr.w	r3, r3, #8
 8006030:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800603a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00b      	beq.n	8006064 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	f043 0302 	orr.w	r3, r3, #2
 8006052:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800605c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01c      	beq.n	80060a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff fe45 	bl	8005cfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6859      	ldr	r1, [r3, #4]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <I2C_IsErrorOccurred+0x1bc>)
 800607e:	400b      	ands	r3, r1
 8006080:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	431a      	orrs	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2220      	movs	r2, #32
 8006092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80060a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3728      	adds	r7, #40	; 0x28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	fe00e800 	.word	0xfe00e800

080060b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	607b      	str	r3, [r7, #4]
 80060c2:	460b      	mov	r3, r1
 80060c4:	817b      	strh	r3, [r7, #10]
 80060c6:	4613      	mov	r3, r2
 80060c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060ca:	897b      	ldrh	r3, [r7, #10]
 80060cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060d0:	7a7b      	ldrb	r3, [r7, #9]
 80060d2:	041b      	lsls	r3, r3, #16
 80060d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	0d5b      	lsrs	r3, r3, #21
 80060f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80060f6:	4b08      	ldr	r3, [pc, #32]	; (8006118 <I2C_TransferConfig+0x60>)
 80060f8:	430b      	orrs	r3, r1
 80060fa:	43db      	mvns	r3, r3
 80060fc:	ea02 0103 	and.w	r1, r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	430a      	orrs	r2, r1
 8006108:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800610a:	bf00      	nop
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	03ff63ff 	.word	0x03ff63ff

0800611c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b20      	cmp	r3, #32
 8006130:	d138      	bne.n	80061a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006138:	2b01      	cmp	r3, #1
 800613a:	d101      	bne.n	8006140 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800613c:	2302      	movs	r3, #2
 800613e:	e032      	b.n	80061a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2224      	movs	r2, #36	; 0x24
 800614c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800616e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6819      	ldr	r1, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e000      	b.n	80061a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061a4:	2302      	movs	r3, #2
  }
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d139      	bne.n	800623c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d101      	bne.n	80061d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061d2:	2302      	movs	r3, #2
 80061d4:	e033      	b.n	800623e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2224      	movs	r2, #36	; 0x24
 80061e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0201 	bic.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006204:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	021b      	lsls	r3, r3, #8
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	e000      	b.n	800623e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800623c:	2302      	movs	r3, #2
  }
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af02      	add	r7, sp, #8
 8006252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006258:	f7fd fd34 	bl	8003cc4 <HAL_GetTick>
 800625c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
 8006268:	e092      	b.n	8006390 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006274:	2b00      	cmp	r3, #0
 8006276:	f040 808b 	bne.w	8006390 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fd f99e 	bl	80035bc <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006280:	f241 3188 	movw	r1, #5000	; 0x1388
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f88b 	bl	80063a0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	4b42      	ldr	r3, [pc, #264]	; (800639c <HAL_OSPI_Init+0x150>)
 8006292:	4013      	ands	r3, r2
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	68d1      	ldr	r1, [r2, #12]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6912      	ldr	r2, [r2, #16]
 800629c:	3a01      	subs	r2, #1
 800629e:	0412      	lsls	r2, r2, #16
 80062a0:	4311      	orrs	r1, r2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6952      	ldr	r2, [r2, #20]
 80062a6:	3a01      	subs	r2, #1
 80062a8:	0212      	lsls	r2, r2, #8
 80062aa:	4311      	orrs	r1, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80062b0:	4311      	orrs	r1, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	69d2      	ldr	r2, [r2, #28]
 80062b6:	4311      	orrs	r1, r2
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6812      	ldr	r2, [r2, #0]
 80062bc:	430b      	orrs	r3, r1
 80062be:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	0412      	lsls	r2, r2, #16
 80062ca:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	3b01      	subs	r3, #1
 80062dc:	021a      	lsls	r2, r3, #8
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2200      	movs	r2, #0
 80062f0:	2120      	movs	r1, #32
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fb98 	bl	8006a28 <OSPI_WaitFlagStateUntilTimeout>
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d146      	bne.n	8006390 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	1e5a      	subs	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006338:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	431a      	orrs	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	2b02      	cmp	r3, #2
 8006366:	d107      	bne.n	8006378 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0202 	orr.w	r2, r2, #2
 8006376:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006380:	d103      	bne.n	800638a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	645a      	str	r2, [r3, #68]	; 0x44
 8006388:	e002      	b.n	8006390 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2202      	movs	r2, #2
 800638e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	f8e0f8f4 	.word	0xf8e0f8f4

080063a0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
	...

080063c0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b092      	sub	sp, #72	; 0x48
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a08      	ldr	r2, [pc, #32]	; (8006400 <HAL_OSPIM_Config+0x40>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d105      	bne.n	80063ee <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80063e6:	2301      	movs	r3, #1
 80063e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80063ec:	e004      	b.n	80063f8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80063ee:	2301      	movs	r3, #1
 80063f0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80063f8:	2300      	movs	r3, #0
 80063fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80063fe:	e01f      	b.n	8006440 <HAL_OSPIM_Config+0x80>
 8006400:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8006404:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006408:	3301      	adds	r3, #1
 800640a:	b2d8      	uxtb	r0, r3
 800640c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006410:	f107 0114 	add.w	r1, r7, #20
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	4619      	mov	r1, r3
 8006420:	f000 fb3a 	bl	8006a98 <OSPIM_GetConfig>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2208      	movs	r2, #8
 8006434:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006436:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800643a:	3301      	adds	r3, #1
 800643c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006440:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006444:	2b01      	cmp	r3, #1
 8006446:	d9dd      	bls.n	8006404 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8006448:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800644c:	2b00      	cmp	r3, #0
 800644e:	f040 82de 	bne.w	8006a0e <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006452:	4bc6      	ldr	r3, [pc, #792]	; (800676c <HAL_OSPIM_Config+0x3ac>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00b      	beq.n	8006476 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800645e:	4bc3      	ldr	r3, [pc, #780]	; (800676c <HAL_OSPIM_Config+0x3ac>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4ac2      	ldr	r2, [pc, #776]	; (800676c <HAL_OSPIM_Config+0x3ac>)
 8006464:	f023 0301 	bic.w	r3, r3, #1
 8006468:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800646a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800646e:	f043 0301 	orr.w	r3, r3, #1
 8006472:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006476:	4bbe      	ldr	r3, [pc, #760]	; (8006770 <HAL_OSPIM_Config+0x3b0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00b      	beq.n	800649a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006482:	4bbb      	ldr	r3, [pc, #748]	; (8006770 <HAL_OSPIM_Config+0x3b0>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4aba      	ldr	r2, [pc, #744]	; (8006770 <HAL_OSPIM_Config+0x3b0>)
 8006488:	f023 0301 	bic.w	r3, r3, #1
 800648c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800648e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006492:	f043 0302 	orr.w	r3, r3, #2
 8006496:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800649a:	49b6      	ldr	r1, [pc, #728]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 800649c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	3348      	adds	r3, #72	; 0x48
 80064a8:	443b      	add	r3, r7
 80064aa:	3b2c      	subs	r3, #44	; 0x2c
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	6859      	ldr	r1, [r3, #4]
 80064b6:	48af      	ldr	r0, [pc, #700]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 80064b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064ba:	4613      	mov	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	3348      	adds	r3, #72	; 0x48
 80064c4:	443b      	add	r3, r7
 80064c6:	3b2c      	subs	r3, #44	; 0x2c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4403      	add	r3, r0
 80064d4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80064d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	3348      	adds	r3, #72	; 0x48
 80064e2:	443b      	add	r3, r7
 80064e4:	3b34      	subs	r3, #52	; 0x34
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 80a1 	beq.w	8006630 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80064ee:	49a1      	ldr	r1, [pc, #644]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 80064f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	3348      	adds	r3, #72	; 0x48
 80064fc:	443b      	add	r3, r7
 80064fe:	3b34      	subs	r3, #52	; 0x34
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3b01      	subs	r3, #1
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	6859      	ldr	r1, [r3, #4]
 800650a:	489a      	ldr	r0, [pc, #616]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 800650c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	3348      	adds	r3, #72	; 0x48
 8006518:	443b      	add	r3, r7
 800651a:	3b34      	subs	r3, #52	; 0x34
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3b01      	subs	r3, #1
 8006520:	f021 0201 	bic.w	r2, r1, #1
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4403      	add	r3, r0
 8006528:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800652a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	3348      	adds	r3, #72	; 0x48
 8006536:	443b      	add	r3, r7
 8006538:	3b30      	subs	r3, #48	; 0x30
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01d      	beq.n	800657c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006540:	498c      	ldr	r1, [pc, #560]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 8006542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	3348      	adds	r3, #72	; 0x48
 800654e:	443b      	add	r3, r7
 8006550:	3b30      	subs	r3, #48	; 0x30
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3b01      	subs	r3, #1
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	6859      	ldr	r1, [r3, #4]
 800655c:	4885      	ldr	r0, [pc, #532]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 800655e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	3348      	adds	r3, #72	; 0x48
 800656a:	443b      	add	r3, r7
 800656c:	3b30      	subs	r3, #48	; 0x30
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3b01      	subs	r3, #1
 8006572:	f021 0210 	bic.w	r2, r1, #16
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4403      	add	r3, r0
 800657a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800657c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800657e:	4613      	mov	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	3348      	adds	r3, #72	; 0x48
 8006588:	443b      	add	r3, r7
 800658a:	3b28      	subs	r3, #40	; 0x28
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d021      	beq.n	80065d6 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006592:	4978      	ldr	r1, [pc, #480]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 8006594:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006596:	4613      	mov	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	3348      	adds	r3, #72	; 0x48
 80065a0:	443b      	add	r3, r7
 80065a2:	3b28      	subs	r3, #40	; 0x28
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	6859      	ldr	r1, [r3, #4]
 80065b2:	4870      	ldr	r0, [pc, #448]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 80065b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	3348      	adds	r3, #72	; 0x48
 80065c0:	443b      	add	r3, r7
 80065c2:	3b28      	subs	r3, #40	; 0x28
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4403      	add	r3, r0
 80065d4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80065d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	3348      	adds	r3, #72	; 0x48
 80065e2:	443b      	add	r3, r7
 80065e4:	3b24      	subs	r3, #36	; 0x24
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d021      	beq.n	8006630 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80065ec:	4961      	ldr	r1, [pc, #388]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 80065ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	3348      	adds	r3, #72	; 0x48
 80065fa:	443b      	add	r3, r7
 80065fc:	3b24      	subs	r3, #36	; 0x24
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3b01      	subs	r3, #1
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	440b      	add	r3, r1
 800660a:	6859      	ldr	r1, [r3, #4]
 800660c:	4859      	ldr	r0, [pc, #356]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 800660e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006610:	4613      	mov	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	3348      	adds	r3, #72	; 0x48
 800661a:	443b      	add	r3, r7
 800661c:	3b24      	subs	r3, #36	; 0x24
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3b01      	subs	r3, #1
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4403      	add	r3, r0
 800662e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	3348      	adds	r3, #72	; 0x48
 8006642:	443b      	add	r3, r7
 8006644:	3b34      	subs	r3, #52	; 0x34
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4299      	cmp	r1, r3
 800664a:	d038      	beq.n	80066be <HAL_OSPIM_Config+0x2fe>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	6859      	ldr	r1, [r3, #4]
 8006650:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006654:	4613      	mov	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	3348      	adds	r3, #72	; 0x48
 800665e:	443b      	add	r3, r7
 8006660:	3b30      	subs	r3, #48	; 0x30
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4299      	cmp	r1, r3
 8006666:	d02a      	beq.n	80066be <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	6899      	ldr	r1, [r3, #8]
 800666c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006670:	4613      	mov	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	3348      	adds	r3, #72	; 0x48
 800667a:	443b      	add	r3, r7
 800667c:	3b2c      	subs	r3, #44	; 0x2c
 800667e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006680:	4299      	cmp	r1, r3
 8006682:	d01c      	beq.n	80066be <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	68d9      	ldr	r1, [r3, #12]
 8006688:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800668c:	4613      	mov	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	3348      	adds	r3, #72	; 0x48
 8006696:	443b      	add	r3, r7
 8006698:	3b28      	subs	r3, #40	; 0x28
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4299      	cmp	r1, r3
 800669e:	d00e      	beq.n	80066be <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	6919      	ldr	r1, [r3, #16]
 80066a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80066a8:	4613      	mov	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	3348      	adds	r3, #72	; 0x48
 80066b2:	443b      	add	r3, r7
 80066b4:	3b24      	subs	r3, #36	; 0x24
 80066b6:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80066b8:	4299      	cmp	r1, r3
 80066ba:	f040 80d3 	bne.w	8006864 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80066be:	492d      	ldr	r1, [pc, #180]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 80066c0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	3348      	adds	r3, #72	; 0x48
 80066ce:	443b      	add	r3, r7
 80066d0:	3b34      	subs	r3, #52	; 0x34
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	440b      	add	r3, r1
 80066da:	6859      	ldr	r1, [r3, #4]
 80066dc:	4825      	ldr	r0, [pc, #148]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 80066de:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	3348      	adds	r3, #72	; 0x48
 80066ec:	443b      	add	r3, r7
 80066ee:	3b34      	subs	r3, #52	; 0x34
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	f021 0201 	bic.w	r2, r1, #1
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4403      	add	r3, r0
 80066fc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80066fe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	3348      	adds	r3, #72	; 0x48
 800670c:	443b      	add	r3, r7
 800670e:	3b30      	subs	r3, #48	; 0x30
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01f      	beq.n	8006756 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006716:	4917      	ldr	r1, [pc, #92]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 8006718:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	3348      	adds	r3, #72	; 0x48
 8006726:	443b      	add	r3, r7
 8006728:	3b30      	subs	r3, #48	; 0x30
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3b01      	subs	r3, #1
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	6859      	ldr	r1, [r3, #4]
 8006734:	480f      	ldr	r0, [pc, #60]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 8006736:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	3348      	adds	r3, #72	; 0x48
 8006744:	443b      	add	r3, r7
 8006746:	3b30      	subs	r3, #48	; 0x30
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3b01      	subs	r3, #1
 800674c:	f021 0210 	bic.w	r2, r1, #16
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4403      	add	r3, r0
 8006754:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006756:	4907      	ldr	r1, [pc, #28]	; (8006774 <HAL_OSPIM_Config+0x3b4>)
 8006758:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	3348      	adds	r3, #72	; 0x48
 8006766:	443b      	add	r3, r7
 8006768:	3b2c      	subs	r3, #44	; 0x2c
 800676a:	e005      	b.n	8006778 <HAL_OSPIM_Config+0x3b8>
 800676c:	a0001000 	.word	0xa0001000
 8006770:	a0001400 	.word	0xa0001400
 8006774:	50061c00 	.word	0x50061c00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3b01      	subs	r3, #1
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	6859      	ldr	r1, [r3, #4]
 8006782:	48a6      	ldr	r0, [pc, #664]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 8006784:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006788:	4613      	mov	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	3348      	adds	r3, #72	; 0x48
 8006792:	443b      	add	r3, r7
 8006794:	3b2c      	subs	r3, #44	; 0x2c
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3b01      	subs	r3, #1
 800679a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4403      	add	r3, r0
 80067a2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80067a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	3348      	adds	r3, #72	; 0x48
 80067b2:	443b      	add	r3, r7
 80067b4:	3b28      	subs	r3, #40	; 0x28
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d023      	beq.n	8006804 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80067bc:	4997      	ldr	r1, [pc, #604]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 80067be:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	3348      	adds	r3, #72	; 0x48
 80067cc:	443b      	add	r3, r7
 80067ce:	3b28      	subs	r3, #40	; 0x28
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	6859      	ldr	r1, [r3, #4]
 80067de:	488f      	ldr	r0, [pc, #572]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 80067e0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	3348      	adds	r3, #72	; 0x48
 80067ee:	443b      	add	r3, r7
 80067f0:	3b28      	subs	r3, #40	; 0x28
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4403      	add	r3, r0
 8006802:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006804:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	3348      	adds	r3, #72	; 0x48
 8006812:	443b      	add	r3, r7
 8006814:	3b24      	subs	r3, #36	; 0x24
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d023      	beq.n	8006864 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800681c:	497f      	ldr	r1, [pc, #508]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 800681e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	3348      	adds	r3, #72	; 0x48
 800682c:	443b      	add	r3, r7
 800682e:	3b24      	subs	r3, #36	; 0x24
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3b01      	subs	r3, #1
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	6859      	ldr	r1, [r3, #4]
 800683e:	4877      	ldr	r0, [pc, #476]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 8006840:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006844:	4613      	mov	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	3348      	adds	r3, #72	; 0x48
 800684e:	443b      	add	r3, r7
 8006850:	3b24      	subs	r3, #36	; 0x24
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3b01      	subs	r3, #1
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4403      	add	r3, r0
 8006862:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006864:	4a6d      	ldr	r2, [pc, #436]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	3b01      	subs	r3, #1
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006878:	025b      	lsls	r3, r3, #9
 800687a:	431a      	orrs	r2, r3
 800687c:	4967      	ldr	r1, [pc, #412]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	3b01      	subs	r3, #1
 8006884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	440b      	add	r3, r1
 800688c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800688e:	4a63      	ldr	r2, [pc, #396]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3b01      	subs	r3, #1
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f023 0203 	bic.w	r2, r3, #3
 80068a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	431a      	orrs	r2, r3
 80068a6:	495d      	ldr	r1, [pc, #372]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3b01      	subs	r3, #1
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d014      	beq.n	80068ea <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80068c0:	4a56      	ldr	r2, [pc, #344]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d4:	015b      	lsls	r3, r3, #5
 80068d6:	431a      	orrs	r2, r3
 80068d8:	4950      	ldr	r1, [pc, #320]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	3b01      	subs	r3, #1
 80068e0:	f042 0210 	orr.w	r2, r2, #16
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	440b      	add	r3, r1
 80068e8:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d019      	beq.n	800692a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80068f6:	4a49      	ldr	r2, [pc, #292]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800690c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800690e:	049b      	lsls	r3, r3, #18
 8006910:	431a      	orrs	r2, r3
 8006912:	4942      	ldr	r1, [pc, #264]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	3b01      	subs	r3, #1
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	605a      	str	r2, [r3, #4]
 8006928:	e01c      	b.n	8006964 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d018      	beq.n	8006964 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006932:	4a3a      	ldr	r2, [pc, #232]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	3b01      	subs	r3, #1
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800694a:	069b      	lsls	r3, r3, #26
 800694c:	431a      	orrs	r2, r3
 800694e:	4933      	ldr	r1, [pc, #204]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	3b01      	subs	r3, #1
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	440b      	add	r3, r1
 8006962:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d019      	beq.n	80069a4 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006970:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	3b01      	subs	r3, #1
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006988:	049b      	lsls	r3, r3, #18
 800698a:	431a      	orrs	r2, r3
 800698c:	4923      	ldr	r1, [pc, #140]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	3b01      	subs	r3, #1
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	605a      	str	r2, [r3, #4]
 80069a2:	e01c      	b.n	80069de <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d018      	beq.n	80069de <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80069ac:	4a1b      	ldr	r2, [pc, #108]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80069c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c4:	069b      	lsls	r3, r3, #26
 80069c6:	431a      	orrs	r2, r3
 80069c8:	4914      	ldr	r1, [pc, #80]	; (8006a1c <HAL_OSPIM_Config+0x65c>)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80069de:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80069ea:	4b0d      	ldr	r3, [pc, #52]	; (8006a20 <HAL_OSPIM_Config+0x660>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a0c      	ldr	r2, [pc, #48]	; (8006a20 <HAL_OSPIM_Config+0x660>)
 80069f0:	f043 0301 	orr.w	r3, r3, #1
 80069f4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80069f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d005      	beq.n	8006a0e <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006a02:	4b08      	ldr	r3, [pc, #32]	; (8006a24 <HAL_OSPIM_Config+0x664>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a07      	ldr	r2, [pc, #28]	; (8006a24 <HAL_OSPIM_Config+0x664>)
 8006a08:	f043 0301 	orr.w	r3, r3, #1
 8006a0c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8006a0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3748      	adds	r7, #72	; 0x48
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	50061c00 	.word	0x50061c00
 8006a20:	a0001000 	.word	0xa0001000
 8006a24:	a0001400 	.word	0xa0001400

08006a28 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	4613      	mov	r3, r2
 8006a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006a38:	e01a      	b.n	8006a70 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a40:	d016      	beq.n	8006a70 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a42:	f7fd f93f 	bl	8003cc4 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d302      	bcc.n	8006a58 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10b      	bne.n	8006a70 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a5e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a64:	f043 0201 	orr.w	r2, r3, #1
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e00e      	b.n	8006a8e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6a1a      	ldr	r2, [r3, #32]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bf14      	ite	ne
 8006a7e:	2301      	movne	r3, #1
 8006a80:	2300      	moveq	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	461a      	mov	r2, r3
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d1d6      	bne.n	8006a3a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	6039      	str	r1, [r7, #0]
 8006aa2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006aac:	79fb      	ldrb	r3, [r7, #7]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d005      	beq.n	8006abe <OSPIM_GetConfig+0x26>
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d802      	bhi.n	8006abe <OSPIM_GetConfig+0x26>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d102      	bne.n	8006ac4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	75fb      	strb	r3, [r7, #23]
 8006ac2:	e08e      	b.n	8006be2 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2200      	movs	r2, #0
 8006ace:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d101      	bne.n	8006aec <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006ae8:	4b41      	ldr	r3, [pc, #260]	; (8006bf0 <OSPIM_GetConfig+0x158>)
 8006aea:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	e074      	b.n	8006bdc <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8006af2:	4a40      	ldr	r2, [pc, #256]	; (8006bf4 <OSPIM_GetConfig+0x15c>)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	4053      	eors	r3, r2
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00a      	beq.n	8006b3e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	4053      	eors	r3, r2
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d103      	bne.n	8006b3e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00a      	beq.n	8006b5e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	4053      	eors	r3, r2
 8006b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d103      	bne.n	8006b5e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d018      	beq.n	8006b9a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	4053      	eors	r3, r2
 8006b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d111      	bne.n	8006b9a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d106      	bne.n	8006b8e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3301      	adds	r3, #1
 8006b84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	60da      	str	r2, [r3, #12]
 8006b8c:	e005      	b.n	8006b9a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3301      	adds	r3, #1
 8006b92:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d018      	beq.n	8006bd6 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	4053      	eors	r3, r2
 8006baa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d111      	bne.n	8006bd6 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d106      	bne.n	8006bca <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	611a      	str	r2, [r3, #16]
 8006bc8:	e005      	b.n	8006bd6 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d987      	bls.n	8006af2 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	04040222 	.word	0x04040222
 8006bf4:	50061c00 	.word	0x50061c00

08006bf8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bfc:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a04      	ldr	r2, [pc, #16]	; (8006c14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c06:	6013      	str	r3, [r2, #0]
}
 8006c08:	bf00      	nop
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	40007000 	.word	0x40007000

08006c18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c28:	d102      	bne.n	8006c30 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c2e:	e00b      	b.n	8006c48 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006c30:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c3e:	d102      	bne.n	8006c46 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c44:	e000      	b.n	8006c48 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006c46:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40007000 	.word	0x40007000

08006c58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d141      	bne.n	8006cea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c66:	4b4b      	ldr	r3, [pc, #300]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c72:	d131      	bne.n	8006cd8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c74:	4b47      	ldr	r3, [pc, #284]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c7a:	4a46      	ldr	r2, [pc, #280]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c84:	4b43      	ldr	r3, [pc, #268]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c8c:	4a41      	ldr	r2, [pc, #260]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006c94:	4b40      	ldr	r3, [pc, #256]	; (8006d98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2232      	movs	r2, #50	; 0x32
 8006c9a:	fb02 f303 	mul.w	r3, r2, r3
 8006c9e:	4a3f      	ldr	r2, [pc, #252]	; (8006d9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca4:	0c9b      	lsrs	r3, r3, #18
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006caa:	e002      	b.n	8006cb2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cb2:	4b38      	ldr	r3, [pc, #224]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cbe:	d102      	bne.n	8006cc6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1f2      	bne.n	8006cac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006cc6:	4b33      	ldr	r3, [pc, #204]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd2:	d158      	bne.n	8006d86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e057      	b.n	8006d88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cd8:	4b2e      	ldr	r3, [pc, #184]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cde:	4a2d      	ldr	r2, [pc, #180]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ce4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006ce8:	e04d      	b.n	8006d86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf0:	d141      	bne.n	8006d76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006cf2:	4b28      	ldr	r3, [pc, #160]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfe:	d131      	bne.n	8006d64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d00:	4b24      	ldr	r3, [pc, #144]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d06:	4a23      	ldr	r2, [pc, #140]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d10:	4b20      	ldr	r3, [pc, #128]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d18:	4a1e      	ldr	r2, [pc, #120]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006d20:	4b1d      	ldr	r3, [pc, #116]	; (8006d98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2232      	movs	r2, #50	; 0x32
 8006d26:	fb02 f303 	mul.w	r3, r2, r3
 8006d2a:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d30:	0c9b      	lsrs	r3, r3, #18
 8006d32:	3301      	adds	r3, #1
 8006d34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d36:	e002      	b.n	8006d3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d3e:	4b15      	ldr	r3, [pc, #84]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d4a:	d102      	bne.n	8006d52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1f2      	bne.n	8006d38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d52:	4b10      	ldr	r3, [pc, #64]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d5e:	d112      	bne.n	8006d86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e011      	b.n	8006d88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d64:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d6a:	4a0a      	ldr	r2, [pc, #40]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006d74:	e007      	b.n	8006d86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d76:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d7e:	4a05      	ldr	r2, [pc, #20]	; (8006d94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d84:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	40007000 	.word	0x40007000
 8006d98:	20000008 	.word	0x20000008
 8006d9c:	431bde83 	.word	0x431bde83

08006da0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d102      	bne.n	8006db4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f000 bc08 	b.w	80075c4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006db4:	4b96      	ldr	r3, [pc, #600]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f003 030c 	and.w	r3, r3, #12
 8006dbc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dbe:	4b94      	ldr	r3, [pc, #592]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0310 	and.w	r3, r3, #16
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 80e4 	beq.w	8006f9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <HAL_RCC_OscConfig+0x4c>
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	2b0c      	cmp	r3, #12
 8006de0:	f040 808b 	bne.w	8006efa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	f040 8087 	bne.w	8006efa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006dec:	4b88      	ldr	r3, [pc, #544]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <HAL_RCC_OscConfig+0x64>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e3df      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1a      	ldr	r2, [r3, #32]
 8006e08:	4b81      	ldr	r3, [pc, #516]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d004      	beq.n	8006e1e <HAL_RCC_OscConfig+0x7e>
 8006e14:	4b7e      	ldr	r3, [pc, #504]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e1c:	e005      	b.n	8006e2a <HAL_RCC_OscConfig+0x8a>
 8006e1e:	4b7c      	ldr	r3, [pc, #496]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e24:	091b      	lsrs	r3, r3, #4
 8006e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d223      	bcs.n	8006e76 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fdfe 	bl	8007a34 <RCC_SetFlashLatencyFromMSIRange>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e3c0      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e42:	4b73      	ldr	r3, [pc, #460]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a72      	ldr	r2, [pc, #456]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e48:	f043 0308 	orr.w	r3, r3, #8
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	4b70      	ldr	r3, [pc, #448]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	496d      	ldr	r1, [pc, #436]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e60:	4b6b      	ldr	r3, [pc, #428]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	021b      	lsls	r3, r3, #8
 8006e6e:	4968      	ldr	r1, [pc, #416]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	604b      	str	r3, [r1, #4]
 8006e74:	e025      	b.n	8006ec2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e76:	4b66      	ldr	r3, [pc, #408]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a65      	ldr	r2, [pc, #404]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e7c:	f043 0308 	orr.w	r3, r3, #8
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	4b63      	ldr	r3, [pc, #396]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	4960      	ldr	r1, [pc, #384]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e94:	4b5e      	ldr	r3, [pc, #376]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	495b      	ldr	r1, [pc, #364]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d109      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fdbe 	bl	8007a34 <RCC_SetFlashLatencyFromMSIRange>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e380      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ec2:	f000 fcc1 	bl	8007848 <HAL_RCC_GetSysClockFreq>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	4b51      	ldr	r3, [pc, #324]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	091b      	lsrs	r3, r3, #4
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	4950      	ldr	r1, [pc, #320]	; (8007014 <HAL_RCC_OscConfig+0x274>)
 8006ed4:	5ccb      	ldrb	r3, [r1, r3]
 8006ed6:	f003 031f 	and.w	r3, r3, #31
 8006eda:	fa22 f303 	lsr.w	r3, r2, r3
 8006ede:	4a4e      	ldr	r2, [pc, #312]	; (8007018 <HAL_RCC_OscConfig+0x278>)
 8006ee0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006ee2:	4b4e      	ldr	r3, [pc, #312]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fc fd7c 	bl	80039e4 <HAL_InitTick>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d052      	beq.n	8006f9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	e364      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d032      	beq.n	8006f68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006f02:	4b43      	ldr	r3, [pc, #268]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a42      	ldr	r2, [pc, #264]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f08:	f043 0301 	orr.w	r3, r3, #1
 8006f0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f0e:	f7fc fed9 	bl	8003cc4 <HAL_GetTick>
 8006f12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f14:	e008      	b.n	8006f28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f16:	f7fc fed5 	bl	8003cc4 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d901      	bls.n	8006f28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e34d      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f28:	4b39      	ldr	r3, [pc, #228]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0f0      	beq.n	8006f16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f34:	4b36      	ldr	r3, [pc, #216]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a35      	ldr	r2, [pc, #212]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f3a:	f043 0308 	orr.w	r3, r3, #8
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	4b33      	ldr	r3, [pc, #204]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	4930      	ldr	r1, [pc, #192]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f52:	4b2f      	ldr	r3, [pc, #188]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	492b      	ldr	r1, [pc, #172]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	604b      	str	r3, [r1, #4]
 8006f66:	e01a      	b.n	8006f9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f68:	4b29      	ldr	r3, [pc, #164]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a28      	ldr	r2, [pc, #160]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f6e:	f023 0301 	bic.w	r3, r3, #1
 8006f72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f74:	f7fc fea6 	bl	8003cc4 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f7c:	f7fc fea2 	bl	8003cc4 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e31a      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f8e:	4b20      	ldr	r3, [pc, #128]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <HAL_RCC_OscConfig+0x1dc>
 8006f9a:	e000      	b.n	8006f9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d073      	beq.n	8007092 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d005      	beq.n	8006fbc <HAL_RCC_OscConfig+0x21c>
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b0c      	cmp	r3, #12
 8006fb4:	d10e      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d10b      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fbc:	4b14      	ldr	r3, [pc, #80]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d063      	beq.n	8007090 <HAL_RCC_OscConfig+0x2f0>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d15f      	bne.n	8007090 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e2f7      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fdc:	d106      	bne.n	8006fec <HAL_RCC_OscConfig+0x24c>
 8006fde:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a0b      	ldr	r2, [pc, #44]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	e025      	b.n	8007038 <HAL_RCC_OscConfig+0x298>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ff4:	d114      	bne.n	8007020 <HAL_RCC_OscConfig+0x280>
 8006ff6:	4b06      	ldr	r3, [pc, #24]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a05      	ldr	r2, [pc, #20]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8006ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	4b03      	ldr	r3, [pc, #12]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a02      	ldr	r2, [pc, #8]	; (8007010 <HAL_RCC_OscConfig+0x270>)
 8007008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	e013      	b.n	8007038 <HAL_RCC_OscConfig+0x298>
 8007010:	40021000 	.word	0x40021000
 8007014:	0800c11c 	.word	0x0800c11c
 8007018:	20000008 	.word	0x20000008
 800701c:	2000000c 	.word	0x2000000c
 8007020:	4ba0      	ldr	r3, [pc, #640]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a9f      	ldr	r2, [pc, #636]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	4b9d      	ldr	r3, [pc, #628]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a9c      	ldr	r2, [pc, #624]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d013      	beq.n	8007068 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007040:	f7fc fe40 	bl	8003cc4 <HAL_GetTick>
 8007044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007048:	f7fc fe3c 	bl	8003cc4 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b64      	cmp	r3, #100	; 0x64
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e2b4      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800705a:	4b92      	ldr	r3, [pc, #584]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0f0      	beq.n	8007048 <HAL_RCC_OscConfig+0x2a8>
 8007066:	e014      	b.n	8007092 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007068:	f7fc fe2c 	bl	8003cc4 <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007070:	f7fc fe28 	bl	8003cc4 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b64      	cmp	r3, #100	; 0x64
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e2a0      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007082:	4b88      	ldr	r3, [pc, #544]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f0      	bne.n	8007070 <HAL_RCC_OscConfig+0x2d0>
 800708e:	e000      	b.n	8007092 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d060      	beq.n	8007160 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d005      	beq.n	80070b0 <HAL_RCC_OscConfig+0x310>
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	2b0c      	cmp	r3, #12
 80070a8:	d119      	bne.n	80070de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d116      	bne.n	80070de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070b0:	4b7c      	ldr	r3, [pc, #496]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <HAL_RCC_OscConfig+0x328>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e27d      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c8:	4b76      	ldr	r3, [pc, #472]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	061b      	lsls	r3, r3, #24
 80070d6:	4973      	ldr	r1, [pc, #460]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070dc:	e040      	b.n	8007160 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d023      	beq.n	800712e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070e6:	4b6f      	ldr	r3, [pc, #444]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a6e      	ldr	r2, [pc, #440]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80070ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f2:	f7fc fde7 	bl	8003cc4 <HAL_GetTick>
 80070f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070f8:	e008      	b.n	800710c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070fa:	f7fc fde3 	bl	8003cc4 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e25b      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800710c:	4b65      	ldr	r3, [pc, #404]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0f0      	beq.n	80070fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007118:	4b62      	ldr	r3, [pc, #392]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	061b      	lsls	r3, r3, #24
 8007126:	495f      	ldr	r1, [pc, #380]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007128:	4313      	orrs	r3, r2
 800712a:	604b      	str	r3, [r1, #4]
 800712c:	e018      	b.n	8007160 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800712e:	4b5d      	ldr	r3, [pc, #372]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a5c      	ldr	r2, [pc, #368]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713a:	f7fc fdc3 	bl	8003cc4 <HAL_GetTick>
 800713e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007142:	f7fc fdbf 	bl	8003cc4 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e237      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007154:	4b53      	ldr	r3, [pc, #332]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f0      	bne.n	8007142 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d03c      	beq.n	80071e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01c      	beq.n	80071ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007174:	4b4b      	ldr	r3, [pc, #300]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800717a:	4a4a      	ldr	r2, [pc, #296]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 800717c:	f043 0301 	orr.w	r3, r3, #1
 8007180:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007184:	f7fc fd9e 	bl	8003cc4 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800718c:	f7fc fd9a 	bl	8003cc4 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e212      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800719e:	4b41      	ldr	r3, [pc, #260]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80071a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0ef      	beq.n	800718c <HAL_RCC_OscConfig+0x3ec>
 80071ac:	e01b      	b.n	80071e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071ae:	4b3d      	ldr	r3, [pc, #244]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80071b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071b4:	4a3b      	ldr	r2, [pc, #236]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80071b6:	f023 0301 	bic.w	r3, r3, #1
 80071ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071be:	f7fc fd81 	bl	8003cc4 <HAL_GetTick>
 80071c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071c4:	e008      	b.n	80071d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071c6:	f7fc fd7d 	bl	8003cc4 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d901      	bls.n	80071d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e1f5      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071d8:	4b32      	ldr	r3, [pc, #200]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80071da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1ef      	bne.n	80071c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0304 	and.w	r3, r3, #4
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 80a6 	beq.w	8007340 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071f4:	2300      	movs	r3, #0
 80071f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80071f8:	4b2a      	ldr	r3, [pc, #168]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 80071fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10d      	bne.n	8007220 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007204:	4b27      	ldr	r3, [pc, #156]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007208:	4a26      	ldr	r2, [pc, #152]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 800720a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800720e:	6593      	str	r3, [r2, #88]	; 0x58
 8007210:	4b24      	ldr	r3, [pc, #144]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007218:	60bb      	str	r3, [r7, #8]
 800721a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800721c:	2301      	movs	r3, #1
 800721e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007220:	4b21      	ldr	r3, [pc, #132]	; (80072a8 <HAL_RCC_OscConfig+0x508>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007228:	2b00      	cmp	r3, #0
 800722a:	d118      	bne.n	800725e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800722c:	4b1e      	ldr	r3, [pc, #120]	; (80072a8 <HAL_RCC_OscConfig+0x508>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a1d      	ldr	r2, [pc, #116]	; (80072a8 <HAL_RCC_OscConfig+0x508>)
 8007232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007236:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007238:	f7fc fd44 	bl	8003cc4 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007240:	f7fc fd40 	bl	8003cc4 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e1b8      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007252:	4b15      	ldr	r3, [pc, #84]	; (80072a8 <HAL_RCC_OscConfig+0x508>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0f0      	beq.n	8007240 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d108      	bne.n	8007278 <HAL_RCC_OscConfig+0x4d8>
 8007266:	4b0f      	ldr	r3, [pc, #60]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726c:	4a0d      	ldr	r2, [pc, #52]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 800726e:	f043 0301 	orr.w	r3, r3, #1
 8007272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007276:	e029      	b.n	80072cc <HAL_RCC_OscConfig+0x52c>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	2b05      	cmp	r3, #5
 800727e:	d115      	bne.n	80072ac <HAL_RCC_OscConfig+0x50c>
 8007280:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007286:	4a07      	ldr	r2, [pc, #28]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007288:	f043 0304 	orr.w	r3, r3, #4
 800728c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007290:	4b04      	ldr	r3, [pc, #16]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007296:	4a03      	ldr	r2, [pc, #12]	; (80072a4 <HAL_RCC_OscConfig+0x504>)
 8007298:	f043 0301 	orr.w	r3, r3, #1
 800729c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072a0:	e014      	b.n	80072cc <HAL_RCC_OscConfig+0x52c>
 80072a2:	bf00      	nop
 80072a4:	40021000 	.word	0x40021000
 80072a8:	40007000 	.word	0x40007000
 80072ac:	4b9d      	ldr	r3, [pc, #628]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80072ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b2:	4a9c      	ldr	r2, [pc, #624]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80072b4:	f023 0301 	bic.w	r3, r3, #1
 80072b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072bc:	4b99      	ldr	r3, [pc, #612]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80072be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c2:	4a98      	ldr	r2, [pc, #608]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80072c4:	f023 0304 	bic.w	r3, r3, #4
 80072c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d016      	beq.n	8007302 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d4:	f7fc fcf6 	bl	8003cc4 <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072da:	e00a      	b.n	80072f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072dc:	f7fc fcf2 	bl	8003cc4 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e168      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072f2:	4b8c      	ldr	r3, [pc, #560]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80072f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0ed      	beq.n	80072dc <HAL_RCC_OscConfig+0x53c>
 8007300:	e015      	b.n	800732e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007302:	f7fc fcdf 	bl	8003cc4 <HAL_GetTick>
 8007306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007308:	e00a      	b.n	8007320 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800730a:	f7fc fcdb 	bl	8003cc4 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	f241 3288 	movw	r2, #5000	; 0x1388
 8007318:	4293      	cmp	r3, r2
 800731a:	d901      	bls.n	8007320 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e151      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007320:	4b80      	ldr	r3, [pc, #512]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1ed      	bne.n	800730a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800732e:	7ffb      	ldrb	r3, [r7, #31]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d105      	bne.n	8007340 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007334:	4b7b      	ldr	r3, [pc, #492]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007338:	4a7a      	ldr	r2, [pc, #488]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 800733a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800733e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b00      	cmp	r3, #0
 800734a:	d03c      	beq.n	80073c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	2b00      	cmp	r3, #0
 8007352:	d01c      	beq.n	800738e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007354:	4b73      	ldr	r3, [pc, #460]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007356:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800735a:	4a72      	ldr	r2, [pc, #456]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 800735c:	f043 0301 	orr.w	r3, r3, #1
 8007360:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007364:	f7fc fcae 	bl	8003cc4 <HAL_GetTick>
 8007368:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800736c:	f7fc fcaa 	bl	8003cc4 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e122      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800737e:	4b69      	ldr	r3, [pc, #420]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007380:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0ef      	beq.n	800736c <HAL_RCC_OscConfig+0x5cc>
 800738c:	e01b      	b.n	80073c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800738e:	4b65      	ldr	r3, [pc, #404]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007394:	4a63      	ldr	r2, [pc, #396]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007396:	f023 0301 	bic.w	r3, r3, #1
 800739a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800739e:	f7fc fc91 	bl	8003cc4 <HAL_GetTick>
 80073a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073a4:	e008      	b.n	80073b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073a6:	f7fc fc8d 	bl	8003cc4 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d901      	bls.n	80073b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e105      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073b8:	4b5a      	ldr	r3, [pc, #360]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80073ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1ef      	bne.n	80073a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 80f9 	beq.w	80075c2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	f040 80cf 	bne.w	8007578 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80073da:	4b52      	ldr	r3, [pc, #328]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f003 0203 	and.w	r2, r3, #3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d12c      	bne.n	8007448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f8:	3b01      	subs	r3, #1
 80073fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d123      	bne.n	8007448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800740c:	429a      	cmp	r2, r3
 800740e:	d11b      	bne.n	8007448 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800741c:	429a      	cmp	r2, r3
 800741e:	d113      	bne.n	8007448 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	3b01      	subs	r3, #1
 800742e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007430:	429a      	cmp	r2, r3
 8007432:	d109      	bne.n	8007448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	085b      	lsrs	r3, r3, #1
 8007440:	3b01      	subs	r3, #1
 8007442:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007444:	429a      	cmp	r2, r3
 8007446:	d071      	beq.n	800752c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b0c      	cmp	r3, #12
 800744c:	d068      	beq.n	8007520 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800744e:	4b35      	ldr	r3, [pc, #212]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d105      	bne.n	8007466 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800745a:	4b32      	ldr	r3, [pc, #200]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e0ac      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800746a:	4b2e      	ldr	r3, [pc, #184]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a2d      	ldr	r2, [pc, #180]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007474:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007476:	f7fc fc25 	bl	8003cc4 <HAL_GetTick>
 800747a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800747c:	e008      	b.n	8007490 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747e:	f7fc fc21 	bl	8003cc4 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d901      	bls.n	8007490 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e099      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007490:	4b24      	ldr	r3, [pc, #144]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1f0      	bne.n	800747e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800749c:	4b21      	ldr	r3, [pc, #132]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	4b21      	ldr	r3, [pc, #132]	; (8007528 <HAL_RCC_OscConfig+0x788>)
 80074a2:	4013      	ands	r3, r2
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80074ac:	3a01      	subs	r2, #1
 80074ae:	0112      	lsls	r2, r2, #4
 80074b0:	4311      	orrs	r1, r2
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074b6:	0212      	lsls	r2, r2, #8
 80074b8:	4311      	orrs	r1, r2
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80074be:	0852      	lsrs	r2, r2, #1
 80074c0:	3a01      	subs	r2, #1
 80074c2:	0552      	lsls	r2, r2, #21
 80074c4:	4311      	orrs	r1, r2
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80074ca:	0852      	lsrs	r2, r2, #1
 80074cc:	3a01      	subs	r2, #1
 80074ce:	0652      	lsls	r2, r2, #25
 80074d0:	4311      	orrs	r1, r2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074d6:	06d2      	lsls	r2, r2, #27
 80074d8:	430a      	orrs	r2, r1
 80074da:	4912      	ldr	r1, [pc, #72]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80074e0:	4b10      	ldr	r3, [pc, #64]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a0f      	ldr	r2, [pc, #60]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80074e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074ec:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	4a0c      	ldr	r2, [pc, #48]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 80074f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80074f8:	f7fc fbe4 	bl	8003cc4 <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074fe:	e008      	b.n	8007512 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007500:	f7fc fbe0 	bl	8003cc4 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d901      	bls.n	8007512 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e058      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007512:	4b04      	ldr	r3, [pc, #16]	; (8007524 <HAL_RCC_OscConfig+0x784>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0f0      	beq.n	8007500 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800751e:	e050      	b.n	80075c2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e04f      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
 8007524:	40021000 	.word	0x40021000
 8007528:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800752c:	4b27      	ldr	r3, [pc, #156]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d144      	bne.n	80075c2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007538:	4b24      	ldr	r3, [pc, #144]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a23      	ldr	r2, [pc, #140]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 800753e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007542:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007544:	4b21      	ldr	r3, [pc, #132]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	4a20      	ldr	r2, [pc, #128]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 800754a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800754e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007550:	f7fc fbb8 	bl	8003cc4 <HAL_GetTick>
 8007554:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007556:	e008      	b.n	800756a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007558:	f7fc fbb4 	bl	8003cc4 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e02c      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800756a:	4b18      	ldr	r3, [pc, #96]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0f0      	beq.n	8007558 <HAL_RCC_OscConfig+0x7b8>
 8007576:	e024      	b.n	80075c2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	2b0c      	cmp	r3, #12
 800757c:	d01f      	beq.n	80075be <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800757e:	4b13      	ldr	r3, [pc, #76]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a12      	ldr	r2, [pc, #72]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 8007584:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800758a:	f7fc fb9b 	bl	8003cc4 <HAL_GetTick>
 800758e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007590:	e008      	b.n	80075a4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007592:	f7fc fb97 	bl	8003cc4 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d901      	bls.n	80075a4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e00f      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075a4:	4b09      	ldr	r3, [pc, #36]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1f0      	bne.n	8007592 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80075b0:	4b06      	ldr	r3, [pc, #24]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	4905      	ldr	r1, [pc, #20]	; (80075cc <HAL_RCC_OscConfig+0x82c>)
 80075b6:	4b06      	ldr	r3, [pc, #24]	; (80075d0 <HAL_RCC_OscConfig+0x830>)
 80075b8:	4013      	ands	r3, r2
 80075ba:	60cb      	str	r3, [r1, #12]
 80075bc:	e001      	b.n	80075c2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e000      	b.n	80075c4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3720      	adds	r7, #32
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	40021000 	.word	0x40021000
 80075d0:	feeefffc 	.word	0xfeeefffc

080075d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80075de:	2300      	movs	r3, #0
 80075e0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e11d      	b.n	8007828 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075ec:	4b90      	ldr	r3, [pc, #576]	; (8007830 <HAL_RCC_ClockConfig+0x25c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 030f 	and.w	r3, r3, #15
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d910      	bls.n	800761c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075fa:	4b8d      	ldr	r3, [pc, #564]	; (8007830 <HAL_RCC_ClockConfig+0x25c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f023 020f 	bic.w	r2, r3, #15
 8007602:	498b      	ldr	r1, [pc, #556]	; (8007830 <HAL_RCC_ClockConfig+0x25c>)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	4313      	orrs	r3, r2
 8007608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800760a:	4b89      	ldr	r3, [pc, #548]	; (8007830 <HAL_RCC_ClockConfig+0x25c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	429a      	cmp	r2, r3
 8007616:	d001      	beq.n	800761c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e105      	b.n	8007828 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d010      	beq.n	800764a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	4b81      	ldr	r3, [pc, #516]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007634:	429a      	cmp	r2, r3
 8007636:	d908      	bls.n	800764a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007638:	4b7e      	ldr	r3, [pc, #504]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	497b      	ldr	r1, [pc, #492]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 8007646:	4313      	orrs	r3, r2
 8007648:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d079      	beq.n	800774a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	2b03      	cmp	r3, #3
 800765c:	d11e      	bne.n	800769c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800765e:	4b75      	ldr	r3, [pc, #468]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e0dc      	b.n	8007828 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800766e:	f000 fa3b 	bl	8007ae8 <RCC_GetSysClockFreqFromPLLSource>
 8007672:	4603      	mov	r3, r0
 8007674:	4a70      	ldr	r2, [pc, #448]	; (8007838 <HAL_RCC_ClockConfig+0x264>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d946      	bls.n	8007708 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800767a:	4b6e      	ldr	r3, [pc, #440]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d140      	bne.n	8007708 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007686:	4b6b      	ldr	r3, [pc, #428]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800768e:	4a69      	ldr	r2, [pc, #420]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 8007690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007694:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007696:	2380      	movs	r3, #128	; 0x80
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	e035      	b.n	8007708 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d107      	bne.n	80076b4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076a4:	4b63      	ldr	r3, [pc, #396]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d115      	bne.n	80076dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e0b9      	b.n	8007828 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d107      	bne.n	80076cc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80076bc:	4b5d      	ldr	r3, [pc, #372]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d109      	bne.n	80076dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0ad      	b.n	8007828 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076cc:	4b59      	ldr	r3, [pc, #356]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e0a5      	b.n	8007828 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80076dc:	f000 f8b4 	bl	8007848 <HAL_RCC_GetSysClockFreq>
 80076e0:	4603      	mov	r3, r0
 80076e2:	4a55      	ldr	r2, [pc, #340]	; (8007838 <HAL_RCC_ClockConfig+0x264>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d90f      	bls.n	8007708 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80076e8:	4b52      	ldr	r3, [pc, #328]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d109      	bne.n	8007708 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80076f4:	4b4f      	ldr	r3, [pc, #316]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076fc:	4a4d      	ldr	r2, [pc, #308]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 80076fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007702:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007704:	2380      	movs	r3, #128	; 0x80
 8007706:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007708:	4b4a      	ldr	r3, [pc, #296]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f023 0203 	bic.w	r2, r3, #3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	4947      	ldr	r1, [pc, #284]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 8007716:	4313      	orrs	r3, r2
 8007718:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800771a:	f7fc fad3 	bl	8003cc4 <HAL_GetTick>
 800771e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007720:	e00a      	b.n	8007738 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007722:	f7fc facf 	bl	8003cc4 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007730:	4293      	cmp	r3, r2
 8007732:	d901      	bls.n	8007738 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e077      	b.n	8007828 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007738:	4b3e      	ldr	r3, [pc, #248]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f003 020c 	and.w	r2, r3, #12
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	429a      	cmp	r2, r3
 8007748:	d1eb      	bne.n	8007722 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2b80      	cmp	r3, #128	; 0x80
 800774e:	d105      	bne.n	800775c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007750:	4b38      	ldr	r3, [pc, #224]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	4a37      	ldr	r2, [pc, #220]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 8007756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800775a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d010      	beq.n	800778a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689a      	ldr	r2, [r3, #8]
 800776c:	4b31      	ldr	r3, [pc, #196]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007774:	429a      	cmp	r2, r3
 8007776:	d208      	bcs.n	800778a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007778:	4b2e      	ldr	r3, [pc, #184]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	492b      	ldr	r1, [pc, #172]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 8007786:	4313      	orrs	r3, r2
 8007788:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800778a:	4b29      	ldr	r3, [pc, #164]	; (8007830 <HAL_RCC_ClockConfig+0x25c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d210      	bcs.n	80077ba <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007798:	4b25      	ldr	r3, [pc, #148]	; (8007830 <HAL_RCC_ClockConfig+0x25c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f023 020f 	bic.w	r2, r3, #15
 80077a0:	4923      	ldr	r1, [pc, #140]	; (8007830 <HAL_RCC_ClockConfig+0x25c>)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077a8:	4b21      	ldr	r3, [pc, #132]	; (8007830 <HAL_RCC_ClockConfig+0x25c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d001      	beq.n	80077ba <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e036      	b.n	8007828 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0304 	and.w	r3, r3, #4
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d008      	beq.n	80077d8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077c6:	4b1b      	ldr	r3, [pc, #108]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	4918      	ldr	r1, [pc, #96]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0308 	and.w	r3, r3, #8
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d009      	beq.n	80077f8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077e4:	4b13      	ldr	r3, [pc, #76]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	4910      	ldr	r1, [pc, #64]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077f8:	f000 f826 	bl	8007848 <HAL_RCC_GetSysClockFreq>
 80077fc:	4602      	mov	r2, r0
 80077fe:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <HAL_RCC_ClockConfig+0x260>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	091b      	lsrs	r3, r3, #4
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	490c      	ldr	r1, [pc, #48]	; (800783c <HAL_RCC_ClockConfig+0x268>)
 800780a:	5ccb      	ldrb	r3, [r1, r3]
 800780c:	f003 031f 	and.w	r3, r3, #31
 8007810:	fa22 f303 	lsr.w	r3, r2, r3
 8007814:	4a0a      	ldr	r2, [pc, #40]	; (8007840 <HAL_RCC_ClockConfig+0x26c>)
 8007816:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007818:	4b0a      	ldr	r3, [pc, #40]	; (8007844 <HAL_RCC_ClockConfig+0x270>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f7fc f8e1 	bl	80039e4 <HAL_InitTick>
 8007822:	4603      	mov	r3, r0
 8007824:	73fb      	strb	r3, [r7, #15]

  return status;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	40022000 	.word	0x40022000
 8007834:	40021000 	.word	0x40021000
 8007838:	04c4b400 	.word	0x04c4b400
 800783c:	0800c11c 	.word	0x0800c11c
 8007840:	20000008 	.word	0x20000008
 8007844:	2000000c 	.word	0x2000000c

08007848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007848:	b480      	push	{r7}
 800784a:	b089      	sub	sp, #36	; 0x24
 800784c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	61fb      	str	r3, [r7, #28]
 8007852:	2300      	movs	r3, #0
 8007854:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007856:	4b3e      	ldr	r3, [pc, #248]	; (8007950 <HAL_RCC_GetSysClockFreq+0x108>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 030c 	and.w	r3, r3, #12
 800785e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007860:	4b3b      	ldr	r3, [pc, #236]	; (8007950 <HAL_RCC_GetSysClockFreq+0x108>)
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0303 	and.w	r3, r3, #3
 8007868:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d005      	beq.n	800787c <HAL_RCC_GetSysClockFreq+0x34>
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	2b0c      	cmp	r3, #12
 8007874:	d121      	bne.n	80078ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d11e      	bne.n	80078ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800787c:	4b34      	ldr	r3, [pc, #208]	; (8007950 <HAL_RCC_GetSysClockFreq+0x108>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0308 	and.w	r3, r3, #8
 8007884:	2b00      	cmp	r3, #0
 8007886:	d107      	bne.n	8007898 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007888:	4b31      	ldr	r3, [pc, #196]	; (8007950 <HAL_RCC_GetSysClockFreq+0x108>)
 800788a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800788e:	0a1b      	lsrs	r3, r3, #8
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	61fb      	str	r3, [r7, #28]
 8007896:	e005      	b.n	80078a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007898:	4b2d      	ldr	r3, [pc, #180]	; (8007950 <HAL_RCC_GetSysClockFreq+0x108>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	091b      	lsrs	r3, r3, #4
 800789e:	f003 030f 	and.w	r3, r3, #15
 80078a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80078a4:	4a2b      	ldr	r2, [pc, #172]	; (8007954 <HAL_RCC_GetSysClockFreq+0x10c>)
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10d      	bne.n	80078d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078b8:	e00a      	b.n	80078d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d102      	bne.n	80078c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078c0:	4b25      	ldr	r3, [pc, #148]	; (8007958 <HAL_RCC_GetSysClockFreq+0x110>)
 80078c2:	61bb      	str	r3, [r7, #24]
 80078c4:	e004      	b.n	80078d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d101      	bne.n	80078d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078cc:	4b23      	ldr	r3, [pc, #140]	; (800795c <HAL_RCC_GetSysClockFreq+0x114>)
 80078ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	2b0c      	cmp	r3, #12
 80078d4:	d134      	bne.n	8007940 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078d6:	4b1e      	ldr	r3, [pc, #120]	; (8007950 <HAL_RCC_GetSysClockFreq+0x108>)
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d003      	beq.n	80078ee <HAL_RCC_GetSysClockFreq+0xa6>
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d003      	beq.n	80078f4 <HAL_RCC_GetSysClockFreq+0xac>
 80078ec:	e005      	b.n	80078fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80078ee:	4b1a      	ldr	r3, [pc, #104]	; (8007958 <HAL_RCC_GetSysClockFreq+0x110>)
 80078f0:	617b      	str	r3, [r7, #20]
      break;
 80078f2:	e005      	b.n	8007900 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80078f4:	4b19      	ldr	r3, [pc, #100]	; (800795c <HAL_RCC_GetSysClockFreq+0x114>)
 80078f6:	617b      	str	r3, [r7, #20]
      break;
 80078f8:	e002      	b.n	8007900 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	617b      	str	r3, [r7, #20]
      break;
 80078fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007900:	4b13      	ldr	r3, [pc, #76]	; (8007950 <HAL_RCC_GetSysClockFreq+0x108>)
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	091b      	lsrs	r3, r3, #4
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	3301      	adds	r3, #1
 800790c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800790e:	4b10      	ldr	r3, [pc, #64]	; (8007950 <HAL_RCC_GetSysClockFreq+0x108>)
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	fb03 f202 	mul.w	r2, r3, r2
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	fbb2 f3f3 	udiv	r3, r2, r3
 8007924:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007926:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <HAL_RCC_GetSysClockFreq+0x108>)
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	0e5b      	lsrs	r3, r3, #25
 800792c:	f003 0303 	and.w	r3, r3, #3
 8007930:	3301      	adds	r3, #1
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	fbb2 f3f3 	udiv	r3, r2, r3
 800793e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007940:	69bb      	ldr	r3, [r7, #24]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3724      	adds	r7, #36	; 0x24
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	40021000 	.word	0x40021000
 8007954:	0800c134 	.word	0x0800c134
 8007958:	00f42400 	.word	0x00f42400
 800795c:	007a1200 	.word	0x007a1200

08007960 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007964:	4b03      	ldr	r3, [pc, #12]	; (8007974 <HAL_RCC_GetHCLKFreq+0x14>)
 8007966:	681b      	ldr	r3, [r3, #0]
}
 8007968:	4618      	mov	r0, r3
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	20000008 	.word	0x20000008

08007978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800797c:	f7ff fff0 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 8007980:	4602      	mov	r2, r0
 8007982:	4b06      	ldr	r3, [pc, #24]	; (800799c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	0a1b      	lsrs	r3, r3, #8
 8007988:	f003 0307 	and.w	r3, r3, #7
 800798c:	4904      	ldr	r1, [pc, #16]	; (80079a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800798e:	5ccb      	ldrb	r3, [r1, r3]
 8007990:	f003 031f 	and.w	r3, r3, #31
 8007994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007998:	4618      	mov	r0, r3
 800799a:	bd80      	pop	{r7, pc}
 800799c:	40021000 	.word	0x40021000
 80079a0:	0800c12c 	.word	0x0800c12c

080079a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80079a8:	f7ff ffda 	bl	8007960 <HAL_RCC_GetHCLKFreq>
 80079ac:	4602      	mov	r2, r0
 80079ae:	4b06      	ldr	r3, [pc, #24]	; (80079c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	0adb      	lsrs	r3, r3, #11
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	4904      	ldr	r1, [pc, #16]	; (80079cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80079ba:	5ccb      	ldrb	r3, [r1, r3]
 80079bc:	f003 031f 	and.w	r3, r3, #31
 80079c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	40021000 	.word	0x40021000
 80079cc:	0800c12c 	.word	0x0800c12c

080079d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	220f      	movs	r2, #15
 80079de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80079e0:	4b12      	ldr	r3, [pc, #72]	; (8007a2c <HAL_RCC_GetClockConfig+0x5c>)
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 0203 	and.w	r2, r3, #3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80079ec:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <HAL_RCC_GetClockConfig+0x5c>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80079f8:	4b0c      	ldr	r3, [pc, #48]	; (8007a2c <HAL_RCC_GetClockConfig+0x5c>)
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007a04:	4b09      	ldr	r3, [pc, #36]	; (8007a2c <HAL_RCC_GetClockConfig+0x5c>)
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	08db      	lsrs	r3, r3, #3
 8007a0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007a12:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <HAL_RCC_GetClockConfig+0x60>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 020f 	and.w	r2, r3, #15
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	601a      	str	r2, [r3, #0]
}
 8007a1e:	bf00      	nop
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	40021000 	.word	0x40021000
 8007a30:	40022000 	.word	0x40022000

08007a34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a40:	4b27      	ldr	r3, [pc, #156]	; (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a4c:	f7ff f8e4 	bl	8006c18 <HAL_PWREx_GetVoltageRange>
 8007a50:	6178      	str	r0, [r7, #20]
 8007a52:	e014      	b.n	8007a7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a54:	4b22      	ldr	r3, [pc, #136]	; (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a58:	4a21      	ldr	r2, [pc, #132]	; (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8007a60:	4b1f      	ldr	r3, [pc, #124]	; (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a6c:	f7ff f8d4 	bl	8006c18 <HAL_PWREx_GetVoltageRange>
 8007a70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a72:	4b1b      	ldr	r3, [pc, #108]	; (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a76:	4a1a      	ldr	r2, [pc, #104]	; (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a84:	d10b      	bne.n	8007a9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b80      	cmp	r3, #128	; 0x80
 8007a8a:	d913      	bls.n	8007ab4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2ba0      	cmp	r3, #160	; 0xa0
 8007a90:	d902      	bls.n	8007a98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a92:	2302      	movs	r3, #2
 8007a94:	613b      	str	r3, [r7, #16]
 8007a96:	e00d      	b.n	8007ab4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a98:	2301      	movs	r3, #1
 8007a9a:	613b      	str	r3, [r7, #16]
 8007a9c:	e00a      	b.n	8007ab4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8007aa2:	d902      	bls.n	8007aaa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	613b      	str	r3, [r7, #16]
 8007aa8:	e004      	b.n	8007ab4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b70      	cmp	r3, #112	; 0x70
 8007aae:	d101      	bne.n	8007ab4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f023 020f 	bic.w	r2, r3, #15
 8007abc:	4909      	ldr	r1, [pc, #36]	; (8007ae4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007ac4:	4b07      	ldr	r3, [pc, #28]	; (8007ae4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 030f 	and.w	r3, r3, #15
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d001      	beq.n	8007ad6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e000      	b.n	8007ad8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3718      	adds	r7, #24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	40021000 	.word	0x40021000
 8007ae4:	40022000 	.word	0x40022000

08007ae8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007aee:	4b2d      	ldr	r3, [pc, #180]	; (8007ba4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	f003 0303 	and.w	r3, r3, #3
 8007af6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d00b      	beq.n	8007b16 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d825      	bhi.n	8007b50 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d008      	beq.n	8007b1c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d11f      	bne.n	8007b50 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007b10:	4b25      	ldr	r3, [pc, #148]	; (8007ba8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007b12:	613b      	str	r3, [r7, #16]
    break;
 8007b14:	e01f      	b.n	8007b56 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007b16:	4b25      	ldr	r3, [pc, #148]	; (8007bac <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007b18:	613b      	str	r3, [r7, #16]
    break;
 8007b1a:	e01c      	b.n	8007b56 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007b1c:	4b21      	ldr	r3, [pc, #132]	; (8007ba4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0308 	and.w	r3, r3, #8
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d107      	bne.n	8007b38 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007b28:	4b1e      	ldr	r3, [pc, #120]	; (8007ba4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b2e:	0a1b      	lsrs	r3, r3, #8
 8007b30:	f003 030f 	and.w	r3, r3, #15
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	e005      	b.n	8007b44 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007b38:	4b1a      	ldr	r3, [pc, #104]	; (8007ba4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	091b      	lsrs	r3, r3, #4
 8007b3e:	f003 030f 	and.w	r3, r3, #15
 8007b42:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007b44:	4a1a      	ldr	r2, [pc, #104]	; (8007bb0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b4c:	613b      	str	r3, [r7, #16]
    break;
 8007b4e:	e002      	b.n	8007b56 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	613b      	str	r3, [r7, #16]
    break;
 8007b54:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b56:	4b13      	ldr	r3, [pc, #76]	; (8007ba4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	091b      	lsrs	r3, r3, #4
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	3301      	adds	r3, #1
 8007b62:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007b64:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	0a1b      	lsrs	r3, r3, #8
 8007b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	fb03 f202 	mul.w	r2, r3, r2
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b7c:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	0e5b      	lsrs	r3, r3, #25
 8007b82:	f003 0303 	and.w	r3, r3, #3
 8007b86:	3301      	adds	r3, #1
 8007b88:	005b      	lsls	r3, r3, #1
 8007b8a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b94:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007b96:	683b      	ldr	r3, [r7, #0]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	371c      	adds	r7, #28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	40021000 	.word	0x40021000
 8007ba8:	00f42400 	.word	0x00f42400
 8007bac:	007a1200 	.word	0x007a1200
 8007bb0:	0800c134 	.word	0x0800c134

08007bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d040      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bd4:	2b80      	cmp	r3, #128	; 0x80
 8007bd6:	d02a      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007bd8:	2b80      	cmp	r3, #128	; 0x80
 8007bda:	d825      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007bdc:	2b60      	cmp	r3, #96	; 0x60
 8007bde:	d026      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007be0:	2b60      	cmp	r3, #96	; 0x60
 8007be2:	d821      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007be4:	2b40      	cmp	r3, #64	; 0x40
 8007be6:	d006      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007be8:	2b40      	cmp	r3, #64	; 0x40
 8007bea:	d81d      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d009      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007bf0:	2b20      	cmp	r3, #32
 8007bf2:	d010      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007bf4:	e018      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007bf6:	4b89      	ldr	r3, [pc, #548]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	4a88      	ldr	r2, [pc, #544]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c00:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c02:	e015      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3304      	adds	r3, #4
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fb12 	bl	8008234 <RCCEx_PLLSAI1_Config>
 8007c10:	4603      	mov	r3, r0
 8007c12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c14:	e00c      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3320      	adds	r3, #32
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fbfd 	bl	800841c <RCCEx_PLLSAI2_Config>
 8007c22:	4603      	mov	r3, r0
 8007c24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c26:	e003      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	74fb      	strb	r3, [r7, #19]
      break;
 8007c2c:	e000      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c30:	7cfb      	ldrb	r3, [r7, #19]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10b      	bne.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c36:	4b79      	ldr	r3, [pc, #484]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007c38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c3c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c44:	4975      	ldr	r1, [pc, #468]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007c4c:	e001      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4e:	7cfb      	ldrb	r3, [r7, #19]
 8007c50:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d047      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c66:	d030      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c6c:	d82a      	bhi.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c72:	d02a      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c78:	d824      	bhi.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c7e:	d008      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c84:	d81e      	bhi.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c8e:	d010      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007c90:	e018      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007c92:	4b62      	ldr	r3, [pc, #392]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	4a61      	ldr	r2, [pc, #388]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c9c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007c9e:	e015      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fac4 	bl	8008234 <RCCEx_PLLSAI1_Config>
 8007cac:	4603      	mov	r3, r0
 8007cae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007cb0:	e00c      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3320      	adds	r3, #32
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f000 fbaf 	bl	800841c <RCCEx_PLLSAI2_Config>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007cc2:	e003      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	74fb      	strb	r3, [r7, #19]
      break;
 8007cc8:	e000      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ccc:	7cfb      	ldrb	r3, [r7, #19]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10b      	bne.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007cd2:	4b52      	ldr	r3, [pc, #328]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007cd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce0:	494e      	ldr	r1, [pc, #312]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007ce8:	e001      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cea:	7cfb      	ldrb	r3, [r7, #19]
 8007cec:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 809f 	beq.w	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007d00:	4b46      	ldr	r3, [pc, #280]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e000      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007d10:	2300      	movs	r3, #0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00d      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d16:	4b41      	ldr	r3, [pc, #260]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1a:	4a40      	ldr	r2, [pc, #256]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d20:	6593      	str	r3, [r2, #88]	; 0x58
 8007d22:	4b3e      	ldr	r3, [pc, #248]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d2a:	60bb      	str	r3, [r7, #8]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d32:	4b3b      	ldr	r3, [pc, #236]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a3a      	ldr	r2, [pc, #232]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d3e:	f7fb ffc1 	bl	8003cc4 <HAL_GetTick>
 8007d42:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007d44:	e009      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d46:	f7fb ffbd 	bl	8003cc4 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d902      	bls.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	74fb      	strb	r3, [r7, #19]
        break;
 8007d58:	e005      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007d5a:	4b31      	ldr	r3, [pc, #196]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0ef      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007d66:	7cfb      	ldrb	r3, [r7, #19]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d15b      	bne.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d6c:	4b2b      	ldr	r3, [pc, #172]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d76:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01f      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d019      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d8a:	4b24      	ldr	r3, [pc, #144]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d94:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d96:	4b21      	ldr	r3, [pc, #132]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9c:	4a1f      	ldr	r2, [pc, #124]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007da6:	4b1d      	ldr	r3, [pc, #116]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dac:	4a1b      	ldr	r2, [pc, #108]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007db6:	4a19      	ldr	r2, [pc, #100]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d016      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc8:	f7fb ff7c 	bl	8003cc4 <HAL_GetTick>
 8007dcc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dce:	e00b      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dd0:	f7fb ff78 	bl	8003cc4 <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d902      	bls.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	74fb      	strb	r3, [r7, #19]
            break;
 8007de6:	e006      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007de8:	4b0c      	ldr	r3, [pc, #48]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0ec      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007df6:	7cfb      	ldrb	r3, [r7, #19]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10c      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dfc:	4b07      	ldr	r3, [pc, #28]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e0c:	4903      	ldr	r1, [pc, #12]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007e14:	e008      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e16:	7cfb      	ldrb	r3, [r7, #19]
 8007e18:	74bb      	strb	r3, [r7, #18]
 8007e1a:	e005      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007e1c:	40021000 	.word	0x40021000
 8007e20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e24:	7cfb      	ldrb	r3, [r7, #19]
 8007e26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e28:	7c7b      	ldrb	r3, [r7, #17]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d105      	bne.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e2e:	4ba0      	ldr	r3, [pc, #640]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e32:	4a9f      	ldr	r2, [pc, #636]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e46:	4b9a      	ldr	r3, [pc, #616]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e4c:	f023 0203 	bic.w	r2, r3, #3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e54:	4996      	ldr	r1, [pc, #600]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0302 	and.w	r3, r3, #2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00a      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e68:	4b91      	ldr	r3, [pc, #580]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e6e:	f023 020c 	bic.w	r2, r3, #12
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e76:	498e      	ldr	r1, [pc, #568]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0304 	and.w	r3, r3, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e8a:	4b89      	ldr	r3, [pc, #548]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e98:	4985      	ldr	r1, [pc, #532]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0308 	and.w	r3, r3, #8
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00a      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007eac:	4b80      	ldr	r3, [pc, #512]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eba:	497d      	ldr	r1, [pc, #500]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0310 	and.w	r3, r3, #16
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00a      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ece:	4b78      	ldr	r3, [pc, #480]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007edc:	4974      	ldr	r1, [pc, #464]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00a      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ef0:	4b6f      	ldr	r3, [pc, #444]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007efe:	496c      	ldr	r1, [pc, #432]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00a      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f12:	4b67      	ldr	r3, [pc, #412]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f20:	4963      	ldr	r1, [pc, #396]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00a      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f34:	4b5e      	ldr	r3, [pc, #376]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f42:	495b      	ldr	r1, [pc, #364]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007f44:	4313      	orrs	r3, r2
 8007f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f56:	4b56      	ldr	r3, [pc, #344]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f64:	4952      	ldr	r1, [pc, #328]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00a      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f78:	4b4d      	ldr	r3, [pc, #308]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f86:	494a      	ldr	r1, [pc, #296]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f9a:	4b45      	ldr	r3, [pc, #276]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa8:	4941      	ldr	r1, [pc, #260]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00a      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007fbc:	4b3c      	ldr	r3, [pc, #240]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fc2:	f023 0203 	bic.w	r2, r3, #3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fca:	4939      	ldr	r1, [pc, #228]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d028      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007fde:	4b34      	ldr	r3, [pc, #208]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fec:	4930      	ldr	r1, [pc, #192]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ffc:	d106      	bne.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ffe:	4b2c      	ldr	r3, [pc, #176]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	4a2b      	ldr	r2, [pc, #172]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008008:	60d3      	str	r3, [r2, #12]
 800800a:	e011      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008010:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008014:	d10c      	bne.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	3304      	adds	r3, #4
 800801a:	2101      	movs	r1, #1
 800801c:	4618      	mov	r0, r3
 800801e:	f000 f909 	bl	8008234 <RCCEx_PLLSAI1_Config>
 8008022:	4603      	mov	r3, r0
 8008024:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008026:	7cfb      	ldrb	r3, [r7, #19]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800802c:	7cfb      	ldrb	r3, [r7, #19]
 800802e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d04d      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008044:	d108      	bne.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8008046:	4b1a      	ldr	r3, [pc, #104]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008048:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800804c:	4a18      	ldr	r2, [pc, #96]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800804e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008052:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008056:	e012      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008058:	4b15      	ldr	r3, [pc, #84]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800805a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800805e:	4a14      	ldr	r2, [pc, #80]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008064:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008068:	4b11      	ldr	r3, [pc, #68]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800806a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800806e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008076:	490e      	ldr	r1, [pc, #56]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008078:	4313      	orrs	r3, r2
 800807a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008086:	d106      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008088:	4b09      	ldr	r3, [pc, #36]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	4a08      	ldr	r2, [pc, #32]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800808e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008092:	60d3      	str	r3, [r2, #12]
 8008094:	e020      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800809a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800809e:	d109      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80080a0:	4b03      	ldr	r3, [pc, #12]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	4a02      	ldr	r2, [pc, #8]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080aa:	60d3      	str	r3, [r2, #12]
 80080ac:	e014      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80080ae:	bf00      	nop
 80080b0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080bc:	d10c      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	3304      	adds	r3, #4
 80080c2:	2101      	movs	r1, #1
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f8b5 	bl	8008234 <RCCEx_PLLSAI1_Config>
 80080ca:	4603      	mov	r3, r0
 80080cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80080ce:	7cfb      	ldrb	r3, [r7, #19]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80080d4:	7cfb      	ldrb	r3, [r7, #19]
 80080d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d028      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080e4:	4b4a      	ldr	r3, [pc, #296]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080f2:	4947      	ldr	r1, [pc, #284]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008102:	d106      	bne.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008104:	4b42      	ldr	r3, [pc, #264]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	4a41      	ldr	r2, [pc, #260]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800810a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800810e:	60d3      	str	r3, [r2, #12]
 8008110:	e011      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008116:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800811a:	d10c      	bne.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3304      	adds	r3, #4
 8008120:	2101      	movs	r1, #1
 8008122:	4618      	mov	r0, r3
 8008124:	f000 f886 	bl	8008234 <RCCEx_PLLSAI1_Config>
 8008128:	4603      	mov	r3, r0
 800812a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800812c:	7cfb      	ldrb	r3, [r7, #19]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8008132:	7cfb      	ldrb	r3, [r7, #19]
 8008134:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d01e      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008142:	4b33      	ldr	r3, [pc, #204]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008148:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008152:	492f      	ldr	r1, [pc, #188]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008154:	4313      	orrs	r3, r2
 8008156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008160:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008164:	d10c      	bne.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	3304      	adds	r3, #4
 800816a:	2102      	movs	r1, #2
 800816c:	4618      	mov	r0, r3
 800816e:	f000 f861 	bl	8008234 <RCCEx_PLLSAI1_Config>
 8008172:	4603      	mov	r3, r0
 8008174:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008176:	7cfb      	ldrb	r3, [r7, #19]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800817c:	7cfb      	ldrb	r3, [r7, #19]
 800817e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00b      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800818c:	4b20      	ldr	r3, [pc, #128]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800818e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008192:	f023 0204 	bic.w	r2, r3, #4
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800819c:	491c      	ldr	r1, [pc, #112]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80081b0:	4b17      	ldr	r3, [pc, #92]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081b6:	f023 0218 	bic.w	r2, r3, #24
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c0:	4913      	ldr	r1, [pc, #76]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d017      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80081d4:	4b0e      	ldr	r3, [pc, #56]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e4:	490a      	ldr	r1, [pc, #40]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081f6:	d105      	bne.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081f8:	4b05      	ldr	r3, [pc, #20]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	4a04      	ldr	r2, [pc, #16]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008202:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008204:	7cbb      	ldrb	r3, [r7, #18]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	40021000 	.word	0x40021000

08008214 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008214:	b480      	push	{r7}
 8008216:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008218:	4b05      	ldr	r3, [pc, #20]	; (8008230 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a04      	ldr	r2, [pc, #16]	; (8008230 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800821e:	f043 0304 	orr.w	r3, r3, #4
 8008222:	6013      	str	r3, [r2, #0]
}
 8008224:	bf00      	nop
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	40021000 	.word	0x40021000

08008234 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008242:	4b72      	ldr	r3, [pc, #456]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f003 0303 	and.w	r3, r3, #3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00e      	beq.n	800826c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800824e:	4b6f      	ldr	r3, [pc, #444]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f003 0203 	and.w	r2, r3, #3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d103      	bne.n	8008266 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
       ||
 8008262:	2b00      	cmp	r3, #0
 8008264:	d142      	bne.n	80082ec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	73fb      	strb	r3, [r7, #15]
 800826a:	e03f      	b.n	80082ec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b03      	cmp	r3, #3
 8008272:	d018      	beq.n	80082a6 <RCCEx_PLLSAI1_Config+0x72>
 8008274:	2b03      	cmp	r3, #3
 8008276:	d825      	bhi.n	80082c4 <RCCEx_PLLSAI1_Config+0x90>
 8008278:	2b01      	cmp	r3, #1
 800827a:	d002      	beq.n	8008282 <RCCEx_PLLSAI1_Config+0x4e>
 800827c:	2b02      	cmp	r3, #2
 800827e:	d009      	beq.n	8008294 <RCCEx_PLLSAI1_Config+0x60>
 8008280:	e020      	b.n	80082c4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008282:	4b62      	ldr	r3, [pc, #392]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d11d      	bne.n	80082ca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008292:	e01a      	b.n	80082ca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008294:	4b5d      	ldr	r3, [pc, #372]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800829c:	2b00      	cmp	r3, #0
 800829e:	d116      	bne.n	80082ce <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082a4:	e013      	b.n	80082ce <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80082a6:	4b59      	ldr	r3, [pc, #356]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10f      	bne.n	80082d2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80082b2:	4b56      	ldr	r3, [pc, #344]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d109      	bne.n	80082d2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80082c2:	e006      	b.n	80082d2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	73fb      	strb	r3, [r7, #15]
      break;
 80082c8:	e004      	b.n	80082d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80082ca:	bf00      	nop
 80082cc:	e002      	b.n	80082d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80082ce:	bf00      	nop
 80082d0:	e000      	b.n	80082d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80082d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d108      	bne.n	80082ec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80082da:	4b4c      	ldr	r3, [pc, #304]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f023 0203 	bic.w	r2, r3, #3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4949      	ldr	r1, [pc, #292]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f040 8086 	bne.w	8008400 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80082f4:	4b45      	ldr	r3, [pc, #276]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a44      	ldr	r2, [pc, #272]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 80082fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008300:	f7fb fce0 	bl	8003cc4 <HAL_GetTick>
 8008304:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008306:	e009      	b.n	800831c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008308:	f7fb fcdc 	bl	8003cc4 <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	2b02      	cmp	r3, #2
 8008314:	d902      	bls.n	800831c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	73fb      	strb	r3, [r7, #15]
        break;
 800831a:	e005      	b.n	8008328 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800831c:	4b3b      	ldr	r3, [pc, #236]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1ef      	bne.n	8008308 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008328:	7bfb      	ldrb	r3, [r7, #15]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d168      	bne.n	8008400 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d113      	bne.n	800835c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008334:	4b35      	ldr	r3, [pc, #212]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008336:	691a      	ldr	r2, [r3, #16]
 8008338:	4b35      	ldr	r3, [pc, #212]	; (8008410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800833a:	4013      	ands	r3, r2
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6892      	ldr	r2, [r2, #8]
 8008340:	0211      	lsls	r1, r2, #8
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	68d2      	ldr	r2, [r2, #12]
 8008346:	06d2      	lsls	r2, r2, #27
 8008348:	4311      	orrs	r1, r2
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	6852      	ldr	r2, [r2, #4]
 800834e:	3a01      	subs	r2, #1
 8008350:	0112      	lsls	r2, r2, #4
 8008352:	430a      	orrs	r2, r1
 8008354:	492d      	ldr	r1, [pc, #180]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008356:	4313      	orrs	r3, r2
 8008358:	610b      	str	r3, [r1, #16]
 800835a:	e02d      	b.n	80083b8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d115      	bne.n	800838e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008362:	4b2a      	ldr	r3, [pc, #168]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008364:	691a      	ldr	r2, [r3, #16]
 8008366:	4b2b      	ldr	r3, [pc, #172]	; (8008414 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008368:	4013      	ands	r3, r2
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	6892      	ldr	r2, [r2, #8]
 800836e:	0211      	lsls	r1, r2, #8
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	6912      	ldr	r2, [r2, #16]
 8008374:	0852      	lsrs	r2, r2, #1
 8008376:	3a01      	subs	r2, #1
 8008378:	0552      	lsls	r2, r2, #21
 800837a:	4311      	orrs	r1, r2
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	6852      	ldr	r2, [r2, #4]
 8008380:	3a01      	subs	r2, #1
 8008382:	0112      	lsls	r2, r2, #4
 8008384:	430a      	orrs	r2, r1
 8008386:	4921      	ldr	r1, [pc, #132]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008388:	4313      	orrs	r3, r2
 800838a:	610b      	str	r3, [r1, #16]
 800838c:	e014      	b.n	80083b8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800838e:	4b1f      	ldr	r3, [pc, #124]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008390:	691a      	ldr	r2, [r3, #16]
 8008392:	4b21      	ldr	r3, [pc, #132]	; (8008418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008394:	4013      	ands	r3, r2
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	6892      	ldr	r2, [r2, #8]
 800839a:	0211      	lsls	r1, r2, #8
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	6952      	ldr	r2, [r2, #20]
 80083a0:	0852      	lsrs	r2, r2, #1
 80083a2:	3a01      	subs	r2, #1
 80083a4:	0652      	lsls	r2, r2, #25
 80083a6:	4311      	orrs	r1, r2
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6852      	ldr	r2, [r2, #4]
 80083ac:	3a01      	subs	r2, #1
 80083ae:	0112      	lsls	r2, r2, #4
 80083b0:	430a      	orrs	r2, r1
 80083b2:	4916      	ldr	r1, [pc, #88]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80083b8:	4b14      	ldr	r3, [pc, #80]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a13      	ldr	r2, [pc, #76]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083c4:	f7fb fc7e 	bl	8003cc4 <HAL_GetTick>
 80083c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80083ca:	e009      	b.n	80083e0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80083cc:	f7fb fc7a 	bl	8003cc4 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d902      	bls.n	80083e0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	73fb      	strb	r3, [r7, #15]
          break;
 80083de:	e005      	b.n	80083ec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80083e0:	4b0a      	ldr	r3, [pc, #40]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d0ef      	beq.n	80083cc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d106      	bne.n	8008400 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80083f2:	4b06      	ldr	r3, [pc, #24]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083f4:	691a      	ldr	r2, [r3, #16]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	4904      	ldr	r1, [pc, #16]	; (800840c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	40021000 	.word	0x40021000
 8008410:	07ff800f 	.word	0x07ff800f
 8008414:	ff9f800f 	.word	0xff9f800f
 8008418:	f9ff800f 	.word	0xf9ff800f

0800841c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800842a:	4b72      	ldr	r3, [pc, #456]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f003 0303 	and.w	r3, r3, #3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00e      	beq.n	8008454 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008436:	4b6f      	ldr	r3, [pc, #444]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f003 0203 	and.w	r2, r3, #3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d103      	bne.n	800844e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
       ||
 800844a:	2b00      	cmp	r3, #0
 800844c:	d142      	bne.n	80084d4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	73fb      	strb	r3, [r7, #15]
 8008452:	e03f      	b.n	80084d4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b03      	cmp	r3, #3
 800845a:	d018      	beq.n	800848e <RCCEx_PLLSAI2_Config+0x72>
 800845c:	2b03      	cmp	r3, #3
 800845e:	d825      	bhi.n	80084ac <RCCEx_PLLSAI2_Config+0x90>
 8008460:	2b01      	cmp	r3, #1
 8008462:	d002      	beq.n	800846a <RCCEx_PLLSAI2_Config+0x4e>
 8008464:	2b02      	cmp	r3, #2
 8008466:	d009      	beq.n	800847c <RCCEx_PLLSAI2_Config+0x60>
 8008468:	e020      	b.n	80084ac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800846a:	4b62      	ldr	r3, [pc, #392]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d11d      	bne.n	80084b2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800847a:	e01a      	b.n	80084b2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800847c:	4b5d      	ldr	r3, [pc, #372]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008484:	2b00      	cmp	r3, #0
 8008486:	d116      	bne.n	80084b6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800848c:	e013      	b.n	80084b6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800848e:	4b59      	ldr	r3, [pc, #356]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10f      	bne.n	80084ba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800849a:	4b56      	ldr	r3, [pc, #344]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d109      	bne.n	80084ba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084aa:	e006      	b.n	80084ba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	73fb      	strb	r3, [r7, #15]
      break;
 80084b0:	e004      	b.n	80084bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80084b2:	bf00      	nop
 80084b4:	e002      	b.n	80084bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80084b6:	bf00      	nop
 80084b8:	e000      	b.n	80084bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80084ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d108      	bne.n	80084d4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80084c2:	4b4c      	ldr	r3, [pc, #304]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f023 0203 	bic.w	r2, r3, #3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4949      	ldr	r1, [pc, #292]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f040 8086 	bne.w	80085e8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80084dc:	4b45      	ldr	r3, [pc, #276]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a44      	ldr	r2, [pc, #272]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80084e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084e8:	f7fb fbec 	bl	8003cc4 <HAL_GetTick>
 80084ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80084ee:	e009      	b.n	8008504 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80084f0:	f7fb fbe8 	bl	8003cc4 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d902      	bls.n	8008504 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	73fb      	strb	r3, [r7, #15]
        break;
 8008502:	e005      	b.n	8008510 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008504:	4b3b      	ldr	r3, [pc, #236]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1ef      	bne.n	80084f0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008510:	7bfb      	ldrb	r3, [r7, #15]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d168      	bne.n	80085e8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d113      	bne.n	8008544 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800851c:	4b35      	ldr	r3, [pc, #212]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800851e:	695a      	ldr	r2, [r3, #20]
 8008520:	4b35      	ldr	r3, [pc, #212]	; (80085f8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008522:	4013      	ands	r3, r2
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6892      	ldr	r2, [r2, #8]
 8008528:	0211      	lsls	r1, r2, #8
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	68d2      	ldr	r2, [r2, #12]
 800852e:	06d2      	lsls	r2, r2, #27
 8008530:	4311      	orrs	r1, r2
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	6852      	ldr	r2, [r2, #4]
 8008536:	3a01      	subs	r2, #1
 8008538:	0112      	lsls	r2, r2, #4
 800853a:	430a      	orrs	r2, r1
 800853c:	492d      	ldr	r1, [pc, #180]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800853e:	4313      	orrs	r3, r2
 8008540:	614b      	str	r3, [r1, #20]
 8008542:	e02d      	b.n	80085a0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d115      	bne.n	8008576 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800854a:	4b2a      	ldr	r3, [pc, #168]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800854c:	695a      	ldr	r2, [r3, #20]
 800854e:	4b2b      	ldr	r3, [pc, #172]	; (80085fc <RCCEx_PLLSAI2_Config+0x1e0>)
 8008550:	4013      	ands	r3, r2
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	6892      	ldr	r2, [r2, #8]
 8008556:	0211      	lsls	r1, r2, #8
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	6912      	ldr	r2, [r2, #16]
 800855c:	0852      	lsrs	r2, r2, #1
 800855e:	3a01      	subs	r2, #1
 8008560:	0552      	lsls	r2, r2, #21
 8008562:	4311      	orrs	r1, r2
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	6852      	ldr	r2, [r2, #4]
 8008568:	3a01      	subs	r2, #1
 800856a:	0112      	lsls	r2, r2, #4
 800856c:	430a      	orrs	r2, r1
 800856e:	4921      	ldr	r1, [pc, #132]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008570:	4313      	orrs	r3, r2
 8008572:	614b      	str	r3, [r1, #20]
 8008574:	e014      	b.n	80085a0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008576:	4b1f      	ldr	r3, [pc, #124]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008578:	695a      	ldr	r2, [r3, #20]
 800857a:	4b21      	ldr	r3, [pc, #132]	; (8008600 <RCCEx_PLLSAI2_Config+0x1e4>)
 800857c:	4013      	ands	r3, r2
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	6892      	ldr	r2, [r2, #8]
 8008582:	0211      	lsls	r1, r2, #8
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	6952      	ldr	r2, [r2, #20]
 8008588:	0852      	lsrs	r2, r2, #1
 800858a:	3a01      	subs	r2, #1
 800858c:	0652      	lsls	r2, r2, #25
 800858e:	4311      	orrs	r1, r2
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6852      	ldr	r2, [r2, #4]
 8008594:	3a01      	subs	r2, #1
 8008596:	0112      	lsls	r2, r2, #4
 8008598:	430a      	orrs	r2, r1
 800859a:	4916      	ldr	r1, [pc, #88]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800859c:	4313      	orrs	r3, r2
 800859e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80085a0:	4b14      	ldr	r3, [pc, #80]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a13      	ldr	r2, [pc, #76]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ac:	f7fb fb8a 	bl	8003cc4 <HAL_GetTick>
 80085b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80085b2:	e009      	b.n	80085c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80085b4:	f7fb fb86 	bl	8003cc4 <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d902      	bls.n	80085c8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	73fb      	strb	r3, [r7, #15]
          break;
 80085c6:	e005      	b.n	80085d4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80085c8:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0ef      	beq.n	80085b4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d106      	bne.n	80085e8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80085da:	4b06      	ldr	r3, [pc, #24]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085dc:	695a      	ldr	r2, [r3, #20]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	4904      	ldr	r1, [pc, #16]	; (80085f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	40021000 	.word	0x40021000
 80085f8:	07ff800f 	.word	0x07ff800f
 80085fc:	ff9f800f 	.word	0xff9f800f
 8008600:	f9ff800f 	.word	0xf9ff800f

08008604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e095      	b.n	8008742 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	2b00      	cmp	r3, #0
 800861c:	d108      	bne.n	8008630 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008626:	d009      	beq.n	800863c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	61da      	str	r2, [r3, #28]
 800862e:	e005      	b.n	800863c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d106      	bne.n	800865c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fb f81c 	bl	8003694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2202      	movs	r2, #2
 8008660:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008672:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800867c:	d902      	bls.n	8008684 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]
 8008682:	e002      	b.n	800868a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008688:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008692:	d007      	beq.n	80086a4 <HAL_SPI_Init+0xa0>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800869c:	d002      	beq.n	80086a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80086b4:	431a      	orrs	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	431a      	orrs	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	431a      	orrs	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086d2:	431a      	orrs	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086dc:	431a      	orrs	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e6:	ea42 0103 	orr.w	r1, r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	0c1b      	lsrs	r3, r3, #16
 8008700:	f003 0204 	and.w	r2, r3, #4
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	431a      	orrs	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008712:	f003 0308 	and.w	r3, r3, #8
 8008716:	431a      	orrs	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008720:	ea42 0103 	orr.w	r1, r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e049      	b.n	80087f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	d106      	bne.n	8008776 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f841 	bl	80087f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2202      	movs	r2, #2
 800877a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3304      	adds	r3, #4
 8008786:	4619      	mov	r1, r3
 8008788:	4610      	mov	r0, r2
 800878a:	f000 f9d9 	bl	8008b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b01      	cmp	r3, #1
 800881e:	d001      	beq.n	8008824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e04f      	b.n	80088c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0201 	orr.w	r2, r2, #1
 800883a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a23      	ldr	r2, [pc, #140]	; (80088d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d01d      	beq.n	8008882 <HAL_TIM_Base_Start_IT+0x76>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800884e:	d018      	beq.n	8008882 <HAL_TIM_Base_Start_IT+0x76>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a1f      	ldr	r2, [pc, #124]	; (80088d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d013      	beq.n	8008882 <HAL_TIM_Base_Start_IT+0x76>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a1e      	ldr	r2, [pc, #120]	; (80088d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00e      	beq.n	8008882 <HAL_TIM_Base_Start_IT+0x76>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a1c      	ldr	r2, [pc, #112]	; (80088dc <HAL_TIM_Base_Start_IT+0xd0>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d009      	beq.n	8008882 <HAL_TIM_Base_Start_IT+0x76>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a1b      	ldr	r2, [pc, #108]	; (80088e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d004      	beq.n	8008882 <HAL_TIM_Base_Start_IT+0x76>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a19      	ldr	r2, [pc, #100]	; (80088e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d115      	bne.n	80088ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	689a      	ldr	r2, [r3, #8]
 8008888:	4b17      	ldr	r3, [pc, #92]	; (80088e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800888a:	4013      	ands	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b06      	cmp	r3, #6
 8008892:	d015      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0xb4>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800889a:	d011      	beq.n	80088c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0201 	orr.w	r2, r2, #1
 80088aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ac:	e008      	b.n	80088c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f042 0201 	orr.w	r2, r2, #1
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	e000      	b.n	80088c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	40012c00 	.word	0x40012c00
 80088d4:	40000400 	.word	0x40000400
 80088d8:	40000800 	.word	0x40000800
 80088dc:	40000c00 	.word	0x40000c00
 80088e0:	40013400 	.word	0x40013400
 80088e4:	40014000 	.word	0x40014000
 80088e8:	00010007 	.word	0x00010007

080088ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d020      	beq.n	8008950 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01b      	beq.n	8008950 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f06f 0202 	mvn.w	r2, #2
 8008920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f8e4 	bl	8008b04 <HAL_TIM_IC_CaptureCallback>
 800893c:	e005      	b.n	800894a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f8d6 	bl	8008af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f8e7 	bl	8008b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b00      	cmp	r3, #0
 8008958:	d020      	beq.n	800899c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b00      	cmp	r3, #0
 8008962:	d01b      	beq.n	800899c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f06f 0204 	mvn.w	r2, #4
 800896c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2202      	movs	r2, #2
 8008972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f8be 	bl	8008b04 <HAL_TIM_IC_CaptureCallback>
 8008988:	e005      	b.n	8008996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f8b0 	bl	8008af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f8c1 	bl	8008b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f003 0308 	and.w	r3, r3, #8
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d020      	beq.n	80089e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f003 0308 	and.w	r3, r3, #8
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01b      	beq.n	80089e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f06f 0208 	mvn.w	r2, #8
 80089b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2204      	movs	r2, #4
 80089be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f898 	bl	8008b04 <HAL_TIM_IC_CaptureCallback>
 80089d4:	e005      	b.n	80089e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f88a 	bl	8008af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f89b 	bl	8008b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f003 0310 	and.w	r3, r3, #16
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d020      	beq.n	8008a34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01b      	beq.n	8008a34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f06f 0210 	mvn.w	r2, #16
 8008a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2208      	movs	r2, #8
 8008a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f872 	bl	8008b04 <HAL_TIM_IC_CaptureCallback>
 8008a20:	e005      	b.n	8008a2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f864 	bl	8008af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f875 	bl	8008b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00c      	beq.n	8008a58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d007      	beq.n	8008a58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f06f 0201 	mvn.w	r2, #1
 8008a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fa fbf4 	bl	8003240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00c      	beq.n	8008a7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d007      	beq.n	8008a7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f906 	bl	8008c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00c      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d007      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f8fe 	bl	8008c9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00c      	beq.n	8008ac4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d007      	beq.n	8008ac4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f834 	bl	8008b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f003 0320 	and.w	r3, r3, #32
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00c      	beq.n	8008ae8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f003 0320 	and.w	r3, r3, #32
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d007      	beq.n	8008ae8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f06f 0220 	mvn.w	r2, #32
 8008ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f8c6 	bl	8008c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ae8:	bf00      	nop
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a40      	ldr	r2, [pc, #256]	; (8008c54 <TIM_Base_SetConfig+0x114>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d013      	beq.n	8008b80 <TIM_Base_SetConfig+0x40>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b5e:	d00f      	beq.n	8008b80 <TIM_Base_SetConfig+0x40>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a3d      	ldr	r2, [pc, #244]	; (8008c58 <TIM_Base_SetConfig+0x118>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d00b      	beq.n	8008b80 <TIM_Base_SetConfig+0x40>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a3c      	ldr	r2, [pc, #240]	; (8008c5c <TIM_Base_SetConfig+0x11c>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d007      	beq.n	8008b80 <TIM_Base_SetConfig+0x40>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a3b      	ldr	r2, [pc, #236]	; (8008c60 <TIM_Base_SetConfig+0x120>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d003      	beq.n	8008b80 <TIM_Base_SetConfig+0x40>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a3a      	ldr	r2, [pc, #232]	; (8008c64 <TIM_Base_SetConfig+0x124>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d108      	bne.n	8008b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a2f      	ldr	r2, [pc, #188]	; (8008c54 <TIM_Base_SetConfig+0x114>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d01f      	beq.n	8008bda <TIM_Base_SetConfig+0x9a>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ba0:	d01b      	beq.n	8008bda <TIM_Base_SetConfig+0x9a>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a2c      	ldr	r2, [pc, #176]	; (8008c58 <TIM_Base_SetConfig+0x118>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d017      	beq.n	8008bda <TIM_Base_SetConfig+0x9a>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a2b      	ldr	r2, [pc, #172]	; (8008c5c <TIM_Base_SetConfig+0x11c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d013      	beq.n	8008bda <TIM_Base_SetConfig+0x9a>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a2a      	ldr	r2, [pc, #168]	; (8008c60 <TIM_Base_SetConfig+0x120>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d00f      	beq.n	8008bda <TIM_Base_SetConfig+0x9a>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a29      	ldr	r2, [pc, #164]	; (8008c64 <TIM_Base_SetConfig+0x124>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d00b      	beq.n	8008bda <TIM_Base_SetConfig+0x9a>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a28      	ldr	r2, [pc, #160]	; (8008c68 <TIM_Base_SetConfig+0x128>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d007      	beq.n	8008bda <TIM_Base_SetConfig+0x9a>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a27      	ldr	r2, [pc, #156]	; (8008c6c <TIM_Base_SetConfig+0x12c>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d003      	beq.n	8008bda <TIM_Base_SetConfig+0x9a>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a26      	ldr	r2, [pc, #152]	; (8008c70 <TIM_Base_SetConfig+0x130>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d108      	bne.n	8008bec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a10      	ldr	r2, [pc, #64]	; (8008c54 <TIM_Base_SetConfig+0x114>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d00f      	beq.n	8008c38 <TIM_Base_SetConfig+0xf8>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a12      	ldr	r2, [pc, #72]	; (8008c64 <TIM_Base_SetConfig+0x124>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d00b      	beq.n	8008c38 <TIM_Base_SetConfig+0xf8>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a11      	ldr	r2, [pc, #68]	; (8008c68 <TIM_Base_SetConfig+0x128>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d007      	beq.n	8008c38 <TIM_Base_SetConfig+0xf8>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a10      	ldr	r2, [pc, #64]	; (8008c6c <TIM_Base_SetConfig+0x12c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d003      	beq.n	8008c38 <TIM_Base_SetConfig+0xf8>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a0f      	ldr	r2, [pc, #60]	; (8008c70 <TIM_Base_SetConfig+0x130>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d103      	bne.n	8008c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	691a      	ldr	r2, [r3, #16]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	615a      	str	r2, [r3, #20]
}
 8008c46:	bf00      	nop
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	40012c00 	.word	0x40012c00
 8008c58:	40000400 	.word	0x40000400
 8008c5c:	40000800 	.word	0x40000800
 8008c60:	40000c00 	.word	0x40000c00
 8008c64:	40013400 	.word	0x40013400
 8008c68:	40014000 	.word	0x40014000
 8008c6c:	40014400 	.word	0x40014400
 8008c70:	40014800 	.word	0x40014800

08008c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d101      	bne.n	8008cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e042      	b.n	8008d48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d106      	bne.n	8008cda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f7fa fd53 	bl	8003780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2224      	movs	r2, #36	; 0x24
 8008cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0201 	bic.w	r2, r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d002      	beq.n	8008d00 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fef8 	bl	8009af0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fbf9 	bl	80094f8 <UART_SetConfig>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d101      	bne.n	8008d10 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e01b      	b.n	8008d48 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689a      	ldr	r2, [r3, #8]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f042 0201 	orr.w	r2, r2, #1
 8008d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 ff77 	bl	8009c34 <UART_CheckIdleState>
 8008d46:	4603      	mov	r3, r0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08a      	sub	sp, #40	; 0x28
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	603b      	str	r3, [r7, #0]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d66:	2b20      	cmp	r3, #32
 8008d68:	d17c      	bne.n	8008e64 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <HAL_UART_Transmit+0x26>
 8008d70:	88fb      	ldrh	r3, [r7, #6]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e075      	b.n	8008e66 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2221      	movs	r2, #33	; 0x21
 8008d86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d8a:	f7fa ff9b 	bl	8003cc4 <HAL_GetTick>
 8008d8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	88fa      	ldrh	r2, [r7, #6]
 8008d94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	88fa      	ldrh	r2, [r7, #6]
 8008d9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008da8:	d108      	bne.n	8008dbc <HAL_UART_Transmit+0x6c>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d104      	bne.n	8008dbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	61bb      	str	r3, [r7, #24]
 8008dba:	e003      	b.n	8008dc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008dc4:	e031      	b.n	8008e2a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	9300      	str	r3, [sp, #0]
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2180      	movs	r1, #128	; 0x80
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f000 ffd9 	bl	8009d88 <UART_WaitOnFlagUntilTimeout>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2220      	movs	r2, #32
 8008de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008de4:	2303      	movs	r3, #3
 8008de6:	e03e      	b.n	8008e66 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10b      	bne.n	8008e06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	881a      	ldrh	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008dfa:	b292      	uxth	r2, r2
 8008dfc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	3302      	adds	r3, #2
 8008e02:	61bb      	str	r3, [r7, #24]
 8008e04:	e008      	b.n	8008e18 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	781a      	ldrb	r2, [r3, #0]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	b292      	uxth	r2, r2
 8008e10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	3301      	adds	r3, #1
 8008e16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	3b01      	subs	r3, #1
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1c7      	bne.n	8008dc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	2140      	movs	r1, #64	; 0x40
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 ffa1 	bl	8009d88 <UART_WaitOnFlagUntilTimeout>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d005      	beq.n	8008e58 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	e006      	b.n	8008e66 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	e000      	b.n	8008e66 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8008e64:	2302      	movs	r3, #2
  }
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3720      	adds	r7, #32
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
	...

08008e70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b0ba      	sub	sp, #232	; 0xe8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008e9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d11b      	bne.n	8008ee4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb0:	f003 0320 	and.w	r3, r3, #32
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d015      	beq.n	8008ee4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ebc:	f003 0320 	and.w	r3, r3, #32
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d105      	bne.n	8008ed0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d009      	beq.n	8008ee4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 82e3 	beq.w	80094a0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	4798      	blx	r3
      }
      return;
 8008ee2:	e2dd      	b.n	80094a0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8008ee4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 8123 	beq.w	8009134 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008eee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008ef2:	4b8d      	ldr	r3, [pc, #564]	; (8009128 <HAL_UART_IRQHandler+0x2b8>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d106      	bne.n	8008f08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008efa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008efe:	4b8b      	ldr	r3, [pc, #556]	; (800912c <HAL_UART_IRQHandler+0x2bc>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f000 8116 	beq.w	8009134 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f0c:	f003 0301 	and.w	r3, r3, #1
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d011      	beq.n	8008f38 <HAL_UART_IRQHandler+0xc8>
 8008f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00b      	beq.n	8008f38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2201      	movs	r2, #1
 8008f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f2e:	f043 0201 	orr.w	r2, r3, #1
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f3c:	f003 0302 	and.w	r3, r3, #2
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d011      	beq.n	8008f68 <HAL_UART_IRQHandler+0xf8>
 8008f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00b      	beq.n	8008f68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2202      	movs	r2, #2
 8008f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f5e:	f043 0204 	orr.w	r2, r3, #4
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f6c:	f003 0304 	and.w	r3, r3, #4
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d011      	beq.n	8008f98 <HAL_UART_IRQHandler+0x128>
 8008f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00b      	beq.n	8008f98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2204      	movs	r2, #4
 8008f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f8e:	f043 0202 	orr.w	r2, r3, #2
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f9c:	f003 0308 	and.w	r3, r3, #8
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d017      	beq.n	8008fd4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fa8:	f003 0320 	and.w	r3, r3, #32
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d105      	bne.n	8008fbc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008fb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008fb4:	4b5c      	ldr	r3, [pc, #368]	; (8009128 <HAL_UART_IRQHandler+0x2b8>)
 8008fb6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00b      	beq.n	8008fd4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2208      	movs	r2, #8
 8008fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fca:	f043 0208 	orr.w	r2, r3, #8
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d012      	beq.n	8009006 <HAL_UART_IRQHandler+0x196>
 8008fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fe4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00c      	beq.n	8009006 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ff4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ffc:	f043 0220 	orr.w	r2, r3, #32
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 8249 	beq.w	80094a4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d013      	beq.n	8009046 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800901e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009022:	f003 0320 	and.w	r3, r3, #32
 8009026:	2b00      	cmp	r3, #0
 8009028:	d105      	bne.n	8009036 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800902a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800902e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d007      	beq.n	8009046 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800903a:	2b00      	cmp	r3, #0
 800903c:	d003      	beq.n	8009046 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800904c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905a:	2b40      	cmp	r3, #64	; 0x40
 800905c:	d005      	beq.n	800906a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800905e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009062:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009066:	2b00      	cmp	r3, #0
 8009068:	d054      	beq.n	8009114 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fef3 	bl	8009e56 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907a:	2b40      	cmp	r3, #64	; 0x40
 800907c:	d146      	bne.n	800910c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3308      	adds	r3, #8
 8009084:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800909c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3308      	adds	r3, #8
 80090a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1d9      	bne.n	800907e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d017      	beq.n	8009104 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090da:	4a15      	ldr	r2, [pc, #84]	; (8009130 <HAL_UART_IRQHandler+0x2c0>)
 80090dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fb ff49 	bl	8004f7c <HAL_DMA_Abort_IT>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d019      	beq.n	8009124 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80090fe:	4610      	mov	r0, r2
 8009100:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009102:	e00f      	b.n	8009124 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f9e1 	bl	80094cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800910a:	e00b      	b.n	8009124 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f9dd 	bl	80094cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009112:	e007      	b.n	8009124 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f9d9 	bl	80094cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009122:	e1bf      	b.n	80094a4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009124:	bf00      	nop
    return;
 8009126:	e1bd      	b.n	80094a4 <HAL_UART_IRQHandler+0x634>
 8009128:	10000001 	.word	0x10000001
 800912c:	04000120 	.word	0x04000120
 8009130:	08009f23 	.word	0x08009f23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009138:	2b01      	cmp	r3, #1
 800913a:	f040 8153 	bne.w	80093e4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800913e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009142:	f003 0310 	and.w	r3, r3, #16
 8009146:	2b00      	cmp	r3, #0
 8009148:	f000 814c 	beq.w	80093e4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800914c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009150:	f003 0310 	and.w	r3, r3, #16
 8009154:	2b00      	cmp	r3, #0
 8009156:	f000 8145 	beq.w	80093e4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2210      	movs	r2, #16
 8009160:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916c:	2b40      	cmp	r3, #64	; 0x40
 800916e:	f040 80bb 	bne.w	80092e8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009180:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 818f 	beq.w	80094a8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009190:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009194:	429a      	cmp	r2, r3
 8009196:	f080 8187 	bcs.w	80094a8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0320 	and.w	r3, r3, #32
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f040 8087 	bne.w	80092c6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	461a      	mov	r2, r3
 80091de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80091e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091f2:	e841 2300 	strex	r3, r2, [r1]
 80091f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80091fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1da      	bne.n	80091b8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3308      	adds	r3, #8
 8009208:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009214:	f023 0301 	bic.w	r3, r3, #1
 8009218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3308      	adds	r3, #8
 8009222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009226:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800922a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800922e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e1      	bne.n	8009202 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3308      	adds	r3, #8
 8009244:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009248:	e853 3f00 	ldrex	r3, [r3]
 800924c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800924e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3308      	adds	r3, #8
 800925e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009262:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009264:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009266:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800926a:	e841 2300 	strex	r3, r2, [r1]
 800926e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1e3      	bne.n	800923e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2220      	movs	r2, #32
 800927a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800928c:	e853 3f00 	ldrex	r3, [r3]
 8009290:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009294:	f023 0310 	bic.w	r3, r3, #16
 8009298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	461a      	mov	r2, r3
 80092a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80092a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092ae:	e841 2300 	strex	r3, r2, [r1]
 80092b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1e4      	bne.n	8009284 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fb fdff 	bl	8004ec4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2202      	movs	r2, #2
 80092ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092d8:	b29b      	uxth	r3, r3
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	b29b      	uxth	r3, r3
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f8fd 	bl	80094e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092e6:	e0df      	b.n	80094a8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009302:	b29b      	uxth	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 80d1 	beq.w	80094ac <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800930a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 80cc 	beq.w	80094ac <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	e853 3f00 	ldrex	r3, [r3]
 8009320:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009324:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009328:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	461a      	mov	r2, r3
 8009332:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009336:	647b      	str	r3, [r7, #68]	; 0x44
 8009338:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800933c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e4      	bne.n	8009314 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3308      	adds	r3, #8
 8009350:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	623b      	str	r3, [r7, #32]
   return(result);
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009360:	f023 0301 	bic.w	r3, r3, #1
 8009364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3308      	adds	r3, #8
 800936e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009372:	633a      	str	r2, [r7, #48]	; 0x30
 8009374:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800937a:	e841 2300 	strex	r3, r2, [r1]
 800937e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1e1      	bne.n	800934a <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2220      	movs	r2, #32
 800938a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f023 0310 	bic.w	r3, r3, #16
 80093ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80093bc:	61fb      	str	r3, [r7, #28]
 80093be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c0:	69b9      	ldr	r1, [r7, #24]
 80093c2:	69fa      	ldr	r2, [r7, #28]
 80093c4:	e841 2300 	strex	r3, r2, [r1]
 80093c8:	617b      	str	r3, [r7, #20]
   return(result);
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1e4      	bne.n	800939a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2202      	movs	r2, #2
 80093d4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f87f 	bl	80094e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093e2:	e063      	b.n	80094ac <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00e      	beq.n	800940e <HAL_UART_IRQHandler+0x59e>
 80093f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d008      	beq.n	800940e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009404:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fdcc 	bl	8009fa4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800940c:	e051      	b.n	80094b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800940e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009416:	2b00      	cmp	r3, #0
 8009418:	d014      	beq.n	8009444 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800941a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800941e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009422:	2b00      	cmp	r3, #0
 8009424:	d105      	bne.n	8009432 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800942a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d008      	beq.n	8009444 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009436:	2b00      	cmp	r3, #0
 8009438:	d03a      	beq.n	80094b0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	4798      	blx	r3
    }
    return;
 8009442:	e035      	b.n	80094b0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944c:	2b00      	cmp	r3, #0
 800944e:	d009      	beq.n	8009464 <HAL_UART_IRQHandler+0x5f4>
 8009450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fd76 	bl	8009f4e <UART_EndTransmit_IT>
    return;
 8009462:	e026      	b.n	80094b2 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d009      	beq.n	8009484 <HAL_UART_IRQHandler+0x614>
 8009470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009474:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d003      	beq.n	8009484 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fda5 	bl	8009fcc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009482:	e016      	b.n	80094b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d010      	beq.n	80094b2 <HAL_UART_IRQHandler+0x642>
 8009490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009494:	2b00      	cmp	r3, #0
 8009496:	da0c      	bge.n	80094b2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fd8d 	bl	8009fb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800949e:	e008      	b.n	80094b2 <HAL_UART_IRQHandler+0x642>
      return;
 80094a0:	bf00      	nop
 80094a2:	e006      	b.n	80094b2 <HAL_UART_IRQHandler+0x642>
    return;
 80094a4:	bf00      	nop
 80094a6:	e004      	b.n	80094b2 <HAL_UART_IRQHandler+0x642>
      return;
 80094a8:	bf00      	nop
 80094aa:	e002      	b.n	80094b2 <HAL_UART_IRQHandler+0x642>
      return;
 80094ac:	bf00      	nop
 80094ae:	e000      	b.n	80094b2 <HAL_UART_IRQHandler+0x642>
    return;
 80094b0:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80094b2:	37e8      	adds	r7, #232	; 0xe8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094fc:	b08c      	sub	sp, #48	; 0x30
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	689a      	ldr	r2, [r3, #8]
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	431a      	orrs	r2, r3
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	431a      	orrs	r2, r3
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	4313      	orrs	r3, r2
 800951e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	4baa      	ldr	r3, [pc, #680]	; (80097d0 <UART_SetConfig+0x2d8>)
 8009528:	4013      	ands	r3, r2
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	6812      	ldr	r2, [r2, #0]
 800952e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009530:	430b      	orrs	r3, r1
 8009532:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a9f      	ldr	r2, [pc, #636]	; (80097d4 <UART_SetConfig+0x2dc>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d004      	beq.n	8009564 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009560:	4313      	orrs	r3, r2
 8009562:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800956e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	6812      	ldr	r2, [r2, #0]
 8009576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009578:	430b      	orrs	r3, r1
 800957a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009582:	f023 010f 	bic.w	r1, r3, #15
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	430a      	orrs	r2, r1
 8009590:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a90      	ldr	r2, [pc, #576]	; (80097d8 <UART_SetConfig+0x2e0>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d125      	bne.n	80095e8 <UART_SetConfig+0xf0>
 800959c:	4b8f      	ldr	r3, [pc, #572]	; (80097dc <UART_SetConfig+0x2e4>)
 800959e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a2:	f003 0303 	and.w	r3, r3, #3
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	d81a      	bhi.n	80095e0 <UART_SetConfig+0xe8>
 80095aa:	a201      	add	r2, pc, #4	; (adr r2, 80095b0 <UART_SetConfig+0xb8>)
 80095ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b0:	080095c1 	.word	0x080095c1
 80095b4:	080095d1 	.word	0x080095d1
 80095b8:	080095c9 	.word	0x080095c9
 80095bc:	080095d9 	.word	0x080095d9
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095c6:	e116      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80095c8:	2302      	movs	r3, #2
 80095ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095ce:	e112      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80095d0:	2304      	movs	r3, #4
 80095d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095d6:	e10e      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80095d8:	2308      	movs	r3, #8
 80095da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095de:	e10a      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80095e0:	2310      	movs	r3, #16
 80095e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095e6:	e106      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a7c      	ldr	r2, [pc, #496]	; (80097e0 <UART_SetConfig+0x2e8>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d138      	bne.n	8009664 <UART_SetConfig+0x16c>
 80095f2:	4b7a      	ldr	r3, [pc, #488]	; (80097dc <UART_SetConfig+0x2e4>)
 80095f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f8:	f003 030c 	and.w	r3, r3, #12
 80095fc:	2b0c      	cmp	r3, #12
 80095fe:	d82d      	bhi.n	800965c <UART_SetConfig+0x164>
 8009600:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <UART_SetConfig+0x110>)
 8009602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009606:	bf00      	nop
 8009608:	0800963d 	.word	0x0800963d
 800960c:	0800965d 	.word	0x0800965d
 8009610:	0800965d 	.word	0x0800965d
 8009614:	0800965d 	.word	0x0800965d
 8009618:	0800964d 	.word	0x0800964d
 800961c:	0800965d 	.word	0x0800965d
 8009620:	0800965d 	.word	0x0800965d
 8009624:	0800965d 	.word	0x0800965d
 8009628:	08009645 	.word	0x08009645
 800962c:	0800965d 	.word	0x0800965d
 8009630:	0800965d 	.word	0x0800965d
 8009634:	0800965d 	.word	0x0800965d
 8009638:	08009655 	.word	0x08009655
 800963c:	2300      	movs	r3, #0
 800963e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009642:	e0d8      	b.n	80097f6 <UART_SetConfig+0x2fe>
 8009644:	2302      	movs	r3, #2
 8009646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800964a:	e0d4      	b.n	80097f6 <UART_SetConfig+0x2fe>
 800964c:	2304      	movs	r3, #4
 800964e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009652:	e0d0      	b.n	80097f6 <UART_SetConfig+0x2fe>
 8009654:	2308      	movs	r3, #8
 8009656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800965a:	e0cc      	b.n	80097f6 <UART_SetConfig+0x2fe>
 800965c:	2310      	movs	r3, #16
 800965e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009662:	e0c8      	b.n	80097f6 <UART_SetConfig+0x2fe>
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a5e      	ldr	r2, [pc, #376]	; (80097e4 <UART_SetConfig+0x2ec>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d125      	bne.n	80096ba <UART_SetConfig+0x1c2>
 800966e:	4b5b      	ldr	r3, [pc, #364]	; (80097dc <UART_SetConfig+0x2e4>)
 8009670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009674:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009678:	2b30      	cmp	r3, #48	; 0x30
 800967a:	d016      	beq.n	80096aa <UART_SetConfig+0x1b2>
 800967c:	2b30      	cmp	r3, #48	; 0x30
 800967e:	d818      	bhi.n	80096b2 <UART_SetConfig+0x1ba>
 8009680:	2b20      	cmp	r3, #32
 8009682:	d00a      	beq.n	800969a <UART_SetConfig+0x1a2>
 8009684:	2b20      	cmp	r3, #32
 8009686:	d814      	bhi.n	80096b2 <UART_SetConfig+0x1ba>
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <UART_SetConfig+0x19a>
 800968c:	2b10      	cmp	r3, #16
 800968e:	d008      	beq.n	80096a2 <UART_SetConfig+0x1aa>
 8009690:	e00f      	b.n	80096b2 <UART_SetConfig+0x1ba>
 8009692:	2300      	movs	r3, #0
 8009694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009698:	e0ad      	b.n	80097f6 <UART_SetConfig+0x2fe>
 800969a:	2302      	movs	r3, #2
 800969c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096a0:	e0a9      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80096a2:	2304      	movs	r3, #4
 80096a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096a8:	e0a5      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80096aa:	2308      	movs	r3, #8
 80096ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096b0:	e0a1      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80096b2:	2310      	movs	r3, #16
 80096b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096b8:	e09d      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a4a      	ldr	r2, [pc, #296]	; (80097e8 <UART_SetConfig+0x2f0>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d125      	bne.n	8009710 <UART_SetConfig+0x218>
 80096c4:	4b45      	ldr	r3, [pc, #276]	; (80097dc <UART_SetConfig+0x2e4>)
 80096c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80096ce:	2bc0      	cmp	r3, #192	; 0xc0
 80096d0:	d016      	beq.n	8009700 <UART_SetConfig+0x208>
 80096d2:	2bc0      	cmp	r3, #192	; 0xc0
 80096d4:	d818      	bhi.n	8009708 <UART_SetConfig+0x210>
 80096d6:	2b80      	cmp	r3, #128	; 0x80
 80096d8:	d00a      	beq.n	80096f0 <UART_SetConfig+0x1f8>
 80096da:	2b80      	cmp	r3, #128	; 0x80
 80096dc:	d814      	bhi.n	8009708 <UART_SetConfig+0x210>
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <UART_SetConfig+0x1f0>
 80096e2:	2b40      	cmp	r3, #64	; 0x40
 80096e4:	d008      	beq.n	80096f8 <UART_SetConfig+0x200>
 80096e6:	e00f      	b.n	8009708 <UART_SetConfig+0x210>
 80096e8:	2300      	movs	r3, #0
 80096ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096ee:	e082      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80096f0:	2302      	movs	r3, #2
 80096f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096f6:	e07e      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80096f8:	2304      	movs	r3, #4
 80096fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096fe:	e07a      	b.n	80097f6 <UART_SetConfig+0x2fe>
 8009700:	2308      	movs	r3, #8
 8009702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009706:	e076      	b.n	80097f6 <UART_SetConfig+0x2fe>
 8009708:	2310      	movs	r3, #16
 800970a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800970e:	e072      	b.n	80097f6 <UART_SetConfig+0x2fe>
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a35      	ldr	r2, [pc, #212]	; (80097ec <UART_SetConfig+0x2f4>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d12a      	bne.n	8009770 <UART_SetConfig+0x278>
 800971a:	4b30      	ldr	r3, [pc, #192]	; (80097dc <UART_SetConfig+0x2e4>)
 800971c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009728:	d01a      	beq.n	8009760 <UART_SetConfig+0x268>
 800972a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800972e:	d81b      	bhi.n	8009768 <UART_SetConfig+0x270>
 8009730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009734:	d00c      	beq.n	8009750 <UART_SetConfig+0x258>
 8009736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800973a:	d815      	bhi.n	8009768 <UART_SetConfig+0x270>
 800973c:	2b00      	cmp	r3, #0
 800973e:	d003      	beq.n	8009748 <UART_SetConfig+0x250>
 8009740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009744:	d008      	beq.n	8009758 <UART_SetConfig+0x260>
 8009746:	e00f      	b.n	8009768 <UART_SetConfig+0x270>
 8009748:	2300      	movs	r3, #0
 800974a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800974e:	e052      	b.n	80097f6 <UART_SetConfig+0x2fe>
 8009750:	2302      	movs	r3, #2
 8009752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009756:	e04e      	b.n	80097f6 <UART_SetConfig+0x2fe>
 8009758:	2304      	movs	r3, #4
 800975a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800975e:	e04a      	b.n	80097f6 <UART_SetConfig+0x2fe>
 8009760:	2308      	movs	r3, #8
 8009762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009766:	e046      	b.n	80097f6 <UART_SetConfig+0x2fe>
 8009768:	2310      	movs	r3, #16
 800976a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800976e:	e042      	b.n	80097f6 <UART_SetConfig+0x2fe>
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a17      	ldr	r2, [pc, #92]	; (80097d4 <UART_SetConfig+0x2dc>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d13a      	bne.n	80097f0 <UART_SetConfig+0x2f8>
 800977a:	4b18      	ldr	r3, [pc, #96]	; (80097dc <UART_SetConfig+0x2e4>)
 800977c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009780:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009784:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009788:	d01a      	beq.n	80097c0 <UART_SetConfig+0x2c8>
 800978a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800978e:	d81b      	bhi.n	80097c8 <UART_SetConfig+0x2d0>
 8009790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009794:	d00c      	beq.n	80097b0 <UART_SetConfig+0x2b8>
 8009796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800979a:	d815      	bhi.n	80097c8 <UART_SetConfig+0x2d0>
 800979c:	2b00      	cmp	r3, #0
 800979e:	d003      	beq.n	80097a8 <UART_SetConfig+0x2b0>
 80097a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097a4:	d008      	beq.n	80097b8 <UART_SetConfig+0x2c0>
 80097a6:	e00f      	b.n	80097c8 <UART_SetConfig+0x2d0>
 80097a8:	2300      	movs	r3, #0
 80097aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ae:	e022      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80097b0:	2302      	movs	r3, #2
 80097b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097b6:	e01e      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80097b8:	2304      	movs	r3, #4
 80097ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097be:	e01a      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80097c0:	2308      	movs	r3, #8
 80097c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097c6:	e016      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80097c8:	2310      	movs	r3, #16
 80097ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ce:	e012      	b.n	80097f6 <UART_SetConfig+0x2fe>
 80097d0:	cfff69f3 	.word	0xcfff69f3
 80097d4:	40008000 	.word	0x40008000
 80097d8:	40013800 	.word	0x40013800
 80097dc:	40021000 	.word	0x40021000
 80097e0:	40004400 	.word	0x40004400
 80097e4:	40004800 	.word	0x40004800
 80097e8:	40004c00 	.word	0x40004c00
 80097ec:	40005000 	.word	0x40005000
 80097f0:	2310      	movs	r3, #16
 80097f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4aae      	ldr	r2, [pc, #696]	; (8009ab4 <UART_SetConfig+0x5bc>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	f040 8097 	bne.w	8009930 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009802:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009806:	2b08      	cmp	r3, #8
 8009808:	d823      	bhi.n	8009852 <UART_SetConfig+0x35a>
 800980a:	a201      	add	r2, pc, #4	; (adr r2, 8009810 <UART_SetConfig+0x318>)
 800980c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009810:	08009835 	.word	0x08009835
 8009814:	08009853 	.word	0x08009853
 8009818:	0800983d 	.word	0x0800983d
 800981c:	08009853 	.word	0x08009853
 8009820:	08009843 	.word	0x08009843
 8009824:	08009853 	.word	0x08009853
 8009828:	08009853 	.word	0x08009853
 800982c:	08009853 	.word	0x08009853
 8009830:	0800984b 	.word	0x0800984b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009834:	f7fe f8a0 	bl	8007978 <HAL_RCC_GetPCLK1Freq>
 8009838:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800983a:	e010      	b.n	800985e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800983c:	4b9e      	ldr	r3, [pc, #632]	; (8009ab8 <UART_SetConfig+0x5c0>)
 800983e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009840:	e00d      	b.n	800985e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009842:	f7fe f801 	bl	8007848 <HAL_RCC_GetSysClockFreq>
 8009846:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009848:	e009      	b.n	800985e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800984a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800984e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009850:	e005      	b.n	800985e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009852:	2300      	movs	r3, #0
 8009854:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800985c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 8130 	beq.w	8009ac6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986a:	4a94      	ldr	r2, [pc, #592]	; (8009abc <UART_SetConfig+0x5c4>)
 800986c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009870:	461a      	mov	r2, r3
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	fbb3 f3f2 	udiv	r3, r3, r2
 8009878:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	4613      	mov	r3, r2
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	4413      	add	r3, r2
 8009884:	69ba      	ldr	r2, [r7, #24]
 8009886:	429a      	cmp	r2, r3
 8009888:	d305      	bcc.n	8009896 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009890:	69ba      	ldr	r2, [r7, #24]
 8009892:	429a      	cmp	r2, r3
 8009894:	d903      	bls.n	800989e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800989c:	e113      	b.n	8009ac6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	2200      	movs	r2, #0
 80098a2:	60bb      	str	r3, [r7, #8]
 80098a4:	60fa      	str	r2, [r7, #12]
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098aa:	4a84      	ldr	r2, [pc, #528]	; (8009abc <UART_SetConfig+0x5c4>)
 80098ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2200      	movs	r2, #0
 80098b4:	603b      	str	r3, [r7, #0]
 80098b6:	607a      	str	r2, [r7, #4]
 80098b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80098c0:	f7f7 f9da 	bl	8000c78 <__aeabi_uldivmod>
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	4610      	mov	r0, r2
 80098ca:	4619      	mov	r1, r3
 80098cc:	f04f 0200 	mov.w	r2, #0
 80098d0:	f04f 0300 	mov.w	r3, #0
 80098d4:	020b      	lsls	r3, r1, #8
 80098d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80098da:	0202      	lsls	r2, r0, #8
 80098dc:	6979      	ldr	r1, [r7, #20]
 80098de:	6849      	ldr	r1, [r1, #4]
 80098e0:	0849      	lsrs	r1, r1, #1
 80098e2:	2000      	movs	r0, #0
 80098e4:	460c      	mov	r4, r1
 80098e6:	4605      	mov	r5, r0
 80098e8:	eb12 0804 	adds.w	r8, r2, r4
 80098ec:	eb43 0905 	adc.w	r9, r3, r5
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	469a      	mov	sl, r3
 80098f8:	4693      	mov	fp, r2
 80098fa:	4652      	mov	r2, sl
 80098fc:	465b      	mov	r3, fp
 80098fe:	4640      	mov	r0, r8
 8009900:	4649      	mov	r1, r9
 8009902:	f7f7 f9b9 	bl	8000c78 <__aeabi_uldivmod>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	4613      	mov	r3, r2
 800990c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009914:	d308      	bcc.n	8009928 <UART_SetConfig+0x430>
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800991c:	d204      	bcs.n	8009928 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6a3a      	ldr	r2, [r7, #32]
 8009924:	60da      	str	r2, [r3, #12]
 8009926:	e0ce      	b.n	8009ac6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800992e:	e0ca      	b.n	8009ac6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009938:	d166      	bne.n	8009a08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800993a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800993e:	2b08      	cmp	r3, #8
 8009940:	d827      	bhi.n	8009992 <UART_SetConfig+0x49a>
 8009942:	a201      	add	r2, pc, #4	; (adr r2, 8009948 <UART_SetConfig+0x450>)
 8009944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009948:	0800996d 	.word	0x0800996d
 800994c:	08009975 	.word	0x08009975
 8009950:	0800997d 	.word	0x0800997d
 8009954:	08009993 	.word	0x08009993
 8009958:	08009983 	.word	0x08009983
 800995c:	08009993 	.word	0x08009993
 8009960:	08009993 	.word	0x08009993
 8009964:	08009993 	.word	0x08009993
 8009968:	0800998b 	.word	0x0800998b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800996c:	f7fe f804 	bl	8007978 <HAL_RCC_GetPCLK1Freq>
 8009970:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009972:	e014      	b.n	800999e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009974:	f7fe f816 	bl	80079a4 <HAL_RCC_GetPCLK2Freq>
 8009978:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800997a:	e010      	b.n	800999e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800997c:	4b4e      	ldr	r3, [pc, #312]	; (8009ab8 <UART_SetConfig+0x5c0>)
 800997e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009980:	e00d      	b.n	800999e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009982:	f7fd ff61 	bl	8007848 <HAL_RCC_GetSysClockFreq>
 8009986:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009988:	e009      	b.n	800999e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800998a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800998e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009990:	e005      	b.n	800999e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009992:	2300      	movs	r3, #0
 8009994:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800999c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800999e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 8090 	beq.w	8009ac6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099aa:	4a44      	ldr	r2, [pc, #272]	; (8009abc <UART_SetConfig+0x5c4>)
 80099ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099b0:	461a      	mov	r2, r3
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80099b8:	005a      	lsls	r2, r3, #1
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	085b      	lsrs	r3, r3, #1
 80099c0:	441a      	add	r2, r3
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	2b0f      	cmp	r3, #15
 80099d0:	d916      	bls.n	8009a00 <UART_SetConfig+0x508>
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099d8:	d212      	bcs.n	8009a00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	b29b      	uxth	r3, r3
 80099de:	f023 030f 	bic.w	r3, r3, #15
 80099e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	085b      	lsrs	r3, r3, #1
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	f003 0307 	and.w	r3, r3, #7
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	8bfb      	ldrh	r3, [r7, #30]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	8bfa      	ldrh	r2, [r7, #30]
 80099fc:	60da      	str	r2, [r3, #12]
 80099fe:	e062      	b.n	8009ac6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009a06:	e05e      	b.n	8009ac6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a0c:	2b08      	cmp	r3, #8
 8009a0e:	d828      	bhi.n	8009a62 <UART_SetConfig+0x56a>
 8009a10:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <UART_SetConfig+0x520>)
 8009a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a16:	bf00      	nop
 8009a18:	08009a3d 	.word	0x08009a3d
 8009a1c:	08009a45 	.word	0x08009a45
 8009a20:	08009a4d 	.word	0x08009a4d
 8009a24:	08009a63 	.word	0x08009a63
 8009a28:	08009a53 	.word	0x08009a53
 8009a2c:	08009a63 	.word	0x08009a63
 8009a30:	08009a63 	.word	0x08009a63
 8009a34:	08009a63 	.word	0x08009a63
 8009a38:	08009a5b 	.word	0x08009a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a3c:	f7fd ff9c 	bl	8007978 <HAL_RCC_GetPCLK1Freq>
 8009a40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a42:	e014      	b.n	8009a6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a44:	f7fd ffae 	bl	80079a4 <HAL_RCC_GetPCLK2Freq>
 8009a48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a4a:	e010      	b.n	8009a6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a4c:	4b1a      	ldr	r3, [pc, #104]	; (8009ab8 <UART_SetConfig+0x5c0>)
 8009a4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a50:	e00d      	b.n	8009a6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a52:	f7fd fef9 	bl	8007848 <HAL_RCC_GetSysClockFreq>
 8009a56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a58:	e009      	b.n	8009a6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a60:	e005      	b.n	8009a6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009a6c:	bf00      	nop
    }

    if (pclk != 0U)
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d028      	beq.n	8009ac6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	4a10      	ldr	r2, [pc, #64]	; (8009abc <UART_SetConfig+0x5c4>)
 8009a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	085b      	lsrs	r3, r3, #1
 8009a8c:	441a      	add	r2, r3
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a96:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	2b0f      	cmp	r3, #15
 8009a9c:	d910      	bls.n	8009ac0 <UART_SetConfig+0x5c8>
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa4:	d20c      	bcs.n	8009ac0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	60da      	str	r2, [r3, #12]
 8009ab0:	e009      	b.n	8009ac6 <UART_SetConfig+0x5ce>
 8009ab2:	bf00      	nop
 8009ab4:	40008000 	.word	0x40008000
 8009ab8:	00f42400 	.word	0x00f42400
 8009abc:	0800c164 	.word	0x0800c164
      }
      else
      {
        ret = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009ae2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3730      	adds	r7, #48	; 0x30
 8009aea:	46bd      	mov	sp, r7
 8009aec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afc:	f003 0308 	and.w	r3, r3, #8
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00a      	beq.n	8009b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	430a      	orrs	r2, r1
 8009b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00a      	beq.n	8009b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b40:	f003 0302 	and.w	r3, r3, #2
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00a      	beq.n	8009b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b62:	f003 0304 	and.w	r3, r3, #4
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00a      	beq.n	8009b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b84:	f003 0310 	and.w	r3, r3, #16
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00a      	beq.n	8009ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba6:	f003 0320 	and.w	r3, r3, #32
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00a      	beq.n	8009bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d01a      	beq.n	8009c06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bee:	d10a      	bne.n	8009c06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	430a      	orrs	r2, r1
 8009c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00a      	beq.n	8009c28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	605a      	str	r2, [r3, #4]
  }
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b098      	sub	sp, #96	; 0x60
 8009c38:	af02      	add	r7, sp, #8
 8009c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c44:	f7fa f83e 	bl	8003cc4 <HAL_GetTick>
 8009c48:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0308 	and.w	r3, r3, #8
 8009c54:	2b08      	cmp	r3, #8
 8009c56:	d12f      	bne.n	8009cb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c60:	2200      	movs	r2, #0
 8009c62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f88e 	bl	8009d88 <UART_WaitOnFlagUntilTimeout>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d022      	beq.n	8009cb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7a:	e853 3f00 	ldrex	r3, [r3]
 8009c7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c86:	653b      	str	r3, [r7, #80]	; 0x50
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c90:	647b      	str	r3, [r7, #68]	; 0x44
 8009c92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c98:	e841 2300 	strex	r3, r2, [r1]
 8009c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1e6      	bne.n	8009c72 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	e063      	b.n	8009d80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 0304 	and.w	r3, r3, #4
 8009cc2:	2b04      	cmp	r3, #4
 8009cc4:	d149      	bne.n	8009d5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cc6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f857 	bl	8009d88 <UART_WaitOnFlagUntilTimeout>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d03c      	beq.n	8009d5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	623b      	str	r3, [r7, #32]
   return(result);
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8009d00:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d06:	e841 2300 	strex	r3, r2, [r1]
 8009d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1e6      	bne.n	8009ce0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3308      	adds	r3, #8
 8009d18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	e853 3f00 	ldrex	r3, [r3]
 8009d20:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f023 0301 	bic.w	r3, r3, #1
 8009d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3308      	adds	r3, #8
 8009d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d32:	61fa      	str	r2, [r7, #28]
 8009d34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d36:	69b9      	ldr	r1, [r7, #24]
 8009d38:	69fa      	ldr	r2, [r7, #28]
 8009d3a:	e841 2300 	strex	r3, r2, [r1]
 8009d3e:	617b      	str	r3, [r7, #20]
   return(result);
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1e5      	bne.n	8009d12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2220      	movs	r2, #32
 8009d4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e012      	b.n	8009d80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2220      	movs	r2, #32
 8009d66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3758      	adds	r7, #88	; 0x58
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	603b      	str	r3, [r7, #0]
 8009d94:	4613      	mov	r3, r2
 8009d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d98:	e049      	b.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da0:	d045      	beq.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009da2:	f7f9 ff8f 	bl	8003cc4 <HAL_GetTick>
 8009da6:	4602      	mov	r2, r0
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d302      	bcc.n	8009db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e048      	b.n	8009e4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0304 	and.w	r3, r3, #4
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d031      	beq.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	69db      	ldr	r3, [r3, #28]
 8009dd0:	f003 0308 	and.w	r3, r3, #8
 8009dd4:	2b08      	cmp	r3, #8
 8009dd6:	d110      	bne.n	8009dfa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2208      	movs	r2, #8
 8009dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f000 f838 	bl	8009e56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2208      	movs	r2, #8
 8009dea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e029      	b.n	8009e4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	69db      	ldr	r3, [r3, #28]
 8009e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e08:	d111      	bne.n	8009e2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f000 f81e 	bl	8009e56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2220      	movs	r2, #32
 8009e1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e00f      	b.n	8009e4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69da      	ldr	r2, [r3, #28]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	4013      	ands	r3, r2
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	bf0c      	ite	eq
 8009e3e:	2301      	moveq	r3, #1
 8009e40:	2300      	movne	r3, #0
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	461a      	mov	r2, r3
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d0a6      	beq.n	8009d9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b095      	sub	sp, #84	; 0x54
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e66:	e853 3f00 	ldrex	r3, [r3]
 8009e6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8009e7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e84:	e841 2300 	strex	r3, r2, [r1]
 8009e88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e6      	bne.n	8009e5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3308      	adds	r3, #8
 8009e96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	e853 3f00 	ldrex	r3, [r3]
 8009e9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ea6:	f023 0301 	bic.w	r3, r3, #1
 8009eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	3308      	adds	r3, #8
 8009eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009eb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ebc:	e841 2300 	strex	r3, r2, [r1]
 8009ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1e3      	bne.n	8009e90 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d118      	bne.n	8009f02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	e853 3f00 	ldrex	r3, [r3]
 8009edc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	f023 0310 	bic.w	r3, r3, #16
 8009ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	461a      	mov	r2, r3
 8009eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eee:	61bb      	str	r3, [r7, #24]
 8009ef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef2:	6979      	ldr	r1, [r7, #20]
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	e841 2300 	strex	r3, r2, [r1]
 8009efa:	613b      	str	r3, [r7, #16]
   return(result);
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1e6      	bne.n	8009ed0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2220      	movs	r2, #32
 8009f06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009f16:	bf00      	nop
 8009f18:	3754      	adds	r7, #84	; 0x54
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b084      	sub	sp, #16
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f7ff fac3 	bl	80094cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f46:	bf00      	nop
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b088      	sub	sp, #32
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	e853 3f00 	ldrex	r3, [r3]
 8009f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f6a:	61fb      	str	r3, [r7, #28]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	461a      	mov	r2, r3
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	61bb      	str	r3, [r7, #24]
 8009f76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f78:	6979      	ldr	r1, [r7, #20]
 8009f7a:	69ba      	ldr	r2, [r7, #24]
 8009f7c:	e841 2300 	strex	r3, r2, [r1]
 8009f80:	613b      	str	r3, [r7, #16]
   return(result);
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e6      	bne.n	8009f56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7ff fa8e 	bl	80094b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f9c:	bf00      	nop
 8009f9e:	3720      	adds	r7, #32
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d101      	bne.n	8009ff6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	e027      	b.n	800a046 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2224      	movs	r2, #36	; 0x24
 800a002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f022 0201 	bic.w	r2, r2, #1
 800a01c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a024:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2220      	movs	r2, #32
 800a038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a062:	2b01      	cmp	r3, #1
 800a064:	d101      	bne.n	800a06a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a066:	2302      	movs	r3, #2
 800a068:	e02d      	b.n	800a0c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2224      	movs	r2, #36	; 0x24
 800a076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 0201 	bic.w	r2, r2, #1
 800a090:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	683a      	ldr	r2, [r7, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f850 	bl	800a14c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d101      	bne.n	800a0e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	e02d      	b.n	800a142 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2224      	movs	r2, #36	; 0x24
 800a0f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f022 0201 	bic.w	r2, r2, #1
 800a10c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f812 	bl	800a14c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2220      	movs	r2, #32
 800a134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
	...

0800a14c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d108      	bne.n	800a16e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a16c:	e031      	b.n	800a1d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a16e:	2308      	movs	r3, #8
 800a170:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a172:	2308      	movs	r3, #8
 800a174:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	0e5b      	lsrs	r3, r3, #25
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	f003 0307 	and.w	r3, r3, #7
 800a184:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	0f5b      	lsrs	r3, r3, #29
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	f003 0307 	and.w	r3, r3, #7
 800a194:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a196:	7bbb      	ldrb	r3, [r7, #14]
 800a198:	7b3a      	ldrb	r2, [r7, #12]
 800a19a:	4911      	ldr	r1, [pc, #68]	; (800a1e0 <UARTEx_SetNbDataToProcess+0x94>)
 800a19c:	5c8a      	ldrb	r2, [r1, r2]
 800a19e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1a2:	7b3a      	ldrb	r2, [r7, #12]
 800a1a4:	490f      	ldr	r1, [pc, #60]	; (800a1e4 <UARTEx_SetNbDataToProcess+0x98>)
 800a1a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
 800a1b6:	7b7a      	ldrb	r2, [r7, #13]
 800a1b8:	4909      	ldr	r1, [pc, #36]	; (800a1e0 <UARTEx_SetNbDataToProcess+0x94>)
 800a1ba:	5c8a      	ldrb	r2, [r1, r2]
 800a1bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1c0:	7b7a      	ldrb	r2, [r7, #13]
 800a1c2:	4908      	ldr	r1, [pc, #32]	; (800a1e4 <UARTEx_SetNbDataToProcess+0x98>)
 800a1c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a1d2:	bf00      	nop
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	0800c17c 	.word	0x0800c17c
 800a1e4:	0800c184 	.word	0x0800c184

0800a1e8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08a      	sub	sp, #40	; 0x28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800a1f0:	4b27      	ldr	r3, [pc, #156]	; (800a290 <I2Cx_MspInit+0xa8>)
 800a1f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1f4:	4a26      	ldr	r2, [pc, #152]	; (800a290 <I2Cx_MspInit+0xa8>)
 800a1f6:	f043 0302 	orr.w	r3, r3, #2
 800a1fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a1fc:	4b24      	ldr	r3, [pc, #144]	; (800a290 <I2Cx_MspInit+0xa8>)
 800a1fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a200:	f003 0302 	and.w	r3, r3, #2
 800a204:	613b      	str	r3, [r7, #16]
 800a206:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800a208:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a20c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800a20e:	2312      	movs	r3, #18
 800a210:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800a212:	2301      	movs	r3, #1
 800a214:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a216:	2303      	movs	r3, #3
 800a218:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800a21a:	2304      	movs	r3, #4
 800a21c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a21e:	f107 0314 	add.w	r3, r7, #20
 800a222:	4619      	mov	r1, r3
 800a224:	481b      	ldr	r0, [pc, #108]	; (800a294 <I2Cx_MspInit+0xac>)
 800a226:	f7fa ff09 	bl	800503c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a22a:	f107 0314 	add.w	r3, r7, #20
 800a22e:	4619      	mov	r1, r3
 800a230:	4818      	ldr	r0, [pc, #96]	; (800a294 <I2Cx_MspInit+0xac>)
 800a232:	f7fa ff03 	bl	800503c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800a236:	4b16      	ldr	r3, [pc, #88]	; (800a290 <I2Cx_MspInit+0xa8>)
 800a238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a23a:	4a15      	ldr	r2, [pc, #84]	; (800a290 <I2Cx_MspInit+0xa8>)
 800a23c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a240:	6593      	str	r3, [r2, #88]	; 0x58
 800a242:	4b13      	ldr	r3, [pc, #76]	; (800a290 <I2Cx_MspInit+0xa8>)
 800a244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800a24e:	4b10      	ldr	r3, [pc, #64]	; (800a290 <I2Cx_MspInit+0xa8>)
 800a250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a252:	4a0f      	ldr	r2, [pc, #60]	; (800a290 <I2Cx_MspInit+0xa8>)
 800a254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a258:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800a25a:	4b0d      	ldr	r3, [pc, #52]	; (800a290 <I2Cx_MspInit+0xa8>)
 800a25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25e:	4a0c      	ldr	r2, [pc, #48]	; (800a290 <I2Cx_MspInit+0xa8>)
 800a260:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a264:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800a266:	2200      	movs	r2, #0
 800a268:	210f      	movs	r1, #15
 800a26a:	2021      	movs	r0, #33	; 0x21
 800a26c:	f7fa fcf4 	bl	8004c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800a270:	2021      	movs	r0, #33	; 0x21
 800a272:	f7fa fd0d 	bl	8004c90 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800a276:	2200      	movs	r2, #0
 800a278:	210f      	movs	r1, #15
 800a27a:	2022      	movs	r0, #34	; 0x22
 800a27c:	f7fa fcec 	bl	8004c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800a280:	2022      	movs	r0, #34	; 0x22
 800a282:	f7fa fd05 	bl	8004c90 <HAL_NVIC_EnableIRQ>
}
 800a286:	bf00      	nop
 800a288:	3728      	adds	r7, #40	; 0x28
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	40021000 	.word	0x40021000
 800a294:	48000400 	.word	0x48000400

0800a298 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a12      	ldr	r2, [pc, #72]	; (800a2ec <I2Cx_Init+0x54>)
 800a2a4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a11      	ldr	r2, [pc, #68]	; (800a2f0 <I2Cx_Init+0x58>)
 800a2aa:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7ff ff89 	bl	800a1e8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7fb f96f 	bl	80055ba <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800a2dc:	2100      	movs	r1, #0
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f7fb ff1c 	bl	800611c <HAL_I2CEx_ConfigAnalogFilter>
}
 800a2e4:	bf00      	nop
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	40005800 	.word	0x40005800
 800a2f0:	00702681 	.word	0x00702681

0800a2f4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b08a      	sub	sp, #40	; 0x28
 800a2f8:	af04      	add	r7, sp, #16
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	4608      	mov	r0, r1
 800a2fe:	4611      	mov	r1, r2
 800a300:	461a      	mov	r2, r3
 800a302:	4603      	mov	r3, r0
 800a304:	72fb      	strb	r3, [r7, #11]
 800a306:	460b      	mov	r3, r1
 800a308:	813b      	strh	r3, [r7, #8]
 800a30a:	4613      	mov	r3, r2
 800a30c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a30e:	2300      	movs	r3, #0
 800a310:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a312:	7afb      	ldrb	r3, [r7, #11]
 800a314:	b299      	uxth	r1, r3
 800a316:	88f8      	ldrh	r0, [r7, #6]
 800a318:	893a      	ldrh	r2, [r7, #8]
 800a31a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a31e:	9302      	str	r3, [sp, #8]
 800a320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a322:	9301      	str	r3, [sp, #4]
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	4603      	mov	r3, r0
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f7fb fb24 	bl	8005978 <HAL_I2C_Mem_Read>
 800a330:	4603      	mov	r3, r0
 800a332:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d004      	beq.n	800a344 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800a33a:	7afb      	ldrb	r3, [r7, #11]
 800a33c:	4619      	mov	r1, r3
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 f832 	bl	800a3a8 <I2Cx_Error>
  }
  return status;
 800a344:	7dfb      	ldrb	r3, [r7, #23]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b08a      	sub	sp, #40	; 0x28
 800a352:	af04      	add	r7, sp, #16
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	4608      	mov	r0, r1
 800a358:	4611      	mov	r1, r2
 800a35a:	461a      	mov	r2, r3
 800a35c:	4603      	mov	r3, r0
 800a35e:	72fb      	strb	r3, [r7, #11]
 800a360:	460b      	mov	r3, r1
 800a362:	813b      	strh	r3, [r7, #8]
 800a364:	4613      	mov	r3, r2
 800a366:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a36c:	7afb      	ldrb	r3, [r7, #11]
 800a36e:	b299      	uxth	r1, r3
 800a370:	88f8      	ldrh	r0, [r7, #6]
 800a372:	893a      	ldrh	r2, [r7, #8]
 800a374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a378:	9302      	str	r3, [sp, #8]
 800a37a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	4603      	mov	r3, r0
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f7fb f9e3 	bl	8005750 <HAL_I2C_Mem_Write>
 800a38a:	4603      	mov	r3, r0
 800a38c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d004      	beq.n	800a39e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800a394:	7afb      	ldrb	r3, [r7, #11]
 800a396:	4619      	mov	r1, r3
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 f805 	bl	800a3a8 <I2Cx_Error>
  }
  return status;
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7fb f99b 	bl	80056f0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff ff6c 	bl	800a298 <I2Cx_Init>
}
 800a3c0:	bf00      	nop
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800a3cc:	4802      	ldr	r0, [pc, #8]	; (800a3d8 <SENSOR_IO_Init+0x10>)
 800a3ce:	f7ff ff63 	bl	800a298 <I2Cx_Init>
}
 800a3d2:	bf00      	nop
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	200012fc 	.word	0x200012fc

0800a3dc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af02      	add	r7, sp, #8
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	71fb      	strb	r3, [r7, #7]
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	71bb      	strb	r3, [r7, #6]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800a3ee:	79bb      	ldrb	r3, [r7, #6]
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	79f9      	ldrb	r1, [r7, #7]
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	9301      	str	r3, [sp, #4]
 800a3f8:	1d7b      	adds	r3, r7, #5
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	4803      	ldr	r0, [pc, #12]	; (800a40c <SENSOR_IO_Write+0x30>)
 800a400:	f7ff ffa5 	bl	800a34e <I2Cx_WriteMultiple>
}
 800a404:	bf00      	nop
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	200012fc 	.word	0x200012fc

0800a410 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af02      	add	r7, sp, #8
 800a416:	4603      	mov	r3, r0
 800a418:	460a      	mov	r2, r1
 800a41a:	71fb      	strb	r3, [r7, #7]
 800a41c:	4613      	mov	r3, r2
 800a41e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800a420:	2300      	movs	r3, #0
 800a422:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800a424:	79bb      	ldrb	r3, [r7, #6]
 800a426:	b29a      	uxth	r2, r3
 800a428:	79f9      	ldrb	r1, [r7, #7]
 800a42a:	2301      	movs	r3, #1
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	f107 030f 	add.w	r3, r7, #15
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	2301      	movs	r3, #1
 800a436:	4804      	ldr	r0, [pc, #16]	; (800a448 <SENSOR_IO_Read+0x38>)
 800a438:	f7ff ff5c 	bl	800a2f4 <I2Cx_ReadMultiple>

  return read_value;
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	200012fc 	.word	0x200012fc

0800a44c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af02      	add	r7, sp, #8
 800a452:	603a      	str	r2, [r7, #0]
 800a454:	461a      	mov	r2, r3
 800a456:	4603      	mov	r3, r0
 800a458:	71fb      	strb	r3, [r7, #7]
 800a45a:	460b      	mov	r3, r1
 800a45c:	71bb      	strb	r3, [r7, #6]
 800a45e:	4613      	mov	r3, r2
 800a460:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800a462:	79bb      	ldrb	r3, [r7, #6]
 800a464:	b29a      	uxth	r2, r3
 800a466:	79f9      	ldrb	r1, [r7, #7]
 800a468:	88bb      	ldrh	r3, [r7, #4]
 800a46a:	9301      	str	r3, [sp, #4]
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	2301      	movs	r3, #1
 800a472:	4804      	ldr	r0, [pc, #16]	; (800a484 <SENSOR_IO_ReadMultiple+0x38>)
 800a474:	f7ff ff3e 	bl	800a2f4 <I2Cx_ReadMultiple>
 800a478:	4603      	mov	r3, r0
 800a47a:	b29b      	uxth	r3, r3
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	200012fc 	.word	0x200012fc

0800a488 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800a492:	2300      	movs	r3, #0
 800a494:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800a496:	4b19      	ldr	r3, [pc, #100]	; (800a4fc <BSP_ACCELERO_Init+0x74>)
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	4798      	blx	r3
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b6a      	cmp	r3, #106	; 0x6a
 800a4a0:	d002      	beq.n	800a4a8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	73fb      	strb	r3, [r7, #15]
 800a4a6:	e024      	b.n	800a4f2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800a4a8:	4b15      	ldr	r3, [pc, #84]	; (800a500 <BSP_ACCELERO_Init+0x78>)
 800a4aa:	4a14      	ldr	r2, [pc, #80]	; (800a4fc <BSP_ACCELERO_Init+0x74>)
 800a4ac:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800a4ae:	2330      	movs	r3, #48	; 0x30
 800a4b0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800a4ba:	2340      	movs	r3, #64	; 0x40
 800a4bc:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800a4c6:	797a      	ldrb	r2, [r7, #5]
 800a4c8:	7abb      	ldrb	r3, [r7, #10]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800a4d0:	7a3b      	ldrb	r3, [r7, #8]
 800a4d2:	f043 0304 	orr.w	r3, r3, #4
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	021b      	lsls	r3, r3, #8
 800a4da:	b21a      	sxth	r2, r3
 800a4dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	b21b      	sxth	r3, r3
 800a4e4:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800a4e6:	4b06      	ldr	r3, [pc, #24]	; (800a500 <BSP_ACCELERO_Init+0x78>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	89ba      	ldrh	r2, [r7, #12]
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	4798      	blx	r3
  }  

  return ret;
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	20000014 	.word	0x20000014
 800a500:	20001350 	.word	0x20001350

0800a504 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800a50c:	4b08      	ldr	r3, [pc, #32]	; (800a530 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d009      	beq.n	800a528 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800a514:	4b06      	ldr	r3, [pc, #24]	; (800a530 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d004      	beq.n	800a528 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800a51e:	4b04      	ldr	r3, [pc, #16]	; (800a530 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	4798      	blx	r3
    }
  }
}
 800a528:	bf00      	nop
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	20001350 	.word	0x20001350

0800a534 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	4603      	mov	r3, r0
 800a53c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800a53e:	2300      	movs	r3, #0
 800a540:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800a542:	2110      	movs	r1, #16
 800a544:	20d4      	movs	r0, #212	; 0xd4
 800a546:	f7ff ff63 	bl	800a410 <SENSOR_IO_Read>
 800a54a:	4603      	mov	r3, r0
 800a54c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800a552:	7bbb      	ldrb	r3, [r7, #14]
 800a554:	f003 0303 	and.w	r3, r3, #3
 800a558:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800a55a:	7bba      	ldrb	r2, [r7, #14]
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
 800a55e:	4313      	orrs	r3, r2
 800a560:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800a562:	7bbb      	ldrb	r3, [r7, #14]
 800a564:	461a      	mov	r2, r3
 800a566:	2110      	movs	r1, #16
 800a568:	20d4      	movs	r0, #212	; 0xd4
 800a56a:	f7ff ff37 	bl	800a3dc <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800a56e:	2112      	movs	r1, #18
 800a570:	20d4      	movs	r0, #212	; 0xd4
 800a572:	f7ff ff4d 	bl	800a410 <SENSOR_IO_Read>
 800a576:	4603      	mov	r3, r0
 800a578:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800a57a:	88fb      	ldrh	r3, [r7, #6]
 800a57c:	0a1b      	lsrs	r3, r3, #8
 800a57e:	b29b      	uxth	r3, r3
 800a580:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800a582:	7bbb      	ldrb	r3, [r7, #14]
 800a584:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800a588:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800a58a:	7bba      	ldrb	r2, [r7, #14]
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
 800a58e:	4313      	orrs	r3, r2
 800a590:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800a592:	7bbb      	ldrb	r3, [r7, #14]
 800a594:	461a      	mov	r2, r3
 800a596:	2112      	movs	r1, #18
 800a598:	20d4      	movs	r0, #212	; 0xd4
 800a59a:	f7ff ff1f 	bl	800a3dc <SENSOR_IO_Write>
}
 800a59e:	bf00      	nop
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b082      	sub	sp, #8
 800a5aa:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800a5b0:	2110      	movs	r1, #16
 800a5b2:	20d4      	movs	r0, #212	; 0xd4
 800a5b4:	f7ff ff2c 	bl	800a410 <SENSOR_IO_Read>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800a5bc:	79fb      	ldrb	r3, [r7, #7]
 800a5be:	f003 030f 	and.w	r3, r3, #15
 800a5c2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800a5c4:	79fb      	ldrb	r3, [r7, #7]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	2110      	movs	r1, #16
 800a5ca:	20d4      	movs	r0, #212	; 0xd4
 800a5cc:	f7ff ff06 	bl	800a3dc <SENSOR_IO_Write>
}
 800a5d0:	bf00      	nop
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800a5dc:	f7ff fef4 	bl	800a3c8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800a5e0:	210f      	movs	r1, #15
 800a5e2:	20d4      	movs	r0, #212	; 0xd4
 800a5e4:	f7ff ff14 	bl	800a410 <SENSOR_IO_Read>
 800a5e8:	4603      	mov	r3, r0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b084      	sub	sp, #16
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800a5fc:	2115      	movs	r1, #21
 800a5fe:	20d4      	movs	r0, #212	; 0xd4
 800a600:	f7ff ff06 	bl	800a410 <SENSOR_IO_Read>
 800a604:	4603      	mov	r3, r0
 800a606:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800a608:	7bfb      	ldrb	r3, [r7, #15]
 800a60a:	f023 0310 	bic.w	r3, r3, #16
 800a60e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800a610:	88fb      	ldrh	r3, [r7, #6]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d003      	beq.n	800a61e <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800a616:	7bfb      	ldrb	r3, [r7, #15]
 800a618:	f043 0310 	orr.w	r3, r3, #16
 800a61c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800a61e:	7bfb      	ldrb	r3, [r7, #15]
 800a620:	461a      	mov	r2, r3
 800a622:	2115      	movs	r1, #21
 800a624:	20d4      	movs	r0, #212	; 0xd4
 800a626:	f7ff fed9 	bl	800a3dc <SENSOR_IO_Write>
}
 800a62a:	bf00      	nop
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
	...

0800a634 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b088      	sub	sp, #32
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800a644:	f04f 0300 	mov.w	r3, #0
 800a648:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800a64a:	2110      	movs	r1, #16
 800a64c:	20d4      	movs	r0, #212	; 0xd4
 800a64e:	f7ff fedf 	bl	800a410 <SENSOR_IO_Read>
 800a652:	4603      	mov	r3, r0
 800a654:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800a656:	f107 0208 	add.w	r2, r7, #8
 800a65a:	2306      	movs	r3, #6
 800a65c:	2128      	movs	r1, #40	; 0x28
 800a65e:	20d4      	movs	r0, #212	; 0xd4
 800a660:	f7ff fef4 	bl	800a44c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800a664:	2300      	movs	r3, #0
 800a666:	77fb      	strb	r3, [r7, #31]
 800a668:	e01c      	b.n	800a6a4 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800a66a:	7ffb      	ldrb	r3, [r7, #31]
 800a66c:	005b      	lsls	r3, r3, #1
 800a66e:	3301      	adds	r3, #1
 800a670:	3320      	adds	r3, #32
 800a672:	443b      	add	r3, r7
 800a674:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800a678:	b29b      	uxth	r3, r3
 800a67a:	021b      	lsls	r3, r3, #8
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	7ffb      	ldrb	r3, [r7, #31]
 800a680:	005b      	lsls	r3, r3, #1
 800a682:	3320      	adds	r3, #32
 800a684:	443b      	add	r3, r7
 800a686:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	4413      	add	r3, r2
 800a68e:	b29a      	uxth	r2, r3
 800a690:	7ffb      	ldrb	r3, [r7, #31]
 800a692:	b212      	sxth	r2, r2
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	3320      	adds	r3, #32
 800a698:	443b      	add	r3, r7
 800a69a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800a69e:	7ffb      	ldrb	r3, [r7, #31]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	77fb      	strb	r3, [r7, #31]
 800a6a4:	7ffb      	ldrb	r3, [r7, #31]
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d9df      	bls.n	800a66a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800a6aa:	7dfb      	ldrb	r3, [r7, #23]
 800a6ac:	f003 030c 	and.w	r3, r3, #12
 800a6b0:	2b0c      	cmp	r3, #12
 800a6b2:	d829      	bhi.n	800a708 <LSM6DSL_AccReadXYZ+0xd4>
 800a6b4:	a201      	add	r2, pc, #4	; (adr r2, 800a6bc <LSM6DSL_AccReadXYZ+0x88>)
 800a6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ba:	bf00      	nop
 800a6bc:	0800a6f1 	.word	0x0800a6f1
 800a6c0:	0800a709 	.word	0x0800a709
 800a6c4:	0800a709 	.word	0x0800a709
 800a6c8:	0800a709 	.word	0x0800a709
 800a6cc:	0800a703 	.word	0x0800a703
 800a6d0:	0800a709 	.word	0x0800a709
 800a6d4:	0800a709 	.word	0x0800a709
 800a6d8:	0800a709 	.word	0x0800a709
 800a6dc:	0800a6f7 	.word	0x0800a6f7
 800a6e0:	0800a709 	.word	0x0800a709
 800a6e4:	0800a709 	.word	0x0800a709
 800a6e8:	0800a709 	.word	0x0800a709
 800a6ec:	0800a6fd 	.word	0x0800a6fd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800a6f0:	4b18      	ldr	r3, [pc, #96]	; (800a754 <LSM6DSL_AccReadXYZ+0x120>)
 800a6f2:	61bb      	str	r3, [r7, #24]
    break;
 800a6f4:	e008      	b.n	800a708 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800a6f6:	4b18      	ldr	r3, [pc, #96]	; (800a758 <LSM6DSL_AccReadXYZ+0x124>)
 800a6f8:	61bb      	str	r3, [r7, #24]
    break;
 800a6fa:	e005      	b.n	800a708 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800a6fc:	4b17      	ldr	r3, [pc, #92]	; (800a75c <LSM6DSL_AccReadXYZ+0x128>)
 800a6fe:	61bb      	str	r3, [r7, #24]
    break;
 800a700:	e002      	b.n	800a708 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800a702:	4b17      	ldr	r3, [pc, #92]	; (800a760 <LSM6DSL_AccReadXYZ+0x12c>)
 800a704:	61bb      	str	r3, [r7, #24]
    break;    
 800a706:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800a708:	2300      	movs	r3, #0
 800a70a:	77fb      	strb	r3, [r7, #31]
 800a70c:	e01a      	b.n	800a744 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800a70e:	7ffb      	ldrb	r3, [r7, #31]
 800a710:	005b      	lsls	r3, r3, #1
 800a712:	3320      	adds	r3, #32
 800a714:	443b      	add	r3, r7
 800a716:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800a71a:	ee07 3a90 	vmov	s15, r3
 800a71e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a722:	edd7 7a06 	vldr	s15, [r7, #24]
 800a726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a72a:	7ffb      	ldrb	r3, [r7, #31]
 800a72c:	005b      	lsls	r3, r3, #1
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	4413      	add	r3, r2
 800a732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a736:	ee17 2a90 	vmov	r2, s15
 800a73a:	b212      	sxth	r2, r2
 800a73c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800a73e:	7ffb      	ldrb	r3, [r7, #31]
 800a740:	3301      	adds	r3, #1
 800a742:	77fb      	strb	r3, [r7, #31]
 800a744:	7ffb      	ldrb	r3, [r7, #31]
 800a746:	2b02      	cmp	r3, #2
 800a748:	d9e1      	bls.n	800a70e <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800a74a:	bf00      	nop
 800a74c:	bf00      	nop
 800a74e:	3720      	adds	r7, #32
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	3d79db23 	.word	0x3d79db23
 800a758:	3df9db23 	.word	0x3df9db23
 800a75c:	3e79db23 	.word	0x3e79db23
 800a760:	3ef9db23 	.word	0x3ef9db23

0800a764 <sniprintf>:
 800a764:	b40c      	push	{r2, r3}
 800a766:	b530      	push	{r4, r5, lr}
 800a768:	4b17      	ldr	r3, [pc, #92]	; (800a7c8 <sniprintf+0x64>)
 800a76a:	1e0c      	subs	r4, r1, #0
 800a76c:	681d      	ldr	r5, [r3, #0]
 800a76e:	b09d      	sub	sp, #116	; 0x74
 800a770:	da08      	bge.n	800a784 <sniprintf+0x20>
 800a772:	238b      	movs	r3, #139	; 0x8b
 800a774:	602b      	str	r3, [r5, #0]
 800a776:	f04f 30ff 	mov.w	r0, #4294967295
 800a77a:	b01d      	add	sp, #116	; 0x74
 800a77c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a780:	b002      	add	sp, #8
 800a782:	4770      	bx	lr
 800a784:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a788:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a78c:	bf14      	ite	ne
 800a78e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a792:	4623      	moveq	r3, r4
 800a794:	9304      	str	r3, [sp, #16]
 800a796:	9307      	str	r3, [sp, #28]
 800a798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a79c:	9002      	str	r0, [sp, #8]
 800a79e:	9006      	str	r0, [sp, #24]
 800a7a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a7a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a7a6:	ab21      	add	r3, sp, #132	; 0x84
 800a7a8:	a902      	add	r1, sp, #8
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	f000 f9a1 	bl	800aaf4 <_svfiprintf_r>
 800a7b2:	1c43      	adds	r3, r0, #1
 800a7b4:	bfbc      	itt	lt
 800a7b6:	238b      	movlt	r3, #139	; 0x8b
 800a7b8:	602b      	strlt	r3, [r5, #0]
 800a7ba:	2c00      	cmp	r4, #0
 800a7bc:	d0dd      	beq.n	800a77a <sniprintf+0x16>
 800a7be:	9b02      	ldr	r3, [sp, #8]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	701a      	strb	r2, [r3, #0]
 800a7c4:	e7d9      	b.n	800a77a <sniprintf+0x16>
 800a7c6:	bf00      	nop
 800a7c8:	20000094 	.word	0x20000094

0800a7cc <memset>:
 800a7cc:	4402      	add	r2, r0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d100      	bne.n	800a7d6 <memset+0xa>
 800a7d4:	4770      	bx	lr
 800a7d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7da:	e7f9      	b.n	800a7d0 <memset+0x4>

0800a7dc <__errno>:
 800a7dc:	4b01      	ldr	r3, [pc, #4]	; (800a7e4 <__errno+0x8>)
 800a7de:	6818      	ldr	r0, [r3, #0]
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	20000094 	.word	0x20000094

0800a7e8 <__libc_init_array>:
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	4d0d      	ldr	r5, [pc, #52]	; (800a820 <__libc_init_array+0x38>)
 800a7ec:	4c0d      	ldr	r4, [pc, #52]	; (800a824 <__libc_init_array+0x3c>)
 800a7ee:	1b64      	subs	r4, r4, r5
 800a7f0:	10a4      	asrs	r4, r4, #2
 800a7f2:	2600      	movs	r6, #0
 800a7f4:	42a6      	cmp	r6, r4
 800a7f6:	d109      	bne.n	800a80c <__libc_init_array+0x24>
 800a7f8:	4d0b      	ldr	r5, [pc, #44]	; (800a828 <__libc_init_array+0x40>)
 800a7fa:	4c0c      	ldr	r4, [pc, #48]	; (800a82c <__libc_init_array+0x44>)
 800a7fc:	f001 fc0a 	bl	800c014 <_init>
 800a800:	1b64      	subs	r4, r4, r5
 800a802:	10a4      	asrs	r4, r4, #2
 800a804:	2600      	movs	r6, #0
 800a806:	42a6      	cmp	r6, r4
 800a808:	d105      	bne.n	800a816 <__libc_init_array+0x2e>
 800a80a:	bd70      	pop	{r4, r5, r6, pc}
 800a80c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a810:	4798      	blx	r3
 800a812:	3601      	adds	r6, #1
 800a814:	e7ee      	b.n	800a7f4 <__libc_init_array+0xc>
 800a816:	f855 3b04 	ldr.w	r3, [r5], #4
 800a81a:	4798      	blx	r3
 800a81c:	3601      	adds	r6, #1
 800a81e:	e7f2      	b.n	800a806 <__libc_init_array+0x1e>
 800a820:	0800c1f8 	.word	0x0800c1f8
 800a824:	0800c1f8 	.word	0x0800c1f8
 800a828:	0800c1f8 	.word	0x0800c1f8
 800a82c:	0800c1fc 	.word	0x0800c1fc

0800a830 <__retarget_lock_acquire_recursive>:
 800a830:	4770      	bx	lr

0800a832 <__retarget_lock_release_recursive>:
 800a832:	4770      	bx	lr

0800a834 <memcpy>:
 800a834:	440a      	add	r2, r1
 800a836:	4291      	cmp	r1, r2
 800a838:	f100 33ff 	add.w	r3, r0, #4294967295
 800a83c:	d100      	bne.n	800a840 <memcpy+0xc>
 800a83e:	4770      	bx	lr
 800a840:	b510      	push	{r4, lr}
 800a842:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a84a:	4291      	cmp	r1, r2
 800a84c:	d1f9      	bne.n	800a842 <memcpy+0xe>
 800a84e:	bd10      	pop	{r4, pc}

0800a850 <_free_r>:
 800a850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a852:	2900      	cmp	r1, #0
 800a854:	d044      	beq.n	800a8e0 <_free_r+0x90>
 800a856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a85a:	9001      	str	r0, [sp, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f1a1 0404 	sub.w	r4, r1, #4
 800a862:	bfb8      	it	lt
 800a864:	18e4      	addlt	r4, r4, r3
 800a866:	f000 f8df 	bl	800aa28 <__malloc_lock>
 800a86a:	4a1e      	ldr	r2, [pc, #120]	; (800a8e4 <_free_r+0x94>)
 800a86c:	9801      	ldr	r0, [sp, #4]
 800a86e:	6813      	ldr	r3, [r2, #0]
 800a870:	b933      	cbnz	r3, 800a880 <_free_r+0x30>
 800a872:	6063      	str	r3, [r4, #4]
 800a874:	6014      	str	r4, [r2, #0]
 800a876:	b003      	add	sp, #12
 800a878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a87c:	f000 b8da 	b.w	800aa34 <__malloc_unlock>
 800a880:	42a3      	cmp	r3, r4
 800a882:	d908      	bls.n	800a896 <_free_r+0x46>
 800a884:	6825      	ldr	r5, [r4, #0]
 800a886:	1961      	adds	r1, r4, r5
 800a888:	428b      	cmp	r3, r1
 800a88a:	bf01      	itttt	eq
 800a88c:	6819      	ldreq	r1, [r3, #0]
 800a88e:	685b      	ldreq	r3, [r3, #4]
 800a890:	1949      	addeq	r1, r1, r5
 800a892:	6021      	streq	r1, [r4, #0]
 800a894:	e7ed      	b.n	800a872 <_free_r+0x22>
 800a896:	461a      	mov	r2, r3
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	b10b      	cbz	r3, 800a8a0 <_free_r+0x50>
 800a89c:	42a3      	cmp	r3, r4
 800a89e:	d9fa      	bls.n	800a896 <_free_r+0x46>
 800a8a0:	6811      	ldr	r1, [r2, #0]
 800a8a2:	1855      	adds	r5, r2, r1
 800a8a4:	42a5      	cmp	r5, r4
 800a8a6:	d10b      	bne.n	800a8c0 <_free_r+0x70>
 800a8a8:	6824      	ldr	r4, [r4, #0]
 800a8aa:	4421      	add	r1, r4
 800a8ac:	1854      	adds	r4, r2, r1
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	6011      	str	r1, [r2, #0]
 800a8b2:	d1e0      	bne.n	800a876 <_free_r+0x26>
 800a8b4:	681c      	ldr	r4, [r3, #0]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	6053      	str	r3, [r2, #4]
 800a8ba:	440c      	add	r4, r1
 800a8bc:	6014      	str	r4, [r2, #0]
 800a8be:	e7da      	b.n	800a876 <_free_r+0x26>
 800a8c0:	d902      	bls.n	800a8c8 <_free_r+0x78>
 800a8c2:	230c      	movs	r3, #12
 800a8c4:	6003      	str	r3, [r0, #0]
 800a8c6:	e7d6      	b.n	800a876 <_free_r+0x26>
 800a8c8:	6825      	ldr	r5, [r4, #0]
 800a8ca:	1961      	adds	r1, r4, r5
 800a8cc:	428b      	cmp	r3, r1
 800a8ce:	bf04      	itt	eq
 800a8d0:	6819      	ldreq	r1, [r3, #0]
 800a8d2:	685b      	ldreq	r3, [r3, #4]
 800a8d4:	6063      	str	r3, [r4, #4]
 800a8d6:	bf04      	itt	eq
 800a8d8:	1949      	addeq	r1, r1, r5
 800a8da:	6021      	streq	r1, [r4, #0]
 800a8dc:	6054      	str	r4, [r2, #4]
 800a8de:	e7ca      	b.n	800a876 <_free_r+0x26>
 800a8e0:	b003      	add	sp, #12
 800a8e2:	bd30      	pop	{r4, r5, pc}
 800a8e4:	20001494 	.word	0x20001494

0800a8e8 <sbrk_aligned>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	4e0e      	ldr	r6, [pc, #56]	; (800a924 <sbrk_aligned+0x3c>)
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	6831      	ldr	r1, [r6, #0]
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	b911      	cbnz	r1, 800a8fa <sbrk_aligned+0x12>
 800a8f4:	f000 fba6 	bl	800b044 <_sbrk_r>
 800a8f8:	6030      	str	r0, [r6, #0]
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	f000 fba1 	bl	800b044 <_sbrk_r>
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	d00a      	beq.n	800a91c <sbrk_aligned+0x34>
 800a906:	1cc4      	adds	r4, r0, #3
 800a908:	f024 0403 	bic.w	r4, r4, #3
 800a90c:	42a0      	cmp	r0, r4
 800a90e:	d007      	beq.n	800a920 <sbrk_aligned+0x38>
 800a910:	1a21      	subs	r1, r4, r0
 800a912:	4628      	mov	r0, r5
 800a914:	f000 fb96 	bl	800b044 <_sbrk_r>
 800a918:	3001      	adds	r0, #1
 800a91a:	d101      	bne.n	800a920 <sbrk_aligned+0x38>
 800a91c:	f04f 34ff 	mov.w	r4, #4294967295
 800a920:	4620      	mov	r0, r4
 800a922:	bd70      	pop	{r4, r5, r6, pc}
 800a924:	20001498 	.word	0x20001498

0800a928 <_malloc_r>:
 800a928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a92c:	1ccd      	adds	r5, r1, #3
 800a92e:	f025 0503 	bic.w	r5, r5, #3
 800a932:	3508      	adds	r5, #8
 800a934:	2d0c      	cmp	r5, #12
 800a936:	bf38      	it	cc
 800a938:	250c      	movcc	r5, #12
 800a93a:	2d00      	cmp	r5, #0
 800a93c:	4607      	mov	r7, r0
 800a93e:	db01      	blt.n	800a944 <_malloc_r+0x1c>
 800a940:	42a9      	cmp	r1, r5
 800a942:	d905      	bls.n	800a950 <_malloc_r+0x28>
 800a944:	230c      	movs	r3, #12
 800a946:	603b      	str	r3, [r7, #0]
 800a948:	2600      	movs	r6, #0
 800a94a:	4630      	mov	r0, r6
 800a94c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a950:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa24 <_malloc_r+0xfc>
 800a954:	f000 f868 	bl	800aa28 <__malloc_lock>
 800a958:	f8d8 3000 	ldr.w	r3, [r8]
 800a95c:	461c      	mov	r4, r3
 800a95e:	bb5c      	cbnz	r4, 800a9b8 <_malloc_r+0x90>
 800a960:	4629      	mov	r1, r5
 800a962:	4638      	mov	r0, r7
 800a964:	f7ff ffc0 	bl	800a8e8 <sbrk_aligned>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	4604      	mov	r4, r0
 800a96c:	d155      	bne.n	800aa1a <_malloc_r+0xf2>
 800a96e:	f8d8 4000 	ldr.w	r4, [r8]
 800a972:	4626      	mov	r6, r4
 800a974:	2e00      	cmp	r6, #0
 800a976:	d145      	bne.n	800aa04 <_malloc_r+0xdc>
 800a978:	2c00      	cmp	r4, #0
 800a97a:	d048      	beq.n	800aa0e <_malloc_r+0xe6>
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	4631      	mov	r1, r6
 800a980:	4638      	mov	r0, r7
 800a982:	eb04 0903 	add.w	r9, r4, r3
 800a986:	f000 fb5d 	bl	800b044 <_sbrk_r>
 800a98a:	4581      	cmp	r9, r0
 800a98c:	d13f      	bne.n	800aa0e <_malloc_r+0xe6>
 800a98e:	6821      	ldr	r1, [r4, #0]
 800a990:	1a6d      	subs	r5, r5, r1
 800a992:	4629      	mov	r1, r5
 800a994:	4638      	mov	r0, r7
 800a996:	f7ff ffa7 	bl	800a8e8 <sbrk_aligned>
 800a99a:	3001      	adds	r0, #1
 800a99c:	d037      	beq.n	800aa0e <_malloc_r+0xe6>
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	442b      	add	r3, r5
 800a9a2:	6023      	str	r3, [r4, #0]
 800a9a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d038      	beq.n	800aa1e <_malloc_r+0xf6>
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	42a2      	cmp	r2, r4
 800a9b0:	d12b      	bne.n	800aa0a <_malloc_r+0xe2>
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	605a      	str	r2, [r3, #4]
 800a9b6:	e00f      	b.n	800a9d8 <_malloc_r+0xb0>
 800a9b8:	6822      	ldr	r2, [r4, #0]
 800a9ba:	1b52      	subs	r2, r2, r5
 800a9bc:	d41f      	bmi.n	800a9fe <_malloc_r+0xd6>
 800a9be:	2a0b      	cmp	r2, #11
 800a9c0:	d917      	bls.n	800a9f2 <_malloc_r+0xca>
 800a9c2:	1961      	adds	r1, r4, r5
 800a9c4:	42a3      	cmp	r3, r4
 800a9c6:	6025      	str	r5, [r4, #0]
 800a9c8:	bf18      	it	ne
 800a9ca:	6059      	strne	r1, [r3, #4]
 800a9cc:	6863      	ldr	r3, [r4, #4]
 800a9ce:	bf08      	it	eq
 800a9d0:	f8c8 1000 	streq.w	r1, [r8]
 800a9d4:	5162      	str	r2, [r4, r5]
 800a9d6:	604b      	str	r3, [r1, #4]
 800a9d8:	4638      	mov	r0, r7
 800a9da:	f104 060b 	add.w	r6, r4, #11
 800a9de:	f000 f829 	bl	800aa34 <__malloc_unlock>
 800a9e2:	f026 0607 	bic.w	r6, r6, #7
 800a9e6:	1d23      	adds	r3, r4, #4
 800a9e8:	1af2      	subs	r2, r6, r3
 800a9ea:	d0ae      	beq.n	800a94a <_malloc_r+0x22>
 800a9ec:	1b9b      	subs	r3, r3, r6
 800a9ee:	50a3      	str	r3, [r4, r2]
 800a9f0:	e7ab      	b.n	800a94a <_malloc_r+0x22>
 800a9f2:	42a3      	cmp	r3, r4
 800a9f4:	6862      	ldr	r2, [r4, #4]
 800a9f6:	d1dd      	bne.n	800a9b4 <_malloc_r+0x8c>
 800a9f8:	f8c8 2000 	str.w	r2, [r8]
 800a9fc:	e7ec      	b.n	800a9d8 <_malloc_r+0xb0>
 800a9fe:	4623      	mov	r3, r4
 800aa00:	6864      	ldr	r4, [r4, #4]
 800aa02:	e7ac      	b.n	800a95e <_malloc_r+0x36>
 800aa04:	4634      	mov	r4, r6
 800aa06:	6876      	ldr	r6, [r6, #4]
 800aa08:	e7b4      	b.n	800a974 <_malloc_r+0x4c>
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	e7cc      	b.n	800a9a8 <_malloc_r+0x80>
 800aa0e:	230c      	movs	r3, #12
 800aa10:	603b      	str	r3, [r7, #0]
 800aa12:	4638      	mov	r0, r7
 800aa14:	f000 f80e 	bl	800aa34 <__malloc_unlock>
 800aa18:	e797      	b.n	800a94a <_malloc_r+0x22>
 800aa1a:	6025      	str	r5, [r4, #0]
 800aa1c:	e7dc      	b.n	800a9d8 <_malloc_r+0xb0>
 800aa1e:	605b      	str	r3, [r3, #4]
 800aa20:	deff      	udf	#255	; 0xff
 800aa22:	bf00      	nop
 800aa24:	20001494 	.word	0x20001494

0800aa28 <__malloc_lock>:
 800aa28:	4801      	ldr	r0, [pc, #4]	; (800aa30 <__malloc_lock+0x8>)
 800aa2a:	f7ff bf01 	b.w	800a830 <__retarget_lock_acquire_recursive>
 800aa2e:	bf00      	nop
 800aa30:	20001490 	.word	0x20001490

0800aa34 <__malloc_unlock>:
 800aa34:	4801      	ldr	r0, [pc, #4]	; (800aa3c <__malloc_unlock+0x8>)
 800aa36:	f7ff befc 	b.w	800a832 <__retarget_lock_release_recursive>
 800aa3a:	bf00      	nop
 800aa3c:	20001490 	.word	0x20001490

0800aa40 <__ssputs_r>:
 800aa40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa44:	688e      	ldr	r6, [r1, #8]
 800aa46:	461f      	mov	r7, r3
 800aa48:	42be      	cmp	r6, r7
 800aa4a:	680b      	ldr	r3, [r1, #0]
 800aa4c:	4682      	mov	sl, r0
 800aa4e:	460c      	mov	r4, r1
 800aa50:	4690      	mov	r8, r2
 800aa52:	d82c      	bhi.n	800aaae <__ssputs_r+0x6e>
 800aa54:	898a      	ldrh	r2, [r1, #12]
 800aa56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa5a:	d026      	beq.n	800aaaa <__ssputs_r+0x6a>
 800aa5c:	6965      	ldr	r5, [r4, #20]
 800aa5e:	6909      	ldr	r1, [r1, #16]
 800aa60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa64:	eba3 0901 	sub.w	r9, r3, r1
 800aa68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa6c:	1c7b      	adds	r3, r7, #1
 800aa6e:	444b      	add	r3, r9
 800aa70:	106d      	asrs	r5, r5, #1
 800aa72:	429d      	cmp	r5, r3
 800aa74:	bf38      	it	cc
 800aa76:	461d      	movcc	r5, r3
 800aa78:	0553      	lsls	r3, r2, #21
 800aa7a:	d527      	bpl.n	800aacc <__ssputs_r+0x8c>
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	f7ff ff53 	bl	800a928 <_malloc_r>
 800aa82:	4606      	mov	r6, r0
 800aa84:	b360      	cbz	r0, 800aae0 <__ssputs_r+0xa0>
 800aa86:	6921      	ldr	r1, [r4, #16]
 800aa88:	464a      	mov	r2, r9
 800aa8a:	f7ff fed3 	bl	800a834 <memcpy>
 800aa8e:	89a3      	ldrh	r3, [r4, #12]
 800aa90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa98:	81a3      	strh	r3, [r4, #12]
 800aa9a:	6126      	str	r6, [r4, #16]
 800aa9c:	6165      	str	r5, [r4, #20]
 800aa9e:	444e      	add	r6, r9
 800aaa0:	eba5 0509 	sub.w	r5, r5, r9
 800aaa4:	6026      	str	r6, [r4, #0]
 800aaa6:	60a5      	str	r5, [r4, #8]
 800aaa8:	463e      	mov	r6, r7
 800aaaa:	42be      	cmp	r6, r7
 800aaac:	d900      	bls.n	800aab0 <__ssputs_r+0x70>
 800aaae:	463e      	mov	r6, r7
 800aab0:	6820      	ldr	r0, [r4, #0]
 800aab2:	4632      	mov	r2, r6
 800aab4:	4641      	mov	r1, r8
 800aab6:	f000 faab 	bl	800b010 <memmove>
 800aaba:	68a3      	ldr	r3, [r4, #8]
 800aabc:	1b9b      	subs	r3, r3, r6
 800aabe:	60a3      	str	r3, [r4, #8]
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	4433      	add	r3, r6
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	2000      	movs	r0, #0
 800aac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aacc:	462a      	mov	r2, r5
 800aace:	f000 fac9 	bl	800b064 <_realloc_r>
 800aad2:	4606      	mov	r6, r0
 800aad4:	2800      	cmp	r0, #0
 800aad6:	d1e0      	bne.n	800aa9a <__ssputs_r+0x5a>
 800aad8:	6921      	ldr	r1, [r4, #16]
 800aada:	4650      	mov	r0, sl
 800aadc:	f7ff feb8 	bl	800a850 <_free_r>
 800aae0:	230c      	movs	r3, #12
 800aae2:	f8ca 3000 	str.w	r3, [sl]
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaec:	81a3      	strh	r3, [r4, #12]
 800aaee:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf2:	e7e9      	b.n	800aac8 <__ssputs_r+0x88>

0800aaf4 <_svfiprintf_r>:
 800aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	4698      	mov	r8, r3
 800aafa:	898b      	ldrh	r3, [r1, #12]
 800aafc:	061b      	lsls	r3, r3, #24
 800aafe:	b09d      	sub	sp, #116	; 0x74
 800ab00:	4607      	mov	r7, r0
 800ab02:	460d      	mov	r5, r1
 800ab04:	4614      	mov	r4, r2
 800ab06:	d50e      	bpl.n	800ab26 <_svfiprintf_r+0x32>
 800ab08:	690b      	ldr	r3, [r1, #16]
 800ab0a:	b963      	cbnz	r3, 800ab26 <_svfiprintf_r+0x32>
 800ab0c:	2140      	movs	r1, #64	; 0x40
 800ab0e:	f7ff ff0b 	bl	800a928 <_malloc_r>
 800ab12:	6028      	str	r0, [r5, #0]
 800ab14:	6128      	str	r0, [r5, #16]
 800ab16:	b920      	cbnz	r0, 800ab22 <_svfiprintf_r+0x2e>
 800ab18:	230c      	movs	r3, #12
 800ab1a:	603b      	str	r3, [r7, #0]
 800ab1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab20:	e0d0      	b.n	800acc4 <_svfiprintf_r+0x1d0>
 800ab22:	2340      	movs	r3, #64	; 0x40
 800ab24:	616b      	str	r3, [r5, #20]
 800ab26:	2300      	movs	r3, #0
 800ab28:	9309      	str	r3, [sp, #36]	; 0x24
 800ab2a:	2320      	movs	r3, #32
 800ab2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab30:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab34:	2330      	movs	r3, #48	; 0x30
 800ab36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800acdc <_svfiprintf_r+0x1e8>
 800ab3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab3e:	f04f 0901 	mov.w	r9, #1
 800ab42:	4623      	mov	r3, r4
 800ab44:	469a      	mov	sl, r3
 800ab46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab4a:	b10a      	cbz	r2, 800ab50 <_svfiprintf_r+0x5c>
 800ab4c:	2a25      	cmp	r2, #37	; 0x25
 800ab4e:	d1f9      	bne.n	800ab44 <_svfiprintf_r+0x50>
 800ab50:	ebba 0b04 	subs.w	fp, sl, r4
 800ab54:	d00b      	beq.n	800ab6e <_svfiprintf_r+0x7a>
 800ab56:	465b      	mov	r3, fp
 800ab58:	4622      	mov	r2, r4
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	f7ff ff6f 	bl	800aa40 <__ssputs_r>
 800ab62:	3001      	adds	r0, #1
 800ab64:	f000 80a9 	beq.w	800acba <_svfiprintf_r+0x1c6>
 800ab68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab6a:	445a      	add	r2, fp
 800ab6c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f000 80a1 	beq.w	800acba <_svfiprintf_r+0x1c6>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab82:	f10a 0a01 	add.w	sl, sl, #1
 800ab86:	9304      	str	r3, [sp, #16]
 800ab88:	9307      	str	r3, [sp, #28]
 800ab8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab8e:	931a      	str	r3, [sp, #104]	; 0x68
 800ab90:	4654      	mov	r4, sl
 800ab92:	2205      	movs	r2, #5
 800ab94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab98:	4850      	ldr	r0, [pc, #320]	; (800acdc <_svfiprintf_r+0x1e8>)
 800ab9a:	f7f5 fb39 	bl	8000210 <memchr>
 800ab9e:	9a04      	ldr	r2, [sp, #16]
 800aba0:	b9d8      	cbnz	r0, 800abda <_svfiprintf_r+0xe6>
 800aba2:	06d0      	lsls	r0, r2, #27
 800aba4:	bf44      	itt	mi
 800aba6:	2320      	movmi	r3, #32
 800aba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abac:	0711      	lsls	r1, r2, #28
 800abae:	bf44      	itt	mi
 800abb0:	232b      	movmi	r3, #43	; 0x2b
 800abb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abb6:	f89a 3000 	ldrb.w	r3, [sl]
 800abba:	2b2a      	cmp	r3, #42	; 0x2a
 800abbc:	d015      	beq.n	800abea <_svfiprintf_r+0xf6>
 800abbe:	9a07      	ldr	r2, [sp, #28]
 800abc0:	4654      	mov	r4, sl
 800abc2:	2000      	movs	r0, #0
 800abc4:	f04f 0c0a 	mov.w	ip, #10
 800abc8:	4621      	mov	r1, r4
 800abca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abce:	3b30      	subs	r3, #48	; 0x30
 800abd0:	2b09      	cmp	r3, #9
 800abd2:	d94d      	bls.n	800ac70 <_svfiprintf_r+0x17c>
 800abd4:	b1b0      	cbz	r0, 800ac04 <_svfiprintf_r+0x110>
 800abd6:	9207      	str	r2, [sp, #28]
 800abd8:	e014      	b.n	800ac04 <_svfiprintf_r+0x110>
 800abda:	eba0 0308 	sub.w	r3, r0, r8
 800abde:	fa09 f303 	lsl.w	r3, r9, r3
 800abe2:	4313      	orrs	r3, r2
 800abe4:	9304      	str	r3, [sp, #16]
 800abe6:	46a2      	mov	sl, r4
 800abe8:	e7d2      	b.n	800ab90 <_svfiprintf_r+0x9c>
 800abea:	9b03      	ldr	r3, [sp, #12]
 800abec:	1d19      	adds	r1, r3, #4
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	9103      	str	r1, [sp, #12]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	bfbb      	ittet	lt
 800abf6:	425b      	neglt	r3, r3
 800abf8:	f042 0202 	orrlt.w	r2, r2, #2
 800abfc:	9307      	strge	r3, [sp, #28]
 800abfe:	9307      	strlt	r3, [sp, #28]
 800ac00:	bfb8      	it	lt
 800ac02:	9204      	strlt	r2, [sp, #16]
 800ac04:	7823      	ldrb	r3, [r4, #0]
 800ac06:	2b2e      	cmp	r3, #46	; 0x2e
 800ac08:	d10c      	bne.n	800ac24 <_svfiprintf_r+0x130>
 800ac0a:	7863      	ldrb	r3, [r4, #1]
 800ac0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ac0e:	d134      	bne.n	800ac7a <_svfiprintf_r+0x186>
 800ac10:	9b03      	ldr	r3, [sp, #12]
 800ac12:	1d1a      	adds	r2, r3, #4
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	9203      	str	r2, [sp, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	bfb8      	it	lt
 800ac1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac20:	3402      	adds	r4, #2
 800ac22:	9305      	str	r3, [sp, #20]
 800ac24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800acec <_svfiprintf_r+0x1f8>
 800ac28:	7821      	ldrb	r1, [r4, #0]
 800ac2a:	2203      	movs	r2, #3
 800ac2c:	4650      	mov	r0, sl
 800ac2e:	f7f5 faef 	bl	8000210 <memchr>
 800ac32:	b138      	cbz	r0, 800ac44 <_svfiprintf_r+0x150>
 800ac34:	9b04      	ldr	r3, [sp, #16]
 800ac36:	eba0 000a 	sub.w	r0, r0, sl
 800ac3a:	2240      	movs	r2, #64	; 0x40
 800ac3c:	4082      	lsls	r2, r0
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	3401      	adds	r4, #1
 800ac42:	9304      	str	r3, [sp, #16]
 800ac44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac48:	4825      	ldr	r0, [pc, #148]	; (800ace0 <_svfiprintf_r+0x1ec>)
 800ac4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac4e:	2206      	movs	r2, #6
 800ac50:	f7f5 fade 	bl	8000210 <memchr>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d038      	beq.n	800acca <_svfiprintf_r+0x1d6>
 800ac58:	4b22      	ldr	r3, [pc, #136]	; (800ace4 <_svfiprintf_r+0x1f0>)
 800ac5a:	bb1b      	cbnz	r3, 800aca4 <_svfiprintf_r+0x1b0>
 800ac5c:	9b03      	ldr	r3, [sp, #12]
 800ac5e:	3307      	adds	r3, #7
 800ac60:	f023 0307 	bic.w	r3, r3, #7
 800ac64:	3308      	adds	r3, #8
 800ac66:	9303      	str	r3, [sp, #12]
 800ac68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac6a:	4433      	add	r3, r6
 800ac6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac6e:	e768      	b.n	800ab42 <_svfiprintf_r+0x4e>
 800ac70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac74:	460c      	mov	r4, r1
 800ac76:	2001      	movs	r0, #1
 800ac78:	e7a6      	b.n	800abc8 <_svfiprintf_r+0xd4>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	3401      	adds	r4, #1
 800ac7e:	9305      	str	r3, [sp, #20]
 800ac80:	4619      	mov	r1, r3
 800ac82:	f04f 0c0a 	mov.w	ip, #10
 800ac86:	4620      	mov	r0, r4
 800ac88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac8c:	3a30      	subs	r2, #48	; 0x30
 800ac8e:	2a09      	cmp	r2, #9
 800ac90:	d903      	bls.n	800ac9a <_svfiprintf_r+0x1a6>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0c6      	beq.n	800ac24 <_svfiprintf_r+0x130>
 800ac96:	9105      	str	r1, [sp, #20]
 800ac98:	e7c4      	b.n	800ac24 <_svfiprintf_r+0x130>
 800ac9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac9e:	4604      	mov	r4, r0
 800aca0:	2301      	movs	r3, #1
 800aca2:	e7f0      	b.n	800ac86 <_svfiprintf_r+0x192>
 800aca4:	ab03      	add	r3, sp, #12
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	462a      	mov	r2, r5
 800acaa:	4b0f      	ldr	r3, [pc, #60]	; (800ace8 <_svfiprintf_r+0x1f4>)
 800acac:	a904      	add	r1, sp, #16
 800acae:	4638      	mov	r0, r7
 800acb0:	f3af 8000 	nop.w
 800acb4:	1c42      	adds	r2, r0, #1
 800acb6:	4606      	mov	r6, r0
 800acb8:	d1d6      	bne.n	800ac68 <_svfiprintf_r+0x174>
 800acba:	89ab      	ldrh	r3, [r5, #12]
 800acbc:	065b      	lsls	r3, r3, #25
 800acbe:	f53f af2d 	bmi.w	800ab1c <_svfiprintf_r+0x28>
 800acc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acc4:	b01d      	add	sp, #116	; 0x74
 800acc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acca:	ab03      	add	r3, sp, #12
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	462a      	mov	r2, r5
 800acd0:	4b05      	ldr	r3, [pc, #20]	; (800ace8 <_svfiprintf_r+0x1f4>)
 800acd2:	a904      	add	r1, sp, #16
 800acd4:	4638      	mov	r0, r7
 800acd6:	f000 f879 	bl	800adcc <_printf_i>
 800acda:	e7eb      	b.n	800acb4 <_svfiprintf_r+0x1c0>
 800acdc:	0800c18c 	.word	0x0800c18c
 800ace0:	0800c196 	.word	0x0800c196
 800ace4:	00000000 	.word	0x00000000
 800ace8:	0800aa41 	.word	0x0800aa41
 800acec:	0800c192 	.word	0x0800c192

0800acf0 <_printf_common>:
 800acf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acf4:	4616      	mov	r6, r2
 800acf6:	4699      	mov	r9, r3
 800acf8:	688a      	ldr	r2, [r1, #8]
 800acfa:	690b      	ldr	r3, [r1, #16]
 800acfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad00:	4293      	cmp	r3, r2
 800ad02:	bfb8      	it	lt
 800ad04:	4613      	movlt	r3, r2
 800ad06:	6033      	str	r3, [r6, #0]
 800ad08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad0c:	4607      	mov	r7, r0
 800ad0e:	460c      	mov	r4, r1
 800ad10:	b10a      	cbz	r2, 800ad16 <_printf_common+0x26>
 800ad12:	3301      	adds	r3, #1
 800ad14:	6033      	str	r3, [r6, #0]
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	0699      	lsls	r1, r3, #26
 800ad1a:	bf42      	ittt	mi
 800ad1c:	6833      	ldrmi	r3, [r6, #0]
 800ad1e:	3302      	addmi	r3, #2
 800ad20:	6033      	strmi	r3, [r6, #0]
 800ad22:	6825      	ldr	r5, [r4, #0]
 800ad24:	f015 0506 	ands.w	r5, r5, #6
 800ad28:	d106      	bne.n	800ad38 <_printf_common+0x48>
 800ad2a:	f104 0a19 	add.w	sl, r4, #25
 800ad2e:	68e3      	ldr	r3, [r4, #12]
 800ad30:	6832      	ldr	r2, [r6, #0]
 800ad32:	1a9b      	subs	r3, r3, r2
 800ad34:	42ab      	cmp	r3, r5
 800ad36:	dc26      	bgt.n	800ad86 <_printf_common+0x96>
 800ad38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad3c:	1e13      	subs	r3, r2, #0
 800ad3e:	6822      	ldr	r2, [r4, #0]
 800ad40:	bf18      	it	ne
 800ad42:	2301      	movne	r3, #1
 800ad44:	0692      	lsls	r2, r2, #26
 800ad46:	d42b      	bmi.n	800ada0 <_printf_common+0xb0>
 800ad48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad4c:	4649      	mov	r1, r9
 800ad4e:	4638      	mov	r0, r7
 800ad50:	47c0      	blx	r8
 800ad52:	3001      	adds	r0, #1
 800ad54:	d01e      	beq.n	800ad94 <_printf_common+0xa4>
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	6922      	ldr	r2, [r4, #16]
 800ad5a:	f003 0306 	and.w	r3, r3, #6
 800ad5e:	2b04      	cmp	r3, #4
 800ad60:	bf02      	ittt	eq
 800ad62:	68e5      	ldreq	r5, [r4, #12]
 800ad64:	6833      	ldreq	r3, [r6, #0]
 800ad66:	1aed      	subeq	r5, r5, r3
 800ad68:	68a3      	ldr	r3, [r4, #8]
 800ad6a:	bf0c      	ite	eq
 800ad6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad70:	2500      	movne	r5, #0
 800ad72:	4293      	cmp	r3, r2
 800ad74:	bfc4      	itt	gt
 800ad76:	1a9b      	subgt	r3, r3, r2
 800ad78:	18ed      	addgt	r5, r5, r3
 800ad7a:	2600      	movs	r6, #0
 800ad7c:	341a      	adds	r4, #26
 800ad7e:	42b5      	cmp	r5, r6
 800ad80:	d11a      	bne.n	800adb8 <_printf_common+0xc8>
 800ad82:	2000      	movs	r0, #0
 800ad84:	e008      	b.n	800ad98 <_printf_common+0xa8>
 800ad86:	2301      	movs	r3, #1
 800ad88:	4652      	mov	r2, sl
 800ad8a:	4649      	mov	r1, r9
 800ad8c:	4638      	mov	r0, r7
 800ad8e:	47c0      	blx	r8
 800ad90:	3001      	adds	r0, #1
 800ad92:	d103      	bne.n	800ad9c <_printf_common+0xac>
 800ad94:	f04f 30ff 	mov.w	r0, #4294967295
 800ad98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad9c:	3501      	adds	r5, #1
 800ad9e:	e7c6      	b.n	800ad2e <_printf_common+0x3e>
 800ada0:	18e1      	adds	r1, r4, r3
 800ada2:	1c5a      	adds	r2, r3, #1
 800ada4:	2030      	movs	r0, #48	; 0x30
 800ada6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800adaa:	4422      	add	r2, r4
 800adac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800adb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800adb4:	3302      	adds	r3, #2
 800adb6:	e7c7      	b.n	800ad48 <_printf_common+0x58>
 800adb8:	2301      	movs	r3, #1
 800adba:	4622      	mov	r2, r4
 800adbc:	4649      	mov	r1, r9
 800adbe:	4638      	mov	r0, r7
 800adc0:	47c0      	blx	r8
 800adc2:	3001      	adds	r0, #1
 800adc4:	d0e6      	beq.n	800ad94 <_printf_common+0xa4>
 800adc6:	3601      	adds	r6, #1
 800adc8:	e7d9      	b.n	800ad7e <_printf_common+0x8e>
	...

0800adcc <_printf_i>:
 800adcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800add0:	7e0f      	ldrb	r7, [r1, #24]
 800add2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800add4:	2f78      	cmp	r7, #120	; 0x78
 800add6:	4691      	mov	r9, r2
 800add8:	4680      	mov	r8, r0
 800adda:	460c      	mov	r4, r1
 800addc:	469a      	mov	sl, r3
 800adde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ade2:	d807      	bhi.n	800adf4 <_printf_i+0x28>
 800ade4:	2f62      	cmp	r7, #98	; 0x62
 800ade6:	d80a      	bhi.n	800adfe <_printf_i+0x32>
 800ade8:	2f00      	cmp	r7, #0
 800adea:	f000 80d4 	beq.w	800af96 <_printf_i+0x1ca>
 800adee:	2f58      	cmp	r7, #88	; 0x58
 800adf0:	f000 80c0 	beq.w	800af74 <_printf_i+0x1a8>
 800adf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800adfc:	e03a      	b.n	800ae74 <_printf_i+0xa8>
 800adfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae02:	2b15      	cmp	r3, #21
 800ae04:	d8f6      	bhi.n	800adf4 <_printf_i+0x28>
 800ae06:	a101      	add	r1, pc, #4	; (adr r1, 800ae0c <_printf_i+0x40>)
 800ae08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae0c:	0800ae65 	.word	0x0800ae65
 800ae10:	0800ae79 	.word	0x0800ae79
 800ae14:	0800adf5 	.word	0x0800adf5
 800ae18:	0800adf5 	.word	0x0800adf5
 800ae1c:	0800adf5 	.word	0x0800adf5
 800ae20:	0800adf5 	.word	0x0800adf5
 800ae24:	0800ae79 	.word	0x0800ae79
 800ae28:	0800adf5 	.word	0x0800adf5
 800ae2c:	0800adf5 	.word	0x0800adf5
 800ae30:	0800adf5 	.word	0x0800adf5
 800ae34:	0800adf5 	.word	0x0800adf5
 800ae38:	0800af7d 	.word	0x0800af7d
 800ae3c:	0800aea5 	.word	0x0800aea5
 800ae40:	0800af37 	.word	0x0800af37
 800ae44:	0800adf5 	.word	0x0800adf5
 800ae48:	0800adf5 	.word	0x0800adf5
 800ae4c:	0800af9f 	.word	0x0800af9f
 800ae50:	0800adf5 	.word	0x0800adf5
 800ae54:	0800aea5 	.word	0x0800aea5
 800ae58:	0800adf5 	.word	0x0800adf5
 800ae5c:	0800adf5 	.word	0x0800adf5
 800ae60:	0800af3f 	.word	0x0800af3f
 800ae64:	682b      	ldr	r3, [r5, #0]
 800ae66:	1d1a      	adds	r2, r3, #4
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	602a      	str	r2, [r5, #0]
 800ae6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae74:	2301      	movs	r3, #1
 800ae76:	e09f      	b.n	800afb8 <_printf_i+0x1ec>
 800ae78:	6820      	ldr	r0, [r4, #0]
 800ae7a:	682b      	ldr	r3, [r5, #0]
 800ae7c:	0607      	lsls	r7, r0, #24
 800ae7e:	f103 0104 	add.w	r1, r3, #4
 800ae82:	6029      	str	r1, [r5, #0]
 800ae84:	d501      	bpl.n	800ae8a <_printf_i+0xbe>
 800ae86:	681e      	ldr	r6, [r3, #0]
 800ae88:	e003      	b.n	800ae92 <_printf_i+0xc6>
 800ae8a:	0646      	lsls	r6, r0, #25
 800ae8c:	d5fb      	bpl.n	800ae86 <_printf_i+0xba>
 800ae8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ae92:	2e00      	cmp	r6, #0
 800ae94:	da03      	bge.n	800ae9e <_printf_i+0xd2>
 800ae96:	232d      	movs	r3, #45	; 0x2d
 800ae98:	4276      	negs	r6, r6
 800ae9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae9e:	485a      	ldr	r0, [pc, #360]	; (800b008 <_printf_i+0x23c>)
 800aea0:	230a      	movs	r3, #10
 800aea2:	e012      	b.n	800aeca <_printf_i+0xfe>
 800aea4:	682b      	ldr	r3, [r5, #0]
 800aea6:	6820      	ldr	r0, [r4, #0]
 800aea8:	1d19      	adds	r1, r3, #4
 800aeaa:	6029      	str	r1, [r5, #0]
 800aeac:	0605      	lsls	r5, r0, #24
 800aeae:	d501      	bpl.n	800aeb4 <_printf_i+0xe8>
 800aeb0:	681e      	ldr	r6, [r3, #0]
 800aeb2:	e002      	b.n	800aeba <_printf_i+0xee>
 800aeb4:	0641      	lsls	r1, r0, #25
 800aeb6:	d5fb      	bpl.n	800aeb0 <_printf_i+0xe4>
 800aeb8:	881e      	ldrh	r6, [r3, #0]
 800aeba:	4853      	ldr	r0, [pc, #332]	; (800b008 <_printf_i+0x23c>)
 800aebc:	2f6f      	cmp	r7, #111	; 0x6f
 800aebe:	bf0c      	ite	eq
 800aec0:	2308      	moveq	r3, #8
 800aec2:	230a      	movne	r3, #10
 800aec4:	2100      	movs	r1, #0
 800aec6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aeca:	6865      	ldr	r5, [r4, #4]
 800aecc:	60a5      	str	r5, [r4, #8]
 800aece:	2d00      	cmp	r5, #0
 800aed0:	bfa2      	ittt	ge
 800aed2:	6821      	ldrge	r1, [r4, #0]
 800aed4:	f021 0104 	bicge.w	r1, r1, #4
 800aed8:	6021      	strge	r1, [r4, #0]
 800aeda:	b90e      	cbnz	r6, 800aee0 <_printf_i+0x114>
 800aedc:	2d00      	cmp	r5, #0
 800aede:	d04b      	beq.n	800af78 <_printf_i+0x1ac>
 800aee0:	4615      	mov	r5, r2
 800aee2:	fbb6 f1f3 	udiv	r1, r6, r3
 800aee6:	fb03 6711 	mls	r7, r3, r1, r6
 800aeea:	5dc7      	ldrb	r7, [r0, r7]
 800aeec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aef0:	4637      	mov	r7, r6
 800aef2:	42bb      	cmp	r3, r7
 800aef4:	460e      	mov	r6, r1
 800aef6:	d9f4      	bls.n	800aee2 <_printf_i+0x116>
 800aef8:	2b08      	cmp	r3, #8
 800aefa:	d10b      	bne.n	800af14 <_printf_i+0x148>
 800aefc:	6823      	ldr	r3, [r4, #0]
 800aefe:	07de      	lsls	r6, r3, #31
 800af00:	d508      	bpl.n	800af14 <_printf_i+0x148>
 800af02:	6923      	ldr	r3, [r4, #16]
 800af04:	6861      	ldr	r1, [r4, #4]
 800af06:	4299      	cmp	r1, r3
 800af08:	bfde      	ittt	le
 800af0a:	2330      	movle	r3, #48	; 0x30
 800af0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800af14:	1b52      	subs	r2, r2, r5
 800af16:	6122      	str	r2, [r4, #16]
 800af18:	f8cd a000 	str.w	sl, [sp]
 800af1c:	464b      	mov	r3, r9
 800af1e:	aa03      	add	r2, sp, #12
 800af20:	4621      	mov	r1, r4
 800af22:	4640      	mov	r0, r8
 800af24:	f7ff fee4 	bl	800acf0 <_printf_common>
 800af28:	3001      	adds	r0, #1
 800af2a:	d14a      	bne.n	800afc2 <_printf_i+0x1f6>
 800af2c:	f04f 30ff 	mov.w	r0, #4294967295
 800af30:	b004      	add	sp, #16
 800af32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	f043 0320 	orr.w	r3, r3, #32
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	4833      	ldr	r0, [pc, #204]	; (800b00c <_printf_i+0x240>)
 800af40:	2778      	movs	r7, #120	; 0x78
 800af42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	6829      	ldr	r1, [r5, #0]
 800af4a:	061f      	lsls	r7, r3, #24
 800af4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800af50:	d402      	bmi.n	800af58 <_printf_i+0x18c>
 800af52:	065f      	lsls	r7, r3, #25
 800af54:	bf48      	it	mi
 800af56:	b2b6      	uxthmi	r6, r6
 800af58:	07df      	lsls	r7, r3, #31
 800af5a:	bf48      	it	mi
 800af5c:	f043 0320 	orrmi.w	r3, r3, #32
 800af60:	6029      	str	r1, [r5, #0]
 800af62:	bf48      	it	mi
 800af64:	6023      	strmi	r3, [r4, #0]
 800af66:	b91e      	cbnz	r6, 800af70 <_printf_i+0x1a4>
 800af68:	6823      	ldr	r3, [r4, #0]
 800af6a:	f023 0320 	bic.w	r3, r3, #32
 800af6e:	6023      	str	r3, [r4, #0]
 800af70:	2310      	movs	r3, #16
 800af72:	e7a7      	b.n	800aec4 <_printf_i+0xf8>
 800af74:	4824      	ldr	r0, [pc, #144]	; (800b008 <_printf_i+0x23c>)
 800af76:	e7e4      	b.n	800af42 <_printf_i+0x176>
 800af78:	4615      	mov	r5, r2
 800af7a:	e7bd      	b.n	800aef8 <_printf_i+0x12c>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	6826      	ldr	r6, [r4, #0]
 800af80:	6961      	ldr	r1, [r4, #20]
 800af82:	1d18      	adds	r0, r3, #4
 800af84:	6028      	str	r0, [r5, #0]
 800af86:	0635      	lsls	r5, r6, #24
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	d501      	bpl.n	800af90 <_printf_i+0x1c4>
 800af8c:	6019      	str	r1, [r3, #0]
 800af8e:	e002      	b.n	800af96 <_printf_i+0x1ca>
 800af90:	0670      	lsls	r0, r6, #25
 800af92:	d5fb      	bpl.n	800af8c <_printf_i+0x1c0>
 800af94:	8019      	strh	r1, [r3, #0]
 800af96:	2300      	movs	r3, #0
 800af98:	6123      	str	r3, [r4, #16]
 800af9a:	4615      	mov	r5, r2
 800af9c:	e7bc      	b.n	800af18 <_printf_i+0x14c>
 800af9e:	682b      	ldr	r3, [r5, #0]
 800afa0:	1d1a      	adds	r2, r3, #4
 800afa2:	602a      	str	r2, [r5, #0]
 800afa4:	681d      	ldr	r5, [r3, #0]
 800afa6:	6862      	ldr	r2, [r4, #4]
 800afa8:	2100      	movs	r1, #0
 800afaa:	4628      	mov	r0, r5
 800afac:	f7f5 f930 	bl	8000210 <memchr>
 800afb0:	b108      	cbz	r0, 800afb6 <_printf_i+0x1ea>
 800afb2:	1b40      	subs	r0, r0, r5
 800afb4:	6060      	str	r0, [r4, #4]
 800afb6:	6863      	ldr	r3, [r4, #4]
 800afb8:	6123      	str	r3, [r4, #16]
 800afba:	2300      	movs	r3, #0
 800afbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afc0:	e7aa      	b.n	800af18 <_printf_i+0x14c>
 800afc2:	6923      	ldr	r3, [r4, #16]
 800afc4:	462a      	mov	r2, r5
 800afc6:	4649      	mov	r1, r9
 800afc8:	4640      	mov	r0, r8
 800afca:	47d0      	blx	sl
 800afcc:	3001      	adds	r0, #1
 800afce:	d0ad      	beq.n	800af2c <_printf_i+0x160>
 800afd0:	6823      	ldr	r3, [r4, #0]
 800afd2:	079b      	lsls	r3, r3, #30
 800afd4:	d413      	bmi.n	800affe <_printf_i+0x232>
 800afd6:	68e0      	ldr	r0, [r4, #12]
 800afd8:	9b03      	ldr	r3, [sp, #12]
 800afda:	4298      	cmp	r0, r3
 800afdc:	bfb8      	it	lt
 800afde:	4618      	movlt	r0, r3
 800afe0:	e7a6      	b.n	800af30 <_printf_i+0x164>
 800afe2:	2301      	movs	r3, #1
 800afe4:	4632      	mov	r2, r6
 800afe6:	4649      	mov	r1, r9
 800afe8:	4640      	mov	r0, r8
 800afea:	47d0      	blx	sl
 800afec:	3001      	adds	r0, #1
 800afee:	d09d      	beq.n	800af2c <_printf_i+0x160>
 800aff0:	3501      	adds	r5, #1
 800aff2:	68e3      	ldr	r3, [r4, #12]
 800aff4:	9903      	ldr	r1, [sp, #12]
 800aff6:	1a5b      	subs	r3, r3, r1
 800aff8:	42ab      	cmp	r3, r5
 800affa:	dcf2      	bgt.n	800afe2 <_printf_i+0x216>
 800affc:	e7eb      	b.n	800afd6 <_printf_i+0x20a>
 800affe:	2500      	movs	r5, #0
 800b000:	f104 0619 	add.w	r6, r4, #25
 800b004:	e7f5      	b.n	800aff2 <_printf_i+0x226>
 800b006:	bf00      	nop
 800b008:	0800c19d 	.word	0x0800c19d
 800b00c:	0800c1ae 	.word	0x0800c1ae

0800b010 <memmove>:
 800b010:	4288      	cmp	r0, r1
 800b012:	b510      	push	{r4, lr}
 800b014:	eb01 0402 	add.w	r4, r1, r2
 800b018:	d902      	bls.n	800b020 <memmove+0x10>
 800b01a:	4284      	cmp	r4, r0
 800b01c:	4623      	mov	r3, r4
 800b01e:	d807      	bhi.n	800b030 <memmove+0x20>
 800b020:	1e43      	subs	r3, r0, #1
 800b022:	42a1      	cmp	r1, r4
 800b024:	d008      	beq.n	800b038 <memmove+0x28>
 800b026:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b02a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b02e:	e7f8      	b.n	800b022 <memmove+0x12>
 800b030:	4402      	add	r2, r0
 800b032:	4601      	mov	r1, r0
 800b034:	428a      	cmp	r2, r1
 800b036:	d100      	bne.n	800b03a <memmove+0x2a>
 800b038:	bd10      	pop	{r4, pc}
 800b03a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b03e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b042:	e7f7      	b.n	800b034 <memmove+0x24>

0800b044 <_sbrk_r>:
 800b044:	b538      	push	{r3, r4, r5, lr}
 800b046:	4d06      	ldr	r5, [pc, #24]	; (800b060 <_sbrk_r+0x1c>)
 800b048:	2300      	movs	r3, #0
 800b04a:	4604      	mov	r4, r0
 800b04c:	4608      	mov	r0, r1
 800b04e:	602b      	str	r3, [r5, #0]
 800b050:	f7f8 fd9a 	bl	8003b88 <_sbrk>
 800b054:	1c43      	adds	r3, r0, #1
 800b056:	d102      	bne.n	800b05e <_sbrk_r+0x1a>
 800b058:	682b      	ldr	r3, [r5, #0]
 800b05a:	b103      	cbz	r3, 800b05e <_sbrk_r+0x1a>
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	bd38      	pop	{r3, r4, r5, pc}
 800b060:	2000148c 	.word	0x2000148c

0800b064 <_realloc_r>:
 800b064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b068:	4680      	mov	r8, r0
 800b06a:	4614      	mov	r4, r2
 800b06c:	460e      	mov	r6, r1
 800b06e:	b921      	cbnz	r1, 800b07a <_realloc_r+0x16>
 800b070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b074:	4611      	mov	r1, r2
 800b076:	f7ff bc57 	b.w	800a928 <_malloc_r>
 800b07a:	b92a      	cbnz	r2, 800b088 <_realloc_r+0x24>
 800b07c:	f7ff fbe8 	bl	800a850 <_free_r>
 800b080:	4625      	mov	r5, r4
 800b082:	4628      	mov	r0, r5
 800b084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b088:	f000 f81b 	bl	800b0c2 <_malloc_usable_size_r>
 800b08c:	4284      	cmp	r4, r0
 800b08e:	4607      	mov	r7, r0
 800b090:	d802      	bhi.n	800b098 <_realloc_r+0x34>
 800b092:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b096:	d812      	bhi.n	800b0be <_realloc_r+0x5a>
 800b098:	4621      	mov	r1, r4
 800b09a:	4640      	mov	r0, r8
 800b09c:	f7ff fc44 	bl	800a928 <_malloc_r>
 800b0a0:	4605      	mov	r5, r0
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d0ed      	beq.n	800b082 <_realloc_r+0x1e>
 800b0a6:	42bc      	cmp	r4, r7
 800b0a8:	4622      	mov	r2, r4
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	bf28      	it	cs
 800b0ae:	463a      	movcs	r2, r7
 800b0b0:	f7ff fbc0 	bl	800a834 <memcpy>
 800b0b4:	4631      	mov	r1, r6
 800b0b6:	4640      	mov	r0, r8
 800b0b8:	f7ff fbca 	bl	800a850 <_free_r>
 800b0bc:	e7e1      	b.n	800b082 <_realloc_r+0x1e>
 800b0be:	4635      	mov	r5, r6
 800b0c0:	e7df      	b.n	800b082 <_realloc_r+0x1e>

0800b0c2 <_malloc_usable_size_r>:
 800b0c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0c6:	1f18      	subs	r0, r3, #4
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	bfbc      	itt	lt
 800b0cc:	580b      	ldrlt	r3, [r1, r0]
 800b0ce:	18c0      	addlt	r0, r0, r3
 800b0d0:	4770      	bx	lr
	...

0800b0d4 <pow>:
 800b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d6:	ed2d 8b02 	vpush	{d8}
 800b0da:	eeb0 8a40 	vmov.f32	s16, s0
 800b0de:	eef0 8a60 	vmov.f32	s17, s1
 800b0e2:	ec55 4b11 	vmov	r4, r5, d1
 800b0e6:	f000 f9b3 	bl	800b450 <__ieee754_pow>
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	462b      	mov	r3, r5
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	4629      	mov	r1, r5
 800b0f2:	ec57 6b10 	vmov	r6, r7, d0
 800b0f6:	f7f5 fd31 	bl	8000b5c <__aeabi_dcmpun>
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	d13b      	bne.n	800b176 <pow+0xa2>
 800b0fe:	ec51 0b18 	vmov	r0, r1, d8
 800b102:	2200      	movs	r2, #0
 800b104:	2300      	movs	r3, #0
 800b106:	f7f5 fcf7 	bl	8000af8 <__aeabi_dcmpeq>
 800b10a:	b1b8      	cbz	r0, 800b13c <pow+0x68>
 800b10c:	2200      	movs	r2, #0
 800b10e:	2300      	movs	r3, #0
 800b110:	4620      	mov	r0, r4
 800b112:	4629      	mov	r1, r5
 800b114:	f7f5 fcf0 	bl	8000af8 <__aeabi_dcmpeq>
 800b118:	2800      	cmp	r0, #0
 800b11a:	d146      	bne.n	800b1aa <pow+0xd6>
 800b11c:	ec45 4b10 	vmov	d0, r4, r5
 800b120:	f000 f874 	bl	800b20c <finite>
 800b124:	b338      	cbz	r0, 800b176 <pow+0xa2>
 800b126:	2200      	movs	r2, #0
 800b128:	2300      	movs	r3, #0
 800b12a:	4620      	mov	r0, r4
 800b12c:	4629      	mov	r1, r5
 800b12e:	f7f5 fced 	bl	8000b0c <__aeabi_dcmplt>
 800b132:	b300      	cbz	r0, 800b176 <pow+0xa2>
 800b134:	f7ff fb52 	bl	800a7dc <__errno>
 800b138:	2322      	movs	r3, #34	; 0x22
 800b13a:	e01b      	b.n	800b174 <pow+0xa0>
 800b13c:	ec47 6b10 	vmov	d0, r6, r7
 800b140:	f000 f864 	bl	800b20c <finite>
 800b144:	b9e0      	cbnz	r0, 800b180 <pow+0xac>
 800b146:	eeb0 0a48 	vmov.f32	s0, s16
 800b14a:	eef0 0a68 	vmov.f32	s1, s17
 800b14e:	f000 f85d 	bl	800b20c <finite>
 800b152:	b1a8      	cbz	r0, 800b180 <pow+0xac>
 800b154:	ec45 4b10 	vmov	d0, r4, r5
 800b158:	f000 f858 	bl	800b20c <finite>
 800b15c:	b180      	cbz	r0, 800b180 <pow+0xac>
 800b15e:	4632      	mov	r2, r6
 800b160:	463b      	mov	r3, r7
 800b162:	4630      	mov	r0, r6
 800b164:	4639      	mov	r1, r7
 800b166:	f7f5 fcf9 	bl	8000b5c <__aeabi_dcmpun>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d0e2      	beq.n	800b134 <pow+0x60>
 800b16e:	f7ff fb35 	bl	800a7dc <__errno>
 800b172:	2321      	movs	r3, #33	; 0x21
 800b174:	6003      	str	r3, [r0, #0]
 800b176:	ecbd 8b02 	vpop	{d8}
 800b17a:	ec47 6b10 	vmov	d0, r6, r7
 800b17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b180:	2200      	movs	r2, #0
 800b182:	2300      	movs	r3, #0
 800b184:	4630      	mov	r0, r6
 800b186:	4639      	mov	r1, r7
 800b188:	f7f5 fcb6 	bl	8000af8 <__aeabi_dcmpeq>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d0f2      	beq.n	800b176 <pow+0xa2>
 800b190:	eeb0 0a48 	vmov.f32	s0, s16
 800b194:	eef0 0a68 	vmov.f32	s1, s17
 800b198:	f000 f838 	bl	800b20c <finite>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d0ea      	beq.n	800b176 <pow+0xa2>
 800b1a0:	ec45 4b10 	vmov	d0, r4, r5
 800b1a4:	f000 f832 	bl	800b20c <finite>
 800b1a8:	e7c3      	b.n	800b132 <pow+0x5e>
 800b1aa:	4f01      	ldr	r7, [pc, #4]	; (800b1b0 <pow+0xdc>)
 800b1ac:	2600      	movs	r6, #0
 800b1ae:	e7e2      	b.n	800b176 <pow+0xa2>
 800b1b0:	3ff00000 	.word	0x3ff00000

0800b1b4 <sqrt>:
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	ed2d 8b02 	vpush	{d8}
 800b1ba:	ec55 4b10 	vmov	r4, r5, d0
 800b1be:	f000 f831 	bl	800b224 <__ieee754_sqrt>
 800b1c2:	4622      	mov	r2, r4
 800b1c4:	462b      	mov	r3, r5
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	eeb0 8a40 	vmov.f32	s16, s0
 800b1ce:	eef0 8a60 	vmov.f32	s17, s1
 800b1d2:	f7f5 fcc3 	bl	8000b5c <__aeabi_dcmpun>
 800b1d6:	b990      	cbnz	r0, 800b1fe <sqrt+0x4a>
 800b1d8:	2200      	movs	r2, #0
 800b1da:	2300      	movs	r3, #0
 800b1dc:	4620      	mov	r0, r4
 800b1de:	4629      	mov	r1, r5
 800b1e0:	f7f5 fc94 	bl	8000b0c <__aeabi_dcmplt>
 800b1e4:	b158      	cbz	r0, 800b1fe <sqrt+0x4a>
 800b1e6:	f7ff faf9 	bl	800a7dc <__errno>
 800b1ea:	2321      	movs	r3, #33	; 0x21
 800b1ec:	6003      	str	r3, [r0, #0]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	f7f5 fb41 	bl	800087c <__aeabi_ddiv>
 800b1fa:	ec41 0b18 	vmov	d8, r0, r1
 800b1fe:	eeb0 0a48 	vmov.f32	s0, s16
 800b202:	eef0 0a68 	vmov.f32	s1, s17
 800b206:	ecbd 8b02 	vpop	{d8}
 800b20a:	bd38      	pop	{r3, r4, r5, pc}

0800b20c <finite>:
 800b20c:	b082      	sub	sp, #8
 800b20e:	ed8d 0b00 	vstr	d0, [sp]
 800b212:	9801      	ldr	r0, [sp, #4]
 800b214:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b218:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b21c:	0fc0      	lsrs	r0, r0, #31
 800b21e:	b002      	add	sp, #8
 800b220:	4770      	bx	lr
	...

0800b224 <__ieee754_sqrt>:
 800b224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b228:	ec55 4b10 	vmov	r4, r5, d0
 800b22c:	4e67      	ldr	r6, [pc, #412]	; (800b3cc <__ieee754_sqrt+0x1a8>)
 800b22e:	43ae      	bics	r6, r5
 800b230:	ee10 0a10 	vmov	r0, s0
 800b234:	ee10 2a10 	vmov	r2, s0
 800b238:	4629      	mov	r1, r5
 800b23a:	462b      	mov	r3, r5
 800b23c:	d10d      	bne.n	800b25a <__ieee754_sqrt+0x36>
 800b23e:	f7f5 f9f3 	bl	8000628 <__aeabi_dmul>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	4620      	mov	r0, r4
 800b248:	4629      	mov	r1, r5
 800b24a:	f7f5 f837 	bl	80002bc <__adddf3>
 800b24e:	4604      	mov	r4, r0
 800b250:	460d      	mov	r5, r1
 800b252:	ec45 4b10 	vmov	d0, r4, r5
 800b256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25a:	2d00      	cmp	r5, #0
 800b25c:	dc0b      	bgt.n	800b276 <__ieee754_sqrt+0x52>
 800b25e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b262:	4326      	orrs	r6, r4
 800b264:	d0f5      	beq.n	800b252 <__ieee754_sqrt+0x2e>
 800b266:	b135      	cbz	r5, 800b276 <__ieee754_sqrt+0x52>
 800b268:	f7f5 f826 	bl	80002b8 <__aeabi_dsub>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	f7f5 fb04 	bl	800087c <__aeabi_ddiv>
 800b274:	e7eb      	b.n	800b24e <__ieee754_sqrt+0x2a>
 800b276:	1509      	asrs	r1, r1, #20
 800b278:	f000 808d 	beq.w	800b396 <__ieee754_sqrt+0x172>
 800b27c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b280:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b288:	07c9      	lsls	r1, r1, #31
 800b28a:	bf5c      	itt	pl
 800b28c:	005b      	lslpl	r3, r3, #1
 800b28e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b292:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b296:	bf58      	it	pl
 800b298:	0052      	lslpl	r2, r2, #1
 800b29a:	2500      	movs	r5, #0
 800b29c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b2a0:	1076      	asrs	r6, r6, #1
 800b2a2:	0052      	lsls	r2, r2, #1
 800b2a4:	f04f 0e16 	mov.w	lr, #22
 800b2a8:	46ac      	mov	ip, r5
 800b2aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b2ae:	eb0c 0001 	add.w	r0, ip, r1
 800b2b2:	4298      	cmp	r0, r3
 800b2b4:	bfde      	ittt	le
 800b2b6:	1a1b      	suble	r3, r3, r0
 800b2b8:	eb00 0c01 	addle.w	ip, r0, r1
 800b2bc:	186d      	addle	r5, r5, r1
 800b2be:	005b      	lsls	r3, r3, #1
 800b2c0:	f1be 0e01 	subs.w	lr, lr, #1
 800b2c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b2c8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b2cc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b2d0:	d1ed      	bne.n	800b2ae <__ieee754_sqrt+0x8a>
 800b2d2:	4674      	mov	r4, lr
 800b2d4:	2720      	movs	r7, #32
 800b2d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b2da:	4563      	cmp	r3, ip
 800b2dc:	eb01 000e 	add.w	r0, r1, lr
 800b2e0:	dc02      	bgt.n	800b2e8 <__ieee754_sqrt+0xc4>
 800b2e2:	d113      	bne.n	800b30c <__ieee754_sqrt+0xe8>
 800b2e4:	4290      	cmp	r0, r2
 800b2e6:	d811      	bhi.n	800b30c <__ieee754_sqrt+0xe8>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	eb00 0e01 	add.w	lr, r0, r1
 800b2ee:	da57      	bge.n	800b3a0 <__ieee754_sqrt+0x17c>
 800b2f0:	f1be 0f00 	cmp.w	lr, #0
 800b2f4:	db54      	blt.n	800b3a0 <__ieee754_sqrt+0x17c>
 800b2f6:	f10c 0801 	add.w	r8, ip, #1
 800b2fa:	eba3 030c 	sub.w	r3, r3, ip
 800b2fe:	4290      	cmp	r0, r2
 800b300:	bf88      	it	hi
 800b302:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b306:	1a12      	subs	r2, r2, r0
 800b308:	440c      	add	r4, r1
 800b30a:	46c4      	mov	ip, r8
 800b30c:	005b      	lsls	r3, r3, #1
 800b30e:	3f01      	subs	r7, #1
 800b310:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b314:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b318:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b31c:	d1dd      	bne.n	800b2da <__ieee754_sqrt+0xb6>
 800b31e:	4313      	orrs	r3, r2
 800b320:	d01b      	beq.n	800b35a <__ieee754_sqrt+0x136>
 800b322:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b3d0 <__ieee754_sqrt+0x1ac>
 800b326:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b3d4 <__ieee754_sqrt+0x1b0>
 800b32a:	e9da 0100 	ldrd	r0, r1, [sl]
 800b32e:	e9db 2300 	ldrd	r2, r3, [fp]
 800b332:	f7f4 ffc1 	bl	80002b8 <__aeabi_dsub>
 800b336:	e9da 8900 	ldrd	r8, r9, [sl]
 800b33a:	4602      	mov	r2, r0
 800b33c:	460b      	mov	r3, r1
 800b33e:	4640      	mov	r0, r8
 800b340:	4649      	mov	r1, r9
 800b342:	f7f5 fbed 	bl	8000b20 <__aeabi_dcmple>
 800b346:	b140      	cbz	r0, 800b35a <__ieee754_sqrt+0x136>
 800b348:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b34c:	e9da 0100 	ldrd	r0, r1, [sl]
 800b350:	e9db 2300 	ldrd	r2, r3, [fp]
 800b354:	d126      	bne.n	800b3a4 <__ieee754_sqrt+0x180>
 800b356:	3501      	adds	r5, #1
 800b358:	463c      	mov	r4, r7
 800b35a:	106a      	asrs	r2, r5, #1
 800b35c:	0863      	lsrs	r3, r4, #1
 800b35e:	07e9      	lsls	r1, r5, #31
 800b360:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b364:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b368:	bf48      	it	mi
 800b36a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b36e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b372:	461c      	mov	r4, r3
 800b374:	e76d      	b.n	800b252 <__ieee754_sqrt+0x2e>
 800b376:	0ad3      	lsrs	r3, r2, #11
 800b378:	3815      	subs	r0, #21
 800b37a:	0552      	lsls	r2, r2, #21
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d0fa      	beq.n	800b376 <__ieee754_sqrt+0x152>
 800b380:	02dc      	lsls	r4, r3, #11
 800b382:	d50a      	bpl.n	800b39a <__ieee754_sqrt+0x176>
 800b384:	f1c1 0420 	rsb	r4, r1, #32
 800b388:	fa22 f404 	lsr.w	r4, r2, r4
 800b38c:	1e4d      	subs	r5, r1, #1
 800b38e:	408a      	lsls	r2, r1
 800b390:	4323      	orrs	r3, r4
 800b392:	1b41      	subs	r1, r0, r5
 800b394:	e772      	b.n	800b27c <__ieee754_sqrt+0x58>
 800b396:	4608      	mov	r0, r1
 800b398:	e7f0      	b.n	800b37c <__ieee754_sqrt+0x158>
 800b39a:	005b      	lsls	r3, r3, #1
 800b39c:	3101      	adds	r1, #1
 800b39e:	e7ef      	b.n	800b380 <__ieee754_sqrt+0x15c>
 800b3a0:	46e0      	mov	r8, ip
 800b3a2:	e7aa      	b.n	800b2fa <__ieee754_sqrt+0xd6>
 800b3a4:	f7f4 ff8a 	bl	80002bc <__adddf3>
 800b3a8:	e9da 8900 	ldrd	r8, r9, [sl]
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	f7f5 fbaa 	bl	8000b0c <__aeabi_dcmplt>
 800b3b8:	b120      	cbz	r0, 800b3c4 <__ieee754_sqrt+0x1a0>
 800b3ba:	1ca0      	adds	r0, r4, #2
 800b3bc:	bf08      	it	eq
 800b3be:	3501      	addeq	r5, #1
 800b3c0:	3402      	adds	r4, #2
 800b3c2:	e7ca      	b.n	800b35a <__ieee754_sqrt+0x136>
 800b3c4:	3401      	adds	r4, #1
 800b3c6:	f024 0401 	bic.w	r4, r4, #1
 800b3ca:	e7c6      	b.n	800b35a <__ieee754_sqrt+0x136>
 800b3cc:	7ff00000 	.word	0x7ff00000
 800b3d0:	20000098 	.word	0x20000098
 800b3d4:	200000a0 	.word	0x200000a0

0800b3d8 <trunc>:
 800b3d8:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800b3dc:	ec5c bb10 	vmov	fp, ip, d0
 800b3e0:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800b3e4:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800b3e8:	2913      	cmp	r1, #19
 800b3ea:	4664      	mov	r4, ip
 800b3ec:	dc11      	bgt.n	800b412 <trunc+0x3a>
 800b3ee:	2900      	cmp	r1, #0
 800b3f0:	bfa7      	ittee	ge
 800b3f2:	4b15      	ldrge	r3, [pc, #84]	; (800b448 <trunc+0x70>)
 800b3f4:	fa43 f101 	asrge.w	r1, r3, r1
 800b3f8:	2200      	movlt	r2, #0
 800b3fa:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800b3fe:	bfa4      	itt	ge
 800b400:	2200      	movge	r2, #0
 800b402:	ea01 030c 	andge.w	r3, r1, ip
 800b406:	4693      	mov	fp, r2
 800b408:	469c      	mov	ip, r3
 800b40a:	ec4c bb10 	vmov	d0, fp, ip
 800b40e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800b412:	2933      	cmp	r1, #51	; 0x33
 800b414:	dd0d      	ble.n	800b432 <trunc+0x5a>
 800b416:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b41a:	d1f6      	bne.n	800b40a <trunc+0x32>
 800b41c:	4663      	mov	r3, ip
 800b41e:	ee10 2a10 	vmov	r2, s0
 800b422:	ee10 0a10 	vmov	r0, s0
 800b426:	4621      	mov	r1, r4
 800b428:	f7f4 ff48 	bl	80002bc <__adddf3>
 800b42c:	4683      	mov	fp, r0
 800b42e:	468c      	mov	ip, r1
 800b430:	e7eb      	b.n	800b40a <trunc+0x32>
 800b432:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800b436:	f04f 33ff 	mov.w	r3, #4294967295
 800b43a:	40c3      	lsrs	r3, r0
 800b43c:	ea2b 0603 	bic.w	r6, fp, r3
 800b440:	46b3      	mov	fp, r6
 800b442:	46a4      	mov	ip, r4
 800b444:	e7e1      	b.n	800b40a <trunc+0x32>
 800b446:	bf00      	nop
 800b448:	fff00000 	.word	0xfff00000
 800b44c:	00000000 	.word	0x00000000

0800b450 <__ieee754_pow>:
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	ed2d 8b06 	vpush	{d8-d10}
 800b458:	b089      	sub	sp, #36	; 0x24
 800b45a:	ed8d 1b00 	vstr	d1, [sp]
 800b45e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b462:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b466:	ea58 0102 	orrs.w	r1, r8, r2
 800b46a:	ec57 6b10 	vmov	r6, r7, d0
 800b46e:	d115      	bne.n	800b49c <__ieee754_pow+0x4c>
 800b470:	19b3      	adds	r3, r6, r6
 800b472:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b476:	4152      	adcs	r2, r2
 800b478:	4299      	cmp	r1, r3
 800b47a:	4b89      	ldr	r3, [pc, #548]	; (800b6a0 <__ieee754_pow+0x250>)
 800b47c:	4193      	sbcs	r3, r2
 800b47e:	f080 84d1 	bcs.w	800be24 <__ieee754_pow+0x9d4>
 800b482:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b486:	4630      	mov	r0, r6
 800b488:	4639      	mov	r1, r7
 800b48a:	f7f4 ff17 	bl	80002bc <__adddf3>
 800b48e:	ec41 0b10 	vmov	d0, r0, r1
 800b492:	b009      	add	sp, #36	; 0x24
 800b494:	ecbd 8b06 	vpop	{d8-d10}
 800b498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b49c:	4b81      	ldr	r3, [pc, #516]	; (800b6a4 <__ieee754_pow+0x254>)
 800b49e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b4a2:	429c      	cmp	r4, r3
 800b4a4:	ee10 aa10 	vmov	sl, s0
 800b4a8:	463d      	mov	r5, r7
 800b4aa:	dc06      	bgt.n	800b4ba <__ieee754_pow+0x6a>
 800b4ac:	d101      	bne.n	800b4b2 <__ieee754_pow+0x62>
 800b4ae:	2e00      	cmp	r6, #0
 800b4b0:	d1e7      	bne.n	800b482 <__ieee754_pow+0x32>
 800b4b2:	4598      	cmp	r8, r3
 800b4b4:	dc01      	bgt.n	800b4ba <__ieee754_pow+0x6a>
 800b4b6:	d10f      	bne.n	800b4d8 <__ieee754_pow+0x88>
 800b4b8:	b172      	cbz	r2, 800b4d8 <__ieee754_pow+0x88>
 800b4ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b4be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b4c2:	ea55 050a 	orrs.w	r5, r5, sl
 800b4c6:	d1dc      	bne.n	800b482 <__ieee754_pow+0x32>
 800b4c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b4cc:	18db      	adds	r3, r3, r3
 800b4ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b4d2:	4152      	adcs	r2, r2
 800b4d4:	429d      	cmp	r5, r3
 800b4d6:	e7d0      	b.n	800b47a <__ieee754_pow+0x2a>
 800b4d8:	2d00      	cmp	r5, #0
 800b4da:	da3b      	bge.n	800b554 <__ieee754_pow+0x104>
 800b4dc:	4b72      	ldr	r3, [pc, #456]	; (800b6a8 <__ieee754_pow+0x258>)
 800b4de:	4598      	cmp	r8, r3
 800b4e0:	dc51      	bgt.n	800b586 <__ieee754_pow+0x136>
 800b4e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b4e6:	4598      	cmp	r8, r3
 800b4e8:	f340 84ab 	ble.w	800be42 <__ieee754_pow+0x9f2>
 800b4ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b4f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b4f4:	2b14      	cmp	r3, #20
 800b4f6:	dd0f      	ble.n	800b518 <__ieee754_pow+0xc8>
 800b4f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b4fc:	fa22 f103 	lsr.w	r1, r2, r3
 800b500:	fa01 f303 	lsl.w	r3, r1, r3
 800b504:	4293      	cmp	r3, r2
 800b506:	f040 849c 	bne.w	800be42 <__ieee754_pow+0x9f2>
 800b50a:	f001 0101 	and.w	r1, r1, #1
 800b50e:	f1c1 0302 	rsb	r3, r1, #2
 800b512:	9304      	str	r3, [sp, #16]
 800b514:	b182      	cbz	r2, 800b538 <__ieee754_pow+0xe8>
 800b516:	e05f      	b.n	800b5d8 <__ieee754_pow+0x188>
 800b518:	2a00      	cmp	r2, #0
 800b51a:	d15b      	bne.n	800b5d4 <__ieee754_pow+0x184>
 800b51c:	f1c3 0314 	rsb	r3, r3, #20
 800b520:	fa48 f103 	asr.w	r1, r8, r3
 800b524:	fa01 f303 	lsl.w	r3, r1, r3
 800b528:	4543      	cmp	r3, r8
 800b52a:	f040 8487 	bne.w	800be3c <__ieee754_pow+0x9ec>
 800b52e:	f001 0101 	and.w	r1, r1, #1
 800b532:	f1c1 0302 	rsb	r3, r1, #2
 800b536:	9304      	str	r3, [sp, #16]
 800b538:	4b5c      	ldr	r3, [pc, #368]	; (800b6ac <__ieee754_pow+0x25c>)
 800b53a:	4598      	cmp	r8, r3
 800b53c:	d132      	bne.n	800b5a4 <__ieee754_pow+0x154>
 800b53e:	f1b9 0f00 	cmp.w	r9, #0
 800b542:	f280 8477 	bge.w	800be34 <__ieee754_pow+0x9e4>
 800b546:	4959      	ldr	r1, [pc, #356]	; (800b6ac <__ieee754_pow+0x25c>)
 800b548:	4632      	mov	r2, r6
 800b54a:	463b      	mov	r3, r7
 800b54c:	2000      	movs	r0, #0
 800b54e:	f7f5 f995 	bl	800087c <__aeabi_ddiv>
 800b552:	e79c      	b.n	800b48e <__ieee754_pow+0x3e>
 800b554:	2300      	movs	r3, #0
 800b556:	9304      	str	r3, [sp, #16]
 800b558:	2a00      	cmp	r2, #0
 800b55a:	d13d      	bne.n	800b5d8 <__ieee754_pow+0x188>
 800b55c:	4b51      	ldr	r3, [pc, #324]	; (800b6a4 <__ieee754_pow+0x254>)
 800b55e:	4598      	cmp	r8, r3
 800b560:	d1ea      	bne.n	800b538 <__ieee754_pow+0xe8>
 800b562:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b566:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b56a:	ea53 030a 	orrs.w	r3, r3, sl
 800b56e:	f000 8459 	beq.w	800be24 <__ieee754_pow+0x9d4>
 800b572:	4b4f      	ldr	r3, [pc, #316]	; (800b6b0 <__ieee754_pow+0x260>)
 800b574:	429c      	cmp	r4, r3
 800b576:	dd08      	ble.n	800b58a <__ieee754_pow+0x13a>
 800b578:	f1b9 0f00 	cmp.w	r9, #0
 800b57c:	f2c0 8456 	blt.w	800be2c <__ieee754_pow+0x9dc>
 800b580:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b584:	e783      	b.n	800b48e <__ieee754_pow+0x3e>
 800b586:	2302      	movs	r3, #2
 800b588:	e7e5      	b.n	800b556 <__ieee754_pow+0x106>
 800b58a:	f1b9 0f00 	cmp.w	r9, #0
 800b58e:	f04f 0000 	mov.w	r0, #0
 800b592:	f04f 0100 	mov.w	r1, #0
 800b596:	f6bf af7a 	bge.w	800b48e <__ieee754_pow+0x3e>
 800b59a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b59e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b5a2:	e774      	b.n	800b48e <__ieee754_pow+0x3e>
 800b5a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b5a8:	d106      	bne.n	800b5b8 <__ieee754_pow+0x168>
 800b5aa:	4632      	mov	r2, r6
 800b5ac:	463b      	mov	r3, r7
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	4639      	mov	r1, r7
 800b5b2:	f7f5 f839 	bl	8000628 <__aeabi_dmul>
 800b5b6:	e76a      	b.n	800b48e <__ieee754_pow+0x3e>
 800b5b8:	4b3e      	ldr	r3, [pc, #248]	; (800b6b4 <__ieee754_pow+0x264>)
 800b5ba:	4599      	cmp	r9, r3
 800b5bc:	d10c      	bne.n	800b5d8 <__ieee754_pow+0x188>
 800b5be:	2d00      	cmp	r5, #0
 800b5c0:	db0a      	blt.n	800b5d8 <__ieee754_pow+0x188>
 800b5c2:	ec47 6b10 	vmov	d0, r6, r7
 800b5c6:	b009      	add	sp, #36	; 0x24
 800b5c8:	ecbd 8b06 	vpop	{d8-d10}
 800b5cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	f7ff be28 	b.w	800b224 <__ieee754_sqrt>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	9304      	str	r3, [sp, #16]
 800b5d8:	ec47 6b10 	vmov	d0, r6, r7
 800b5dc:	f000 fc62 	bl	800bea4 <fabs>
 800b5e0:	ec51 0b10 	vmov	r0, r1, d0
 800b5e4:	f1ba 0f00 	cmp.w	sl, #0
 800b5e8:	d129      	bne.n	800b63e <__ieee754_pow+0x1ee>
 800b5ea:	b124      	cbz	r4, 800b5f6 <__ieee754_pow+0x1a6>
 800b5ec:	4b2f      	ldr	r3, [pc, #188]	; (800b6ac <__ieee754_pow+0x25c>)
 800b5ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d123      	bne.n	800b63e <__ieee754_pow+0x1ee>
 800b5f6:	f1b9 0f00 	cmp.w	r9, #0
 800b5fa:	da05      	bge.n	800b608 <__ieee754_pow+0x1b8>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	2000      	movs	r0, #0
 800b602:	492a      	ldr	r1, [pc, #168]	; (800b6ac <__ieee754_pow+0x25c>)
 800b604:	f7f5 f93a 	bl	800087c <__aeabi_ddiv>
 800b608:	2d00      	cmp	r5, #0
 800b60a:	f6bf af40 	bge.w	800b48e <__ieee754_pow+0x3e>
 800b60e:	9b04      	ldr	r3, [sp, #16]
 800b610:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b614:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b618:	431c      	orrs	r4, r3
 800b61a:	d108      	bne.n	800b62e <__ieee754_pow+0x1de>
 800b61c:	4602      	mov	r2, r0
 800b61e:	460b      	mov	r3, r1
 800b620:	4610      	mov	r0, r2
 800b622:	4619      	mov	r1, r3
 800b624:	f7f4 fe48 	bl	80002b8 <__aeabi_dsub>
 800b628:	4602      	mov	r2, r0
 800b62a:	460b      	mov	r3, r1
 800b62c:	e78f      	b.n	800b54e <__ieee754_pow+0xfe>
 800b62e:	9b04      	ldr	r3, [sp, #16]
 800b630:	2b01      	cmp	r3, #1
 800b632:	f47f af2c 	bne.w	800b48e <__ieee754_pow+0x3e>
 800b636:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b63a:	4619      	mov	r1, r3
 800b63c:	e727      	b.n	800b48e <__ieee754_pow+0x3e>
 800b63e:	0feb      	lsrs	r3, r5, #31
 800b640:	3b01      	subs	r3, #1
 800b642:	9306      	str	r3, [sp, #24]
 800b644:	9a06      	ldr	r2, [sp, #24]
 800b646:	9b04      	ldr	r3, [sp, #16]
 800b648:	4313      	orrs	r3, r2
 800b64a:	d102      	bne.n	800b652 <__ieee754_pow+0x202>
 800b64c:	4632      	mov	r2, r6
 800b64e:	463b      	mov	r3, r7
 800b650:	e7e6      	b.n	800b620 <__ieee754_pow+0x1d0>
 800b652:	4b19      	ldr	r3, [pc, #100]	; (800b6b8 <__ieee754_pow+0x268>)
 800b654:	4598      	cmp	r8, r3
 800b656:	f340 80fb 	ble.w	800b850 <__ieee754_pow+0x400>
 800b65a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b65e:	4598      	cmp	r8, r3
 800b660:	4b13      	ldr	r3, [pc, #76]	; (800b6b0 <__ieee754_pow+0x260>)
 800b662:	dd0c      	ble.n	800b67e <__ieee754_pow+0x22e>
 800b664:	429c      	cmp	r4, r3
 800b666:	dc0f      	bgt.n	800b688 <__ieee754_pow+0x238>
 800b668:	f1b9 0f00 	cmp.w	r9, #0
 800b66c:	da0f      	bge.n	800b68e <__ieee754_pow+0x23e>
 800b66e:	2000      	movs	r0, #0
 800b670:	b009      	add	sp, #36	; 0x24
 800b672:	ecbd 8b06 	vpop	{d8-d10}
 800b676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67a:	f000 bcc2 	b.w	800c002 <__math_oflow>
 800b67e:	429c      	cmp	r4, r3
 800b680:	dbf2      	blt.n	800b668 <__ieee754_pow+0x218>
 800b682:	4b0a      	ldr	r3, [pc, #40]	; (800b6ac <__ieee754_pow+0x25c>)
 800b684:	429c      	cmp	r4, r3
 800b686:	dd19      	ble.n	800b6bc <__ieee754_pow+0x26c>
 800b688:	f1b9 0f00 	cmp.w	r9, #0
 800b68c:	dcef      	bgt.n	800b66e <__ieee754_pow+0x21e>
 800b68e:	2000      	movs	r0, #0
 800b690:	b009      	add	sp, #36	; 0x24
 800b692:	ecbd 8b06 	vpop	{d8-d10}
 800b696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69a:	f000 bca9 	b.w	800bff0 <__math_uflow>
 800b69e:	bf00      	nop
 800b6a0:	fff00000 	.word	0xfff00000
 800b6a4:	7ff00000 	.word	0x7ff00000
 800b6a8:	433fffff 	.word	0x433fffff
 800b6ac:	3ff00000 	.word	0x3ff00000
 800b6b0:	3fefffff 	.word	0x3fefffff
 800b6b4:	3fe00000 	.word	0x3fe00000
 800b6b8:	41e00000 	.word	0x41e00000
 800b6bc:	4b60      	ldr	r3, [pc, #384]	; (800b840 <__ieee754_pow+0x3f0>)
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f7f4 fdfa 	bl	80002b8 <__aeabi_dsub>
 800b6c4:	a354      	add	r3, pc, #336	; (adr r3, 800b818 <__ieee754_pow+0x3c8>)
 800b6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	460d      	mov	r5, r1
 800b6ce:	f7f4 ffab 	bl	8000628 <__aeabi_dmul>
 800b6d2:	a353      	add	r3, pc, #332	; (adr r3, 800b820 <__ieee754_pow+0x3d0>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	4606      	mov	r6, r0
 800b6da:	460f      	mov	r7, r1
 800b6dc:	4620      	mov	r0, r4
 800b6de:	4629      	mov	r1, r5
 800b6e0:	f7f4 ffa2 	bl	8000628 <__aeabi_dmul>
 800b6e4:	4b57      	ldr	r3, [pc, #348]	; (800b844 <__ieee754_pow+0x3f4>)
 800b6e6:	4682      	mov	sl, r0
 800b6e8:	468b      	mov	fp, r1
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f7f4 ff9a 	bl	8000628 <__aeabi_dmul>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	a14b      	add	r1, pc, #300	; (adr r1, 800b828 <__ieee754_pow+0x3d8>)
 800b6fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6fe:	f7f4 fddb 	bl	80002b8 <__aeabi_dsub>
 800b702:	4622      	mov	r2, r4
 800b704:	462b      	mov	r3, r5
 800b706:	f7f4 ff8f 	bl	8000628 <__aeabi_dmul>
 800b70a:	4602      	mov	r2, r0
 800b70c:	460b      	mov	r3, r1
 800b70e:	2000      	movs	r0, #0
 800b710:	494d      	ldr	r1, [pc, #308]	; (800b848 <__ieee754_pow+0x3f8>)
 800b712:	f7f4 fdd1 	bl	80002b8 <__aeabi_dsub>
 800b716:	4622      	mov	r2, r4
 800b718:	4680      	mov	r8, r0
 800b71a:	4689      	mov	r9, r1
 800b71c:	462b      	mov	r3, r5
 800b71e:	4620      	mov	r0, r4
 800b720:	4629      	mov	r1, r5
 800b722:	f7f4 ff81 	bl	8000628 <__aeabi_dmul>
 800b726:	4602      	mov	r2, r0
 800b728:	460b      	mov	r3, r1
 800b72a:	4640      	mov	r0, r8
 800b72c:	4649      	mov	r1, r9
 800b72e:	f7f4 ff7b 	bl	8000628 <__aeabi_dmul>
 800b732:	a33f      	add	r3, pc, #252	; (adr r3, 800b830 <__ieee754_pow+0x3e0>)
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	f7f4 ff76 	bl	8000628 <__aeabi_dmul>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	4650      	mov	r0, sl
 800b742:	4659      	mov	r1, fp
 800b744:	f7f4 fdb8 	bl	80002b8 <__aeabi_dsub>
 800b748:	4602      	mov	r2, r0
 800b74a:	460b      	mov	r3, r1
 800b74c:	4680      	mov	r8, r0
 800b74e:	4689      	mov	r9, r1
 800b750:	4630      	mov	r0, r6
 800b752:	4639      	mov	r1, r7
 800b754:	f7f4 fdb2 	bl	80002bc <__adddf3>
 800b758:	2000      	movs	r0, #0
 800b75a:	4632      	mov	r2, r6
 800b75c:	463b      	mov	r3, r7
 800b75e:	4604      	mov	r4, r0
 800b760:	460d      	mov	r5, r1
 800b762:	f7f4 fda9 	bl	80002b8 <__aeabi_dsub>
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	4640      	mov	r0, r8
 800b76c:	4649      	mov	r1, r9
 800b76e:	f7f4 fda3 	bl	80002b8 <__aeabi_dsub>
 800b772:	9b04      	ldr	r3, [sp, #16]
 800b774:	9a06      	ldr	r2, [sp, #24]
 800b776:	3b01      	subs	r3, #1
 800b778:	4313      	orrs	r3, r2
 800b77a:	4682      	mov	sl, r0
 800b77c:	468b      	mov	fp, r1
 800b77e:	f040 81e7 	bne.w	800bb50 <__ieee754_pow+0x700>
 800b782:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b838 <__ieee754_pow+0x3e8>
 800b786:	eeb0 8a47 	vmov.f32	s16, s14
 800b78a:	eef0 8a67 	vmov.f32	s17, s15
 800b78e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b792:	2600      	movs	r6, #0
 800b794:	4632      	mov	r2, r6
 800b796:	463b      	mov	r3, r7
 800b798:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b79c:	f7f4 fd8c 	bl	80002b8 <__aeabi_dsub>
 800b7a0:	4622      	mov	r2, r4
 800b7a2:	462b      	mov	r3, r5
 800b7a4:	f7f4 ff40 	bl	8000628 <__aeabi_dmul>
 800b7a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7ac:	4680      	mov	r8, r0
 800b7ae:	4689      	mov	r9, r1
 800b7b0:	4650      	mov	r0, sl
 800b7b2:	4659      	mov	r1, fp
 800b7b4:	f7f4 ff38 	bl	8000628 <__aeabi_dmul>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	4640      	mov	r0, r8
 800b7be:	4649      	mov	r1, r9
 800b7c0:	f7f4 fd7c 	bl	80002bc <__adddf3>
 800b7c4:	4632      	mov	r2, r6
 800b7c6:	463b      	mov	r3, r7
 800b7c8:	4680      	mov	r8, r0
 800b7ca:	4689      	mov	r9, r1
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	f7f4 ff2a 	bl	8000628 <__aeabi_dmul>
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	460d      	mov	r5, r1
 800b7da:	4602      	mov	r2, r0
 800b7dc:	4649      	mov	r1, r9
 800b7de:	4640      	mov	r0, r8
 800b7e0:	f7f4 fd6c 	bl	80002bc <__adddf3>
 800b7e4:	4b19      	ldr	r3, [pc, #100]	; (800b84c <__ieee754_pow+0x3fc>)
 800b7e6:	4299      	cmp	r1, r3
 800b7e8:	ec45 4b19 	vmov	d9, r4, r5
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	460f      	mov	r7, r1
 800b7f0:	468b      	mov	fp, r1
 800b7f2:	f340 82f0 	ble.w	800bdd6 <__ieee754_pow+0x986>
 800b7f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b7fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b7fe:	4303      	orrs	r3, r0
 800b800:	f000 81e4 	beq.w	800bbcc <__ieee754_pow+0x77c>
 800b804:	ec51 0b18 	vmov	r0, r1, d8
 800b808:	2200      	movs	r2, #0
 800b80a:	2300      	movs	r3, #0
 800b80c:	f7f5 f97e 	bl	8000b0c <__aeabi_dcmplt>
 800b810:	3800      	subs	r0, #0
 800b812:	bf18      	it	ne
 800b814:	2001      	movne	r0, #1
 800b816:	e72b      	b.n	800b670 <__ieee754_pow+0x220>
 800b818:	60000000 	.word	0x60000000
 800b81c:	3ff71547 	.word	0x3ff71547
 800b820:	f85ddf44 	.word	0xf85ddf44
 800b824:	3e54ae0b 	.word	0x3e54ae0b
 800b828:	55555555 	.word	0x55555555
 800b82c:	3fd55555 	.word	0x3fd55555
 800b830:	652b82fe 	.word	0x652b82fe
 800b834:	3ff71547 	.word	0x3ff71547
 800b838:	00000000 	.word	0x00000000
 800b83c:	bff00000 	.word	0xbff00000
 800b840:	3ff00000 	.word	0x3ff00000
 800b844:	3fd00000 	.word	0x3fd00000
 800b848:	3fe00000 	.word	0x3fe00000
 800b84c:	408fffff 	.word	0x408fffff
 800b850:	4bd5      	ldr	r3, [pc, #852]	; (800bba8 <__ieee754_pow+0x758>)
 800b852:	402b      	ands	r3, r5
 800b854:	2200      	movs	r2, #0
 800b856:	b92b      	cbnz	r3, 800b864 <__ieee754_pow+0x414>
 800b858:	4bd4      	ldr	r3, [pc, #848]	; (800bbac <__ieee754_pow+0x75c>)
 800b85a:	f7f4 fee5 	bl	8000628 <__aeabi_dmul>
 800b85e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b862:	460c      	mov	r4, r1
 800b864:	1523      	asrs	r3, r4, #20
 800b866:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b86a:	4413      	add	r3, r2
 800b86c:	9305      	str	r3, [sp, #20]
 800b86e:	4bd0      	ldr	r3, [pc, #832]	; (800bbb0 <__ieee754_pow+0x760>)
 800b870:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b874:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b878:	429c      	cmp	r4, r3
 800b87a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b87e:	dd08      	ble.n	800b892 <__ieee754_pow+0x442>
 800b880:	4bcc      	ldr	r3, [pc, #816]	; (800bbb4 <__ieee754_pow+0x764>)
 800b882:	429c      	cmp	r4, r3
 800b884:	f340 8162 	ble.w	800bb4c <__ieee754_pow+0x6fc>
 800b888:	9b05      	ldr	r3, [sp, #20]
 800b88a:	3301      	adds	r3, #1
 800b88c:	9305      	str	r3, [sp, #20]
 800b88e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b892:	2400      	movs	r4, #0
 800b894:	00e3      	lsls	r3, r4, #3
 800b896:	9307      	str	r3, [sp, #28]
 800b898:	4bc7      	ldr	r3, [pc, #796]	; (800bbb8 <__ieee754_pow+0x768>)
 800b89a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b89e:	ed93 7b00 	vldr	d7, [r3]
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	ec53 2b17 	vmov	r2, r3, d7
 800b8a8:	eeb0 9a47 	vmov.f32	s18, s14
 800b8ac:	eef0 9a67 	vmov.f32	s19, s15
 800b8b0:	4682      	mov	sl, r0
 800b8b2:	f7f4 fd01 	bl	80002b8 <__aeabi_dsub>
 800b8b6:	4652      	mov	r2, sl
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	460f      	mov	r7, r1
 800b8bc:	462b      	mov	r3, r5
 800b8be:	ec51 0b19 	vmov	r0, r1, d9
 800b8c2:	f7f4 fcfb 	bl	80002bc <__adddf3>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	49bb      	ldr	r1, [pc, #748]	; (800bbbc <__ieee754_pow+0x76c>)
 800b8ce:	f7f4 ffd5 	bl	800087c <__aeabi_ddiv>
 800b8d2:	ec41 0b1a 	vmov	d10, r0, r1
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	460b      	mov	r3, r1
 800b8da:	4630      	mov	r0, r6
 800b8dc:	4639      	mov	r1, r7
 800b8de:	f7f4 fea3 	bl	8000628 <__aeabi_dmul>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8e8:	9302      	str	r3, [sp, #8]
 800b8ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b8ee:	46ab      	mov	fp, r5
 800b8f0:	106d      	asrs	r5, r5, #1
 800b8f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b8f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b8fa:	ec41 0b18 	vmov	d8, r0, r1
 800b8fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b902:	2200      	movs	r2, #0
 800b904:	4640      	mov	r0, r8
 800b906:	4649      	mov	r1, r9
 800b908:	4614      	mov	r4, r2
 800b90a:	461d      	mov	r5, r3
 800b90c:	f7f4 fe8c 	bl	8000628 <__aeabi_dmul>
 800b910:	4602      	mov	r2, r0
 800b912:	460b      	mov	r3, r1
 800b914:	4630      	mov	r0, r6
 800b916:	4639      	mov	r1, r7
 800b918:	f7f4 fcce 	bl	80002b8 <__aeabi_dsub>
 800b91c:	ec53 2b19 	vmov	r2, r3, d9
 800b920:	4606      	mov	r6, r0
 800b922:	460f      	mov	r7, r1
 800b924:	4620      	mov	r0, r4
 800b926:	4629      	mov	r1, r5
 800b928:	f7f4 fcc6 	bl	80002b8 <__aeabi_dsub>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4650      	mov	r0, sl
 800b932:	4659      	mov	r1, fp
 800b934:	f7f4 fcc0 	bl	80002b8 <__aeabi_dsub>
 800b938:	4642      	mov	r2, r8
 800b93a:	464b      	mov	r3, r9
 800b93c:	f7f4 fe74 	bl	8000628 <__aeabi_dmul>
 800b940:	4602      	mov	r2, r0
 800b942:	460b      	mov	r3, r1
 800b944:	4630      	mov	r0, r6
 800b946:	4639      	mov	r1, r7
 800b948:	f7f4 fcb6 	bl	80002b8 <__aeabi_dsub>
 800b94c:	ec53 2b1a 	vmov	r2, r3, d10
 800b950:	f7f4 fe6a 	bl	8000628 <__aeabi_dmul>
 800b954:	ec53 2b18 	vmov	r2, r3, d8
 800b958:	ec41 0b19 	vmov	d9, r0, r1
 800b95c:	ec51 0b18 	vmov	r0, r1, d8
 800b960:	f7f4 fe62 	bl	8000628 <__aeabi_dmul>
 800b964:	a37c      	add	r3, pc, #496	; (adr r3, 800bb58 <__ieee754_pow+0x708>)
 800b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96a:	4604      	mov	r4, r0
 800b96c:	460d      	mov	r5, r1
 800b96e:	f7f4 fe5b 	bl	8000628 <__aeabi_dmul>
 800b972:	a37b      	add	r3, pc, #492	; (adr r3, 800bb60 <__ieee754_pow+0x710>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f7f4 fca0 	bl	80002bc <__adddf3>
 800b97c:	4622      	mov	r2, r4
 800b97e:	462b      	mov	r3, r5
 800b980:	f7f4 fe52 	bl	8000628 <__aeabi_dmul>
 800b984:	a378      	add	r3, pc, #480	; (adr r3, 800bb68 <__ieee754_pow+0x718>)
 800b986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98a:	f7f4 fc97 	bl	80002bc <__adddf3>
 800b98e:	4622      	mov	r2, r4
 800b990:	462b      	mov	r3, r5
 800b992:	f7f4 fe49 	bl	8000628 <__aeabi_dmul>
 800b996:	a376      	add	r3, pc, #472	; (adr r3, 800bb70 <__ieee754_pow+0x720>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	f7f4 fc8e 	bl	80002bc <__adddf3>
 800b9a0:	4622      	mov	r2, r4
 800b9a2:	462b      	mov	r3, r5
 800b9a4:	f7f4 fe40 	bl	8000628 <__aeabi_dmul>
 800b9a8:	a373      	add	r3, pc, #460	; (adr r3, 800bb78 <__ieee754_pow+0x728>)
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	f7f4 fc85 	bl	80002bc <__adddf3>
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	462b      	mov	r3, r5
 800b9b6:	f7f4 fe37 	bl	8000628 <__aeabi_dmul>
 800b9ba:	a371      	add	r3, pc, #452	; (adr r3, 800bb80 <__ieee754_pow+0x730>)
 800b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c0:	f7f4 fc7c 	bl	80002bc <__adddf3>
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	460f      	mov	r7, r1
 800b9ca:	462b      	mov	r3, r5
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	f7f4 fe2a 	bl	8000628 <__aeabi_dmul>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	4630      	mov	r0, r6
 800b9da:	4639      	mov	r1, r7
 800b9dc:	f7f4 fe24 	bl	8000628 <__aeabi_dmul>
 800b9e0:	4642      	mov	r2, r8
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	460d      	mov	r5, r1
 800b9e6:	464b      	mov	r3, r9
 800b9e8:	ec51 0b18 	vmov	r0, r1, d8
 800b9ec:	f7f4 fc66 	bl	80002bc <__adddf3>
 800b9f0:	ec53 2b19 	vmov	r2, r3, d9
 800b9f4:	f7f4 fe18 	bl	8000628 <__aeabi_dmul>
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	462b      	mov	r3, r5
 800b9fc:	f7f4 fc5e 	bl	80002bc <__adddf3>
 800ba00:	4642      	mov	r2, r8
 800ba02:	4682      	mov	sl, r0
 800ba04:	468b      	mov	fp, r1
 800ba06:	464b      	mov	r3, r9
 800ba08:	4640      	mov	r0, r8
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	f7f4 fe0c 	bl	8000628 <__aeabi_dmul>
 800ba10:	4b6b      	ldr	r3, [pc, #428]	; (800bbc0 <__ieee754_pow+0x770>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	4606      	mov	r6, r0
 800ba16:	460f      	mov	r7, r1
 800ba18:	f7f4 fc50 	bl	80002bc <__adddf3>
 800ba1c:	4652      	mov	r2, sl
 800ba1e:	465b      	mov	r3, fp
 800ba20:	f7f4 fc4c 	bl	80002bc <__adddf3>
 800ba24:	2000      	movs	r0, #0
 800ba26:	4604      	mov	r4, r0
 800ba28:	460d      	mov	r5, r1
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	4640      	mov	r0, r8
 800ba30:	4649      	mov	r1, r9
 800ba32:	f7f4 fdf9 	bl	8000628 <__aeabi_dmul>
 800ba36:	4b62      	ldr	r3, [pc, #392]	; (800bbc0 <__ieee754_pow+0x770>)
 800ba38:	4680      	mov	r8, r0
 800ba3a:	4689      	mov	r9, r1
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	4620      	mov	r0, r4
 800ba40:	4629      	mov	r1, r5
 800ba42:	f7f4 fc39 	bl	80002b8 <__aeabi_dsub>
 800ba46:	4632      	mov	r2, r6
 800ba48:	463b      	mov	r3, r7
 800ba4a:	f7f4 fc35 	bl	80002b8 <__aeabi_dsub>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	460b      	mov	r3, r1
 800ba52:	4650      	mov	r0, sl
 800ba54:	4659      	mov	r1, fp
 800ba56:	f7f4 fc2f 	bl	80002b8 <__aeabi_dsub>
 800ba5a:	ec53 2b18 	vmov	r2, r3, d8
 800ba5e:	f7f4 fde3 	bl	8000628 <__aeabi_dmul>
 800ba62:	4622      	mov	r2, r4
 800ba64:	4606      	mov	r6, r0
 800ba66:	460f      	mov	r7, r1
 800ba68:	462b      	mov	r3, r5
 800ba6a:	ec51 0b19 	vmov	r0, r1, d9
 800ba6e:	f7f4 fddb 	bl	8000628 <__aeabi_dmul>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4630      	mov	r0, r6
 800ba78:	4639      	mov	r1, r7
 800ba7a:	f7f4 fc1f 	bl	80002bc <__adddf3>
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460f      	mov	r7, r1
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	4640      	mov	r0, r8
 800ba88:	4649      	mov	r1, r9
 800ba8a:	f7f4 fc17 	bl	80002bc <__adddf3>
 800ba8e:	a33e      	add	r3, pc, #248	; (adr r3, 800bb88 <__ieee754_pow+0x738>)
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	2000      	movs	r0, #0
 800ba96:	4604      	mov	r4, r0
 800ba98:	460d      	mov	r5, r1
 800ba9a:	f7f4 fdc5 	bl	8000628 <__aeabi_dmul>
 800ba9e:	4642      	mov	r2, r8
 800baa0:	ec41 0b18 	vmov	d8, r0, r1
 800baa4:	464b      	mov	r3, r9
 800baa6:	4620      	mov	r0, r4
 800baa8:	4629      	mov	r1, r5
 800baaa:	f7f4 fc05 	bl	80002b8 <__aeabi_dsub>
 800baae:	4602      	mov	r2, r0
 800bab0:	460b      	mov	r3, r1
 800bab2:	4630      	mov	r0, r6
 800bab4:	4639      	mov	r1, r7
 800bab6:	f7f4 fbff 	bl	80002b8 <__aeabi_dsub>
 800baba:	a335      	add	r3, pc, #212	; (adr r3, 800bb90 <__ieee754_pow+0x740>)
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	f7f4 fdb2 	bl	8000628 <__aeabi_dmul>
 800bac4:	a334      	add	r3, pc, #208	; (adr r3, 800bb98 <__ieee754_pow+0x748>)
 800bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baca:	4606      	mov	r6, r0
 800bacc:	460f      	mov	r7, r1
 800bace:	4620      	mov	r0, r4
 800bad0:	4629      	mov	r1, r5
 800bad2:	f7f4 fda9 	bl	8000628 <__aeabi_dmul>
 800bad6:	4602      	mov	r2, r0
 800bad8:	460b      	mov	r3, r1
 800bada:	4630      	mov	r0, r6
 800badc:	4639      	mov	r1, r7
 800bade:	f7f4 fbed 	bl	80002bc <__adddf3>
 800bae2:	9a07      	ldr	r2, [sp, #28]
 800bae4:	4b37      	ldr	r3, [pc, #220]	; (800bbc4 <__ieee754_pow+0x774>)
 800bae6:	4413      	add	r3, r2
 800bae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baec:	f7f4 fbe6 	bl	80002bc <__adddf3>
 800baf0:	4682      	mov	sl, r0
 800baf2:	9805      	ldr	r0, [sp, #20]
 800baf4:	468b      	mov	fp, r1
 800baf6:	f7f4 fd2d 	bl	8000554 <__aeabi_i2d>
 800bafa:	9a07      	ldr	r2, [sp, #28]
 800bafc:	4b32      	ldr	r3, [pc, #200]	; (800bbc8 <__ieee754_pow+0x778>)
 800bafe:	4413      	add	r3, r2
 800bb00:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb04:	4606      	mov	r6, r0
 800bb06:	460f      	mov	r7, r1
 800bb08:	4652      	mov	r2, sl
 800bb0a:	465b      	mov	r3, fp
 800bb0c:	ec51 0b18 	vmov	r0, r1, d8
 800bb10:	f7f4 fbd4 	bl	80002bc <__adddf3>
 800bb14:	4642      	mov	r2, r8
 800bb16:	464b      	mov	r3, r9
 800bb18:	f7f4 fbd0 	bl	80002bc <__adddf3>
 800bb1c:	4632      	mov	r2, r6
 800bb1e:	463b      	mov	r3, r7
 800bb20:	f7f4 fbcc 	bl	80002bc <__adddf3>
 800bb24:	2000      	movs	r0, #0
 800bb26:	4632      	mov	r2, r6
 800bb28:	463b      	mov	r3, r7
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	460d      	mov	r5, r1
 800bb2e:	f7f4 fbc3 	bl	80002b8 <__aeabi_dsub>
 800bb32:	4642      	mov	r2, r8
 800bb34:	464b      	mov	r3, r9
 800bb36:	f7f4 fbbf 	bl	80002b8 <__aeabi_dsub>
 800bb3a:	ec53 2b18 	vmov	r2, r3, d8
 800bb3e:	f7f4 fbbb 	bl	80002b8 <__aeabi_dsub>
 800bb42:	4602      	mov	r2, r0
 800bb44:	460b      	mov	r3, r1
 800bb46:	4650      	mov	r0, sl
 800bb48:	4659      	mov	r1, fp
 800bb4a:	e610      	b.n	800b76e <__ieee754_pow+0x31e>
 800bb4c:	2401      	movs	r4, #1
 800bb4e:	e6a1      	b.n	800b894 <__ieee754_pow+0x444>
 800bb50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bba0 <__ieee754_pow+0x750>
 800bb54:	e617      	b.n	800b786 <__ieee754_pow+0x336>
 800bb56:	bf00      	nop
 800bb58:	4a454eef 	.word	0x4a454eef
 800bb5c:	3fca7e28 	.word	0x3fca7e28
 800bb60:	93c9db65 	.word	0x93c9db65
 800bb64:	3fcd864a 	.word	0x3fcd864a
 800bb68:	a91d4101 	.word	0xa91d4101
 800bb6c:	3fd17460 	.word	0x3fd17460
 800bb70:	518f264d 	.word	0x518f264d
 800bb74:	3fd55555 	.word	0x3fd55555
 800bb78:	db6fabff 	.word	0xdb6fabff
 800bb7c:	3fdb6db6 	.word	0x3fdb6db6
 800bb80:	33333303 	.word	0x33333303
 800bb84:	3fe33333 	.word	0x3fe33333
 800bb88:	e0000000 	.word	0xe0000000
 800bb8c:	3feec709 	.word	0x3feec709
 800bb90:	dc3a03fd 	.word	0xdc3a03fd
 800bb94:	3feec709 	.word	0x3feec709
 800bb98:	145b01f5 	.word	0x145b01f5
 800bb9c:	be3e2fe0 	.word	0xbe3e2fe0
 800bba0:	00000000 	.word	0x00000000
 800bba4:	3ff00000 	.word	0x3ff00000
 800bba8:	7ff00000 	.word	0x7ff00000
 800bbac:	43400000 	.word	0x43400000
 800bbb0:	0003988e 	.word	0x0003988e
 800bbb4:	000bb679 	.word	0x000bb679
 800bbb8:	0800c1c0 	.word	0x0800c1c0
 800bbbc:	3ff00000 	.word	0x3ff00000
 800bbc0:	40080000 	.word	0x40080000
 800bbc4:	0800c1e0 	.word	0x0800c1e0
 800bbc8:	0800c1d0 	.word	0x0800c1d0
 800bbcc:	a3b3      	add	r3, pc, #716	; (adr r3, 800be9c <__ieee754_pow+0xa4c>)
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	4640      	mov	r0, r8
 800bbd4:	4649      	mov	r1, r9
 800bbd6:	f7f4 fb71 	bl	80002bc <__adddf3>
 800bbda:	4622      	mov	r2, r4
 800bbdc:	ec41 0b1a 	vmov	d10, r0, r1
 800bbe0:	462b      	mov	r3, r5
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	4639      	mov	r1, r7
 800bbe6:	f7f4 fb67 	bl	80002b8 <__aeabi_dsub>
 800bbea:	4602      	mov	r2, r0
 800bbec:	460b      	mov	r3, r1
 800bbee:	ec51 0b1a 	vmov	r0, r1, d10
 800bbf2:	f7f4 ffa9 	bl	8000b48 <__aeabi_dcmpgt>
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	f47f ae04 	bne.w	800b804 <__ieee754_pow+0x3b4>
 800bbfc:	4aa2      	ldr	r2, [pc, #648]	; (800be88 <__ieee754_pow+0xa38>)
 800bbfe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bc02:	4293      	cmp	r3, r2
 800bc04:	f340 8107 	ble.w	800be16 <__ieee754_pow+0x9c6>
 800bc08:	151b      	asrs	r3, r3, #20
 800bc0a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bc0e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bc12:	fa4a fa03 	asr.w	sl, sl, r3
 800bc16:	44da      	add	sl, fp
 800bc18:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800bc1c:	489b      	ldr	r0, [pc, #620]	; (800be8c <__ieee754_pow+0xa3c>)
 800bc1e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bc22:	4108      	asrs	r0, r1
 800bc24:	ea00 030a 	and.w	r3, r0, sl
 800bc28:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800bc2c:	f1c1 0114 	rsb	r1, r1, #20
 800bc30:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bc34:	fa4a fa01 	asr.w	sl, sl, r1
 800bc38:	f1bb 0f00 	cmp.w	fp, #0
 800bc3c:	f04f 0200 	mov.w	r2, #0
 800bc40:	4620      	mov	r0, r4
 800bc42:	4629      	mov	r1, r5
 800bc44:	bfb8      	it	lt
 800bc46:	f1ca 0a00 	rsblt	sl, sl, #0
 800bc4a:	f7f4 fb35 	bl	80002b8 <__aeabi_dsub>
 800bc4e:	ec41 0b19 	vmov	d9, r0, r1
 800bc52:	4642      	mov	r2, r8
 800bc54:	464b      	mov	r3, r9
 800bc56:	ec51 0b19 	vmov	r0, r1, d9
 800bc5a:	f7f4 fb2f 	bl	80002bc <__adddf3>
 800bc5e:	a37a      	add	r3, pc, #488	; (adr r3, 800be48 <__ieee754_pow+0x9f8>)
 800bc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc64:	2000      	movs	r0, #0
 800bc66:	4604      	mov	r4, r0
 800bc68:	460d      	mov	r5, r1
 800bc6a:	f7f4 fcdd 	bl	8000628 <__aeabi_dmul>
 800bc6e:	ec53 2b19 	vmov	r2, r3, d9
 800bc72:	4606      	mov	r6, r0
 800bc74:	460f      	mov	r7, r1
 800bc76:	4620      	mov	r0, r4
 800bc78:	4629      	mov	r1, r5
 800bc7a:	f7f4 fb1d 	bl	80002b8 <__aeabi_dsub>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	460b      	mov	r3, r1
 800bc82:	4640      	mov	r0, r8
 800bc84:	4649      	mov	r1, r9
 800bc86:	f7f4 fb17 	bl	80002b8 <__aeabi_dsub>
 800bc8a:	a371      	add	r3, pc, #452	; (adr r3, 800be50 <__ieee754_pow+0xa00>)
 800bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc90:	f7f4 fcca 	bl	8000628 <__aeabi_dmul>
 800bc94:	a370      	add	r3, pc, #448	; (adr r3, 800be58 <__ieee754_pow+0xa08>)
 800bc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9a:	4680      	mov	r8, r0
 800bc9c:	4689      	mov	r9, r1
 800bc9e:	4620      	mov	r0, r4
 800bca0:	4629      	mov	r1, r5
 800bca2:	f7f4 fcc1 	bl	8000628 <__aeabi_dmul>
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	4640      	mov	r0, r8
 800bcac:	4649      	mov	r1, r9
 800bcae:	f7f4 fb05 	bl	80002bc <__adddf3>
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	460d      	mov	r5, r1
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	460b      	mov	r3, r1
 800bcba:	4630      	mov	r0, r6
 800bcbc:	4639      	mov	r1, r7
 800bcbe:	f7f4 fafd 	bl	80002bc <__adddf3>
 800bcc2:	4632      	mov	r2, r6
 800bcc4:	463b      	mov	r3, r7
 800bcc6:	4680      	mov	r8, r0
 800bcc8:	4689      	mov	r9, r1
 800bcca:	f7f4 faf5 	bl	80002b8 <__aeabi_dsub>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	f7f4 faef 	bl	80002b8 <__aeabi_dsub>
 800bcda:	4642      	mov	r2, r8
 800bcdc:	4606      	mov	r6, r0
 800bcde:	460f      	mov	r7, r1
 800bce0:	464b      	mov	r3, r9
 800bce2:	4640      	mov	r0, r8
 800bce4:	4649      	mov	r1, r9
 800bce6:	f7f4 fc9f 	bl	8000628 <__aeabi_dmul>
 800bcea:	a35d      	add	r3, pc, #372	; (adr r3, 800be60 <__ieee754_pow+0xa10>)
 800bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	460d      	mov	r5, r1
 800bcf4:	f7f4 fc98 	bl	8000628 <__aeabi_dmul>
 800bcf8:	a35b      	add	r3, pc, #364	; (adr r3, 800be68 <__ieee754_pow+0xa18>)
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	f7f4 fadb 	bl	80002b8 <__aeabi_dsub>
 800bd02:	4622      	mov	r2, r4
 800bd04:	462b      	mov	r3, r5
 800bd06:	f7f4 fc8f 	bl	8000628 <__aeabi_dmul>
 800bd0a:	a359      	add	r3, pc, #356	; (adr r3, 800be70 <__ieee754_pow+0xa20>)
 800bd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd10:	f7f4 fad4 	bl	80002bc <__adddf3>
 800bd14:	4622      	mov	r2, r4
 800bd16:	462b      	mov	r3, r5
 800bd18:	f7f4 fc86 	bl	8000628 <__aeabi_dmul>
 800bd1c:	a356      	add	r3, pc, #344	; (adr r3, 800be78 <__ieee754_pow+0xa28>)
 800bd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd22:	f7f4 fac9 	bl	80002b8 <__aeabi_dsub>
 800bd26:	4622      	mov	r2, r4
 800bd28:	462b      	mov	r3, r5
 800bd2a:	f7f4 fc7d 	bl	8000628 <__aeabi_dmul>
 800bd2e:	a354      	add	r3, pc, #336	; (adr r3, 800be80 <__ieee754_pow+0xa30>)
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	f7f4 fac2 	bl	80002bc <__adddf3>
 800bd38:	4622      	mov	r2, r4
 800bd3a:	462b      	mov	r3, r5
 800bd3c:	f7f4 fc74 	bl	8000628 <__aeabi_dmul>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4640      	mov	r0, r8
 800bd46:	4649      	mov	r1, r9
 800bd48:	f7f4 fab6 	bl	80002b8 <__aeabi_dsub>
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	460d      	mov	r5, r1
 800bd50:	4602      	mov	r2, r0
 800bd52:	460b      	mov	r3, r1
 800bd54:	4640      	mov	r0, r8
 800bd56:	4649      	mov	r1, r9
 800bd58:	f7f4 fc66 	bl	8000628 <__aeabi_dmul>
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	ec41 0b19 	vmov	d9, r0, r1
 800bd62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd66:	4620      	mov	r0, r4
 800bd68:	4629      	mov	r1, r5
 800bd6a:	f7f4 faa5 	bl	80002b8 <__aeabi_dsub>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	460b      	mov	r3, r1
 800bd72:	ec51 0b19 	vmov	r0, r1, d9
 800bd76:	f7f4 fd81 	bl	800087c <__aeabi_ddiv>
 800bd7a:	4632      	mov	r2, r6
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	460d      	mov	r5, r1
 800bd80:	463b      	mov	r3, r7
 800bd82:	4640      	mov	r0, r8
 800bd84:	4649      	mov	r1, r9
 800bd86:	f7f4 fc4f 	bl	8000628 <__aeabi_dmul>
 800bd8a:	4632      	mov	r2, r6
 800bd8c:	463b      	mov	r3, r7
 800bd8e:	f7f4 fa95 	bl	80002bc <__adddf3>
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	4620      	mov	r0, r4
 800bd98:	4629      	mov	r1, r5
 800bd9a:	f7f4 fa8d 	bl	80002b8 <__aeabi_dsub>
 800bd9e:	4642      	mov	r2, r8
 800bda0:	464b      	mov	r3, r9
 800bda2:	f7f4 fa89 	bl	80002b8 <__aeabi_dsub>
 800bda6:	460b      	mov	r3, r1
 800bda8:	4602      	mov	r2, r0
 800bdaa:	4939      	ldr	r1, [pc, #228]	; (800be90 <__ieee754_pow+0xa40>)
 800bdac:	2000      	movs	r0, #0
 800bdae:	f7f4 fa83 	bl	80002b8 <__aeabi_dsub>
 800bdb2:	ec41 0b10 	vmov	d0, r0, r1
 800bdb6:	ee10 3a90 	vmov	r3, s1
 800bdba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bdbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdc2:	da2b      	bge.n	800be1c <__ieee754_pow+0x9cc>
 800bdc4:	4650      	mov	r0, sl
 800bdc6:	f000 f877 	bl	800beb8 <scalbn>
 800bdca:	ec51 0b10 	vmov	r0, r1, d0
 800bdce:	ec53 2b18 	vmov	r2, r3, d8
 800bdd2:	f7ff bbee 	b.w	800b5b2 <__ieee754_pow+0x162>
 800bdd6:	4b2f      	ldr	r3, [pc, #188]	; (800be94 <__ieee754_pow+0xa44>)
 800bdd8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bddc:	429e      	cmp	r6, r3
 800bdde:	f77f af0d 	ble.w	800bbfc <__ieee754_pow+0x7ac>
 800bde2:	4b2d      	ldr	r3, [pc, #180]	; (800be98 <__ieee754_pow+0xa48>)
 800bde4:	440b      	add	r3, r1
 800bde6:	4303      	orrs	r3, r0
 800bde8:	d009      	beq.n	800bdfe <__ieee754_pow+0x9ae>
 800bdea:	ec51 0b18 	vmov	r0, r1, d8
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	f7f4 fe8b 	bl	8000b0c <__aeabi_dcmplt>
 800bdf6:	3800      	subs	r0, #0
 800bdf8:	bf18      	it	ne
 800bdfa:	2001      	movne	r0, #1
 800bdfc:	e448      	b.n	800b690 <__ieee754_pow+0x240>
 800bdfe:	4622      	mov	r2, r4
 800be00:	462b      	mov	r3, r5
 800be02:	f7f4 fa59 	bl	80002b8 <__aeabi_dsub>
 800be06:	4642      	mov	r2, r8
 800be08:	464b      	mov	r3, r9
 800be0a:	f7f4 fe93 	bl	8000b34 <__aeabi_dcmpge>
 800be0e:	2800      	cmp	r0, #0
 800be10:	f43f aef4 	beq.w	800bbfc <__ieee754_pow+0x7ac>
 800be14:	e7e9      	b.n	800bdea <__ieee754_pow+0x99a>
 800be16:	f04f 0a00 	mov.w	sl, #0
 800be1a:	e71a      	b.n	800bc52 <__ieee754_pow+0x802>
 800be1c:	ec51 0b10 	vmov	r0, r1, d0
 800be20:	4619      	mov	r1, r3
 800be22:	e7d4      	b.n	800bdce <__ieee754_pow+0x97e>
 800be24:	491a      	ldr	r1, [pc, #104]	; (800be90 <__ieee754_pow+0xa40>)
 800be26:	2000      	movs	r0, #0
 800be28:	f7ff bb31 	b.w	800b48e <__ieee754_pow+0x3e>
 800be2c:	2000      	movs	r0, #0
 800be2e:	2100      	movs	r1, #0
 800be30:	f7ff bb2d 	b.w	800b48e <__ieee754_pow+0x3e>
 800be34:	4630      	mov	r0, r6
 800be36:	4639      	mov	r1, r7
 800be38:	f7ff bb29 	b.w	800b48e <__ieee754_pow+0x3e>
 800be3c:	9204      	str	r2, [sp, #16]
 800be3e:	f7ff bb7b 	b.w	800b538 <__ieee754_pow+0xe8>
 800be42:	2300      	movs	r3, #0
 800be44:	f7ff bb65 	b.w	800b512 <__ieee754_pow+0xc2>
 800be48:	00000000 	.word	0x00000000
 800be4c:	3fe62e43 	.word	0x3fe62e43
 800be50:	fefa39ef 	.word	0xfefa39ef
 800be54:	3fe62e42 	.word	0x3fe62e42
 800be58:	0ca86c39 	.word	0x0ca86c39
 800be5c:	be205c61 	.word	0xbe205c61
 800be60:	72bea4d0 	.word	0x72bea4d0
 800be64:	3e663769 	.word	0x3e663769
 800be68:	c5d26bf1 	.word	0xc5d26bf1
 800be6c:	3ebbbd41 	.word	0x3ebbbd41
 800be70:	af25de2c 	.word	0xaf25de2c
 800be74:	3f11566a 	.word	0x3f11566a
 800be78:	16bebd93 	.word	0x16bebd93
 800be7c:	3f66c16c 	.word	0x3f66c16c
 800be80:	5555553e 	.word	0x5555553e
 800be84:	3fc55555 	.word	0x3fc55555
 800be88:	3fe00000 	.word	0x3fe00000
 800be8c:	fff00000 	.word	0xfff00000
 800be90:	3ff00000 	.word	0x3ff00000
 800be94:	4090cbff 	.word	0x4090cbff
 800be98:	3f6f3400 	.word	0x3f6f3400
 800be9c:	652b82fe 	.word	0x652b82fe
 800bea0:	3c971547 	.word	0x3c971547

0800bea4 <fabs>:
 800bea4:	ec51 0b10 	vmov	r0, r1, d0
 800bea8:	ee10 2a10 	vmov	r2, s0
 800beac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800beb0:	ec43 2b10 	vmov	d0, r2, r3
 800beb4:	4770      	bx	lr
	...

0800beb8 <scalbn>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	ec55 4b10 	vmov	r4, r5, d0
 800bebe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bec2:	4606      	mov	r6, r0
 800bec4:	462b      	mov	r3, r5
 800bec6:	b999      	cbnz	r1, 800bef0 <scalbn+0x38>
 800bec8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800becc:	4323      	orrs	r3, r4
 800bece:	d03f      	beq.n	800bf50 <scalbn+0x98>
 800bed0:	4b35      	ldr	r3, [pc, #212]	; (800bfa8 <scalbn+0xf0>)
 800bed2:	4629      	mov	r1, r5
 800bed4:	ee10 0a10 	vmov	r0, s0
 800bed8:	2200      	movs	r2, #0
 800beda:	f7f4 fba5 	bl	8000628 <__aeabi_dmul>
 800bede:	4b33      	ldr	r3, [pc, #204]	; (800bfac <scalbn+0xf4>)
 800bee0:	429e      	cmp	r6, r3
 800bee2:	4604      	mov	r4, r0
 800bee4:	460d      	mov	r5, r1
 800bee6:	da10      	bge.n	800bf0a <scalbn+0x52>
 800bee8:	a327      	add	r3, pc, #156	; (adr r3, 800bf88 <scalbn+0xd0>)
 800beea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beee:	e01f      	b.n	800bf30 <scalbn+0x78>
 800bef0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bef4:	4291      	cmp	r1, r2
 800bef6:	d10c      	bne.n	800bf12 <scalbn+0x5a>
 800bef8:	ee10 2a10 	vmov	r2, s0
 800befc:	4620      	mov	r0, r4
 800befe:	4629      	mov	r1, r5
 800bf00:	f7f4 f9dc 	bl	80002bc <__adddf3>
 800bf04:	4604      	mov	r4, r0
 800bf06:	460d      	mov	r5, r1
 800bf08:	e022      	b.n	800bf50 <scalbn+0x98>
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bf10:	3936      	subs	r1, #54	; 0x36
 800bf12:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bf16:	4296      	cmp	r6, r2
 800bf18:	dd0d      	ble.n	800bf36 <scalbn+0x7e>
 800bf1a:	2d00      	cmp	r5, #0
 800bf1c:	a11c      	add	r1, pc, #112	; (adr r1, 800bf90 <scalbn+0xd8>)
 800bf1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf22:	da02      	bge.n	800bf2a <scalbn+0x72>
 800bf24:	a11c      	add	r1, pc, #112	; (adr r1, 800bf98 <scalbn+0xe0>)
 800bf26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf2a:	a319      	add	r3, pc, #100	; (adr r3, 800bf90 <scalbn+0xd8>)
 800bf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf30:	f7f4 fb7a 	bl	8000628 <__aeabi_dmul>
 800bf34:	e7e6      	b.n	800bf04 <scalbn+0x4c>
 800bf36:	1872      	adds	r2, r6, r1
 800bf38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bf3c:	428a      	cmp	r2, r1
 800bf3e:	dcec      	bgt.n	800bf1a <scalbn+0x62>
 800bf40:	2a00      	cmp	r2, #0
 800bf42:	dd08      	ble.n	800bf56 <scalbn+0x9e>
 800bf44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf50:	ec45 4b10 	vmov	d0, r4, r5
 800bf54:	bd70      	pop	{r4, r5, r6, pc}
 800bf56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bf5a:	da08      	bge.n	800bf6e <scalbn+0xb6>
 800bf5c:	2d00      	cmp	r5, #0
 800bf5e:	a10a      	add	r1, pc, #40	; (adr r1, 800bf88 <scalbn+0xd0>)
 800bf60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf64:	dac0      	bge.n	800bee8 <scalbn+0x30>
 800bf66:	a10e      	add	r1, pc, #56	; (adr r1, 800bfa0 <scalbn+0xe8>)
 800bf68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf6c:	e7bc      	b.n	800bee8 <scalbn+0x30>
 800bf6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf72:	3236      	adds	r2, #54	; 0x36
 800bf74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	4b0c      	ldr	r3, [pc, #48]	; (800bfb0 <scalbn+0xf8>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	e7d5      	b.n	800bf30 <scalbn+0x78>
 800bf84:	f3af 8000 	nop.w
 800bf88:	c2f8f359 	.word	0xc2f8f359
 800bf8c:	01a56e1f 	.word	0x01a56e1f
 800bf90:	8800759c 	.word	0x8800759c
 800bf94:	7e37e43c 	.word	0x7e37e43c
 800bf98:	8800759c 	.word	0x8800759c
 800bf9c:	fe37e43c 	.word	0xfe37e43c
 800bfa0:	c2f8f359 	.word	0xc2f8f359
 800bfa4:	81a56e1f 	.word	0x81a56e1f
 800bfa8:	43500000 	.word	0x43500000
 800bfac:	ffff3cb0 	.word	0xffff3cb0
 800bfb0:	3c900000 	.word	0x3c900000

0800bfb4 <with_errno>:
 800bfb4:	b570      	push	{r4, r5, r6, lr}
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	460d      	mov	r5, r1
 800bfba:	4616      	mov	r6, r2
 800bfbc:	f7fe fc0e 	bl	800a7dc <__errno>
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	6006      	str	r6, [r0, #0]
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	bd70      	pop	{r4, r5, r6, pc}

0800bfc8 <xflow>:
 800bfc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfca:	4614      	mov	r4, r2
 800bfcc:	461d      	mov	r5, r3
 800bfce:	b108      	cbz	r0, 800bfd4 <xflow+0xc>
 800bfd0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bfd4:	e9cd 2300 	strd	r2, r3, [sp]
 800bfd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfdc:	4620      	mov	r0, r4
 800bfde:	4629      	mov	r1, r5
 800bfe0:	f7f4 fb22 	bl	8000628 <__aeabi_dmul>
 800bfe4:	2222      	movs	r2, #34	; 0x22
 800bfe6:	b003      	add	sp, #12
 800bfe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfec:	f7ff bfe2 	b.w	800bfb4 <with_errno>

0800bff0 <__math_uflow>:
 800bff0:	b508      	push	{r3, lr}
 800bff2:	2200      	movs	r2, #0
 800bff4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bff8:	f7ff ffe6 	bl	800bfc8 <xflow>
 800bffc:	ec41 0b10 	vmov	d0, r0, r1
 800c000:	bd08      	pop	{r3, pc}

0800c002 <__math_oflow>:
 800c002:	b508      	push	{r3, lr}
 800c004:	2200      	movs	r2, #0
 800c006:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c00a:	f7ff ffdd 	bl	800bfc8 <xflow>
 800c00e:	ec41 0b10 	vmov	d0, r0, r1
 800c012:	bd08      	pop	{r3, pc}

0800c014 <_init>:
 800c014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c016:	bf00      	nop
 800c018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c01a:	bc08      	pop	{r3}
 800c01c:	469e      	mov	lr, r3
 800c01e:	4770      	bx	lr

0800c020 <_fini>:
 800c020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c022:	bf00      	nop
 800c024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c026:	bc08      	pop	{r3}
 800c028:	469e      	mov	lr, r3
 800c02a:	4770      	bx	lr
